
RAD_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f4  080027f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f4  080027f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f4  080027f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08002808  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002808  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c7a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000141d  00000000  00000000  00026cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  000280d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00028778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ee  00000000  00000000  00028d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084ce  00000000  00000000  00041066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c616  00000000  00000000  00049534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5b4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016ac  00000000  00000000  000d5b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027ac 	.word	0x080027ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027ac 	.word	0x080027ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  count++;
 8000228:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000232:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2120      	movs	r1, #32
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fce5 	bl	8001c0a <HAL_GPIO_TogglePin>
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	2100      	movs	r1, #0
 8000248:	f000 ff02 	bl	8001050 <HAL_CAN_GetRxMessage>
}
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000160 	.word	0x20000160
 8000258:	20000158 	.word	0x20000158
 800025c:	20000130 	.word	0x20000130

08000260 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fb88 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 f83a 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 f950 	bl	8000510 <MX_GPIO_Init>
  MX_CAN_Init();
 8000270:	f000 f872 	bl	8000358 <MX_CAN_Init>
  MX_SPI1_Init();
 8000274:	f000 f8d0 	bl	8000418 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000278:	f000 f90c 	bl	8000494 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  // Start CAN
  HAL_CAN_Start(&hcan);
 800027c:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <main+0x70>)
 800027e:	0018      	movs	r0, r3
 8000280:	f000 fdce 	bl	8000e20 <HAL_CAN_Start>
  // Activate receive interrupt when message is received on queue 0
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <main+0x70>)
 8000286:	2102      	movs	r1, #2
 8000288:	0018      	movs	r0, r3
 800028a:	f001 f80c 	bl	80012a6 <HAL_CAN_ActivateNotification>

  // Initialize TxHeader
  TxHeader.DLC = sizeof(TxData[0]);      // Number of bytes to send
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <main+0x74>)
 8000290:	2201      	movs	r2, #1
 8000292:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;                    // Extended ID (set to 0 because we're using standard)
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <main+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;             // Using standard CAN ID
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <main+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;           // We are sending data
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <main+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x111;                // ID of RAD board. This should be stored in EEPROM
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0x74>)
 80002a8:	2212      	movs	r2, #18
 80002aa:	32ff      	adds	r2, #255	; 0xff
 80002ac:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE; // Keep disabled
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0xf1;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x78>)
 80002b6:	22f1      	movs	r2, #241	; 0xf1
 80002b8:	701a      	strb	r2, [r3, #0]

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <main+0x7c>)
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <main+0x78>)
 80002be:	4905      	ldr	r1, [pc, #20]	; (80002d4 <main+0x74>)
 80002c0:	4803      	ldr	r0, [pc, #12]	; (80002d0 <main+0x70>)
 80002c2:	f000 fdf3 	bl	8000eac <HAL_CAN_AddTxMessage>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <main+0x6e>
  {
    Error_Handler();
 80002ca:	f000 f9af 	bl	800062c <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <main+0x6e>
 80002d0:	20000028 	.word	0x20000028
 80002d4:	20000118 	.word	0x20000118
 80002d8:	20000150 	.word	0x20000150
 80002dc:	2000014c 	.word	0x2000014c

080002e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b093      	sub	sp, #76	; 0x4c
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2414      	movs	r4, #20
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2334      	movs	r3, #52	; 0x34
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fa53 	bl	800279c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fa4c 	bl	800279c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2220      	movs	r2, #32
 8000308:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2201      	movs	r2, #1
 800030e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2200      	movs	r2, #0
 8000314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	193b      	adds	r3, r7, r4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fc91 	bl	8001c40 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000322:	f000 f983 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2207      	movs	r2, #7
 800032a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2203      	movs	r2, #3
 8000330:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2101      	movs	r1, #1
 8000342:	0018      	movs	r0, r3
 8000344:	f002 f802 	bl	800234c <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800034c:	f000 f96e 	bl	800062c <Error_Handler>
  }
}
 8000350:	46c0      	nop			; (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b013      	add	sp, #76	; 0x4c
 8000356:	bd90      	pop	{r4, r7, pc}

08000358 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	; 0x28
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800035e:	4b2b      	ldr	r3, [pc, #172]	; (800040c <MX_CAN_Init+0xb4>)
 8000360:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MX_CAN_Init+0xb8>)
 8000362:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 8000364:	4b29      	ldr	r3, [pc, #164]	; (800040c <MX_CAN_Init+0xb4>)
 8000366:	2220      	movs	r2, #32
 8000368:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800036a:	4b28      	ldr	r3, [pc, #160]	; (800040c <MX_CAN_Init+0xb4>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	05d2      	lsls	r2, r2, #23
 8000370:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000372:	4b26      	ldr	r3, [pc, #152]	; (800040c <MX_CAN_Init+0xb4>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <MX_CAN_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800037e:	4b23      	ldr	r3, [pc, #140]	; (800040c <MX_CAN_Init+0xb4>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <MX_CAN_Init+0xb4>)
 8000386:	2200      	movs	r2, #0
 8000388:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800038a:	4b20      	ldr	r3, [pc, #128]	; (800040c <MX_CAN_Init+0xb4>)
 800038c:	2200      	movs	r2, #0
 800038e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <MX_CAN_Init+0xb4>)
 8000392:	2200      	movs	r2, #0
 8000394:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000396:	4b1d      	ldr	r3, [pc, #116]	; (800040c <MX_CAN_Init+0xb4>)
 8000398:	2200      	movs	r2, #0
 800039a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_CAN_Init+0xb4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <MX_CAN_Init+0xb4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_CAN_Init+0xb4>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fb48 	bl	8000a40 <HAL_CAN_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003b4:	f000 f93a 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2201      	movs	r2, #1
 80003bc:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 10;
 80003be:	003b      	movs	r3, r7
 80003c0:	220a      	movs	r2, #10
 80003c2:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = 0x103 << 5;
 80003ca:	003b      	movs	r3, r7
 80003cc:	4a11      	ldr	r2, [pc, #68]	; (8000414 <MX_CAN_Init+0xbc>)
 80003ce:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = 0x1 << 13;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	0192      	lsls	r2, r2, #6
 80003dc:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80003de:	003b      	movs	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2201      	movs	r2, #1
 80003ee:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80003f6:	003a      	movs	r2, r7
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <MX_CAN_Init+0xb4>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fc1d 	bl	8000c3c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */
}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b00a      	add	sp, #40	; 0x28
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000028 	.word	0x20000028
 8000410:	40006400 	.word	0x40006400
 8000414:	00002060 	.word	0x00002060

08000418 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <MX_SPI1_Init+0x74>)
 800041e:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <MX_SPI1_Init+0x78>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_SPI1_Init+0x74>)
 8000424:	2282      	movs	r2, #130	; 0x82
 8000426:	0052      	lsls	r2, r2, #1
 8000428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <MX_SPI1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000430:	4b16      	ldr	r3, [pc, #88]	; (800048c <MX_SPI1_Init+0x74>)
 8000432:	22c0      	movs	r2, #192	; 0xc0
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_SPI1_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <MX_SPI1_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <MX_SPI1_Init+0x74>)
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	0092      	lsls	r2, r2, #2
 800044a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_SPI1_Init+0x74>)
 800044e:	2210      	movs	r2, #16
 8000450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_SPI1_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_SPI1_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_SPI1_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_SPI1_Init+0x74>)
 8000466:	2207      	movs	r2, #7
 8000468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_SPI1_Init+0x74>)
 8000472:	2208      	movs	r2, #8
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000476:	4b05      	ldr	r3, [pc, #20]	; (800048c <MX_SPI1_Init+0x74>)
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f8b3 	bl	80025e4 <HAL_SPI_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000482:	f000 f8d3 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000050 	.word	0x20000050
 8000490:	40013000 	.word	0x40013000

08000494 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_SPI2_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <MX_SPI2_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_SPI2_Init+0x74>)
 80004a0:	2282      	movs	r2, #130	; 0x82
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_SPI2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ae:	22c0      	movs	r2, #192	; 0xc0
 80004b0:	0092      	lsls	r2, r2, #2
 80004b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_SPI2_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_SPI2_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_SPI2_Init+0x74>)
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ca:	2210      	movs	r2, #16
 80004cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_SPI2_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_SPI2_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_SPI2_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_SPI2_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_SPI2_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_SPI2_Init+0x74>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_SPI2_Init+0x74>)
 80004f4:	0018      	movs	r0, r3
 80004f6:	f002 f875 	bl	80025e4 <HAL_SPI_Init>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f895 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000b4 	.word	0x200000b4
 800050c:	40003800 	.word	0x40003800

08000510 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b08b      	sub	sp, #44	; 0x2c
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	2414      	movs	r4, #20
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2314      	movs	r3, #20
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 f93b 	bl	800279c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b3f      	ldr	r3, [pc, #252]	; (8000624 <MX_GPIO_Init+0x114>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <MX_GPIO_Init+0x114>)
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0309      	lsls	r1, r1, #12
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b3b      	ldr	r3, [pc, #236]	; (8000624 <MX_GPIO_Init+0x114>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	031b      	lsls	r3, r3, #12
 800053c:	4013      	ands	r3, r2
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <MX_GPIO_Init+0x114>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b37      	ldr	r3, [pc, #220]	; (8000624 <MX_GPIO_Init+0x114>)
 8000548:	2180      	movs	r1, #128	; 0x80
 800054a:	03c9      	lsls	r1, r1, #15
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <MX_GPIO_Init+0x114>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	03db      	lsls	r3, r3, #15
 8000558:	4013      	ands	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b31      	ldr	r3, [pc, #196]	; (8000624 <MX_GPIO_Init+0x114>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b30      	ldr	r3, [pc, #192]	; (8000624 <MX_GPIO_Init+0x114>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b2d      	ldr	r3, [pc, #180]	; (8000624 <MX_GPIO_Init+0x114>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <MX_GPIO_Init+0x114>)
 800057c:	695a      	ldr	r2, [r3, #20]
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_GPIO_Init+0x114>)
 8000580:	2180      	movs	r1, #128	; 0x80
 8000582:	02c9      	lsls	r1, r1, #11
 8000584:	430a      	orrs	r2, r1
 8000586:	615a      	str	r2, [r3, #20]
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_GPIO_Init+0x114>)
 800058a:	695a      	ldr	r2, [r3, #20]
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	02db      	lsls	r3, r3, #11
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000596:	2390      	movs	r3, #144	; 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	2200      	movs	r2, #0
 800059c:	2120      	movs	r1, #32
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 fb16 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	0192      	lsls	r2, r2, #6
 80005aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2284      	movs	r2, #132	; 0x84
 80005b0:	0392      	lsls	r2, r2, #14
 80005b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	4a1a      	ldr	r2, [pc, #104]	; (8000628 <MX_GPIO_Init+0x118>)
 80005be:	0019      	movs	r1, r3
 80005c0:	0010      	movs	r0, r2
 80005c2:	f001 f98d 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	220c      	movs	r2, #12
 80005ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2202      	movs	r2, #2
 80005d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2201      	movs	r2, #1
 80005e2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	193a      	adds	r2, r7, r4
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f977 	bl	80018e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f2:	0021      	movs	r1, r4
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2220      	movs	r2, #32
 80005f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2201      	movs	r2, #1
 80005fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060c:	187a      	adds	r2, r7, r1
 800060e:	2390      	movs	r3, #144	; 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 f963 	bl	80018e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b00b      	add	sp, #44	; 0x2c
 8000620:	bd90      	pop	{r4, r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000
 8000628:	48000800 	.word	0x48000800

0800062c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_MspInit+0x44>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08b      	sub	sp, #44	; 0x2c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2414      	movs	r4, #20
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 f882 	bl	800279c <memset>
  if(hcan->Instance==CAN)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <HAL_CAN_MspInit+0xa4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d13b      	bne.n	800071a <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006a2:	4b21      	ldr	r3, [pc, #132]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006a4:	69da      	ldr	r2, [r3, #28]
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0489      	lsls	r1, r1, #18
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	049b      	lsls	r3, r3, #18
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	0289      	lsls	r1, r1, #10
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_CAN_MspInit+0xa8>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	22c0      	movs	r2, #192	; 0xc0
 80006de:	0152      	lsls	r2, r2, #5
 80006e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2202      	movs	r2, #2
 80006e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2203      	movs	r2, #3
 80006f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2204      	movs	r2, #4
 80006fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	187a      	adds	r2, r7, r1
 80006fe:	2390      	movs	r3, #144	; 0x90
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	0011      	movs	r1, r2
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f8eb 	bl	80018e0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	201e      	movs	r0, #30
 8000710:	f001 f8b4 	bl	800187c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000714:	201e      	movs	r0, #30
 8000716:	f001 f8c6 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b00b      	add	sp, #44	; 0x2c
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	40006400 	.word	0x40006400
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b08f      	sub	sp, #60	; 0x3c
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2424      	movs	r4, #36	; 0x24
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f002 f82c 	bl	800279c <memset>
  if(hspi->Instance==SPI1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a5c      	ldr	r2, [pc, #368]	; (80008bc <HAL_SPI_MspInit+0x190>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d156      	bne.n	80007fc <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074e:	4b5c      	ldr	r3, [pc, #368]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	4b5b      	ldr	r3, [pc, #364]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0149      	lsls	r1, r1, #5
 8000758:	430a      	orrs	r2, r1
 800075a:	619a      	str	r2, [r3, #24]
 800075c:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	015b      	lsls	r3, r3, #5
 8000764:	4013      	ands	r3, r2
 8000766:	623b      	str	r3, [r7, #32]
 8000768:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b55      	ldr	r3, [pc, #340]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800076c:	695a      	ldr	r2, [r3, #20]
 800076e:	4b54      	ldr	r3, [pc, #336]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0289      	lsls	r1, r1, #10
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	4b51      	ldr	r3, [pc, #324]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800077a:	695a      	ldr	r2, [r3, #20]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4013      	ands	r3, r2
 8000782:	61fb      	str	r3, [r7, #28]
 8000784:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b4e      	ldr	r3, [pc, #312]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	4b4d      	ldr	r3, [pc, #308]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	02c9      	lsls	r1, r1, #11
 8000790:	430a      	orrs	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	02db      	lsls	r3, r3, #11
 800079c:	4013      	ands	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	22c0      	movs	r2, #192	; 0xc0
 80007a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2202      	movs	r2, #2
 80007ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2203      	movs	r2, #3
 80007b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	193a      	adds	r2, r7, r4
 80007c2:	2390      	movs	r3, #144	; 0x90
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f889 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007ce:	0021      	movs	r1, r4
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2208      	movs	r2, #8
 80007d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2202      	movs	r2, #2
 80007da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2203      	movs	r2, #3
 80007e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <HAL_SPI_MspInit+0x198>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	0010      	movs	r0, r2
 80007f6:	f001 f873 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007fa:	e05b      	b.n	80008b4 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a31      	ldr	r2, [pc, #196]	; (80008c8 <HAL_SPI_MspInit+0x19c>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d156      	bne.n	80008b4 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000808:	69da      	ldr	r2, [r3, #28]
 800080a:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	01c9      	lsls	r1, r1, #7
 8000810:	430a      	orrs	r2, r1
 8000812:	61da      	str	r2, [r3, #28]
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000816:	69da      	ldr	r2, [r3, #28]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	01db      	lsls	r3, r3, #7
 800081c:	4013      	ands	r3, r2
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	0309      	lsls	r1, r1, #12
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	031b      	lsls	r3, r3, #12
 8000838:	4013      	ands	r3, r2
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_SPI_MspInit+0x194>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	02db      	lsls	r3, r3, #11
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800085a:	2424      	movs	r4, #36	; 0x24
 800085c:	193b      	adds	r3, r7, r4
 800085e:	220c      	movs	r2, #12
 8000860:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2202      	movs	r2, #2
 8000866:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	193b      	adds	r3, r7, r4
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2203      	movs	r2, #3
 8000872:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2201      	movs	r2, #1
 8000878:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087a:	193b      	adds	r3, r7, r4
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <HAL_SPI_MspInit+0x1a0>)
 800087e:	0019      	movs	r1, r3
 8000880:	0010      	movs	r0, r2
 8000882:	f001 f82d 	bl	80018e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2203      	movs	r2, #3
 80008a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2205      	movs	r2, #5
 80008a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_SPI_MspInit+0x198>)
 80008ac:	0019      	movs	r1, r3
 80008ae:	0010      	movs	r0, r2
 80008b0:	f001 f816 	bl	80018e0 <HAL_GPIO_Init>
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b00f      	add	sp, #60	; 0x3c
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	40013000 	.word	0x40013000
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	40003800 	.word	0x40003800
 80008cc:	48000800 	.word	0x48000800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f888 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <CEC_CAN_IRQHandler+0x14>)
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fcf7 	bl	80012fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000028 	.word	0x20000028

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000924:	480d      	ldr	r0, [pc, #52]	; (800095c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000926:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000928:	f7ff fff6 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000952:	f001 feff 	bl	8002754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000956:	f7ff fc83 	bl	8000260 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   r0, =_estack
 800095c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000968:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 800096c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000970:	20000168 	.word	0x20000168

08000974 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_COMP_IRQHandler>
	...

08000978 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_Init+0x24>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_Init+0x24>)
 8000982:	2110      	movs	r1, #16
 8000984:	430a      	orrs	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000988:	2000      	movs	r0, #0
 800098a:	f000 f809 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098e:	f7ff fe53 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	0018      	movs	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40022000 	.word	0x40022000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_InitTick+0x5c>)
 80009aa:	681c      	ldr	r4, [r3, #0]
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x60>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	0019      	movs	r1, r3
 80009b2:	23fa      	movs	r3, #250	; 0xfa
 80009b4:	0098      	lsls	r0, r3, #2
 80009b6:	f7ff fba7 	bl	8000108 <__udivsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	0019      	movs	r1, r3
 80009be:	0020      	movs	r0, r4
 80009c0:	f7ff fba2 	bl	8000108 <__udivsi3>
 80009c4:	0003      	movs	r3, r0
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 ff7d 	bl	80018c6 <HAL_SYSTICK_Config>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e00f      	b.n	80009f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	d80b      	bhi.n	80009f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	2301      	movs	r3, #1
 80009de:	425b      	negs	r3, r3
 80009e0:	2200      	movs	r2, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 ff4a 	bl	800187c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_InitTick+0x64>)
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	0018      	movs	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b003      	add	sp, #12
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	18d2      	adds	r2, r2, r3
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000164 	.word	0x20000164

08000a2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000164 	.word	0x20000164

08000a40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e0f0      	b.n	8000c34 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2220      	movs	r2, #32
 8000a56:	5c9b      	ldrb	r3, [r3, r2]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fe0d 	bl	8000680 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a76:	f7ff ffd9 	bl	8000a2c <HAL_GetTick>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a7e:	e013      	b.n	8000aa8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a80:	f7ff ffd4 	bl	8000a2c <HAL_GetTick>
 8000a84:	0002      	movs	r2, r0
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b0a      	cmp	r3, #10
 8000a8c:	d90c      	bls.n	8000aa8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0292      	lsls	r2, r2, #10
 8000a96:	431a      	orrs	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e0c5      	b.n	8000c34 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	d0e5      	beq.n	8000a80 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2102      	movs	r1, #2
 8000ac0:	438a      	bics	r2, r1
 8000ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac4:	f7ff ffb2 	bl	8000a2c <HAL_GetTick>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000acc:	e013      	b.n	8000af6 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ace:	f7ff ffad 	bl	8000a2c <HAL_GetTick>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d90c      	bls.n	8000af6 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	0292      	lsls	r2, r2, #10
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2220      	movs	r2, #32
 8000aee:	2105      	movs	r1, #5
 8000af0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e09e      	b.n	8000c34 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2202      	movs	r2, #2
 8000afe:	4013      	ands	r3, r2
 8000b00:	d1e5      	bne.n	8000ace <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	7e1b      	ldrb	r3, [r3, #24]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d108      	bne.n	8000b1c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	430a      	orrs	r2, r1
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e007      	b.n	8000b2c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	438a      	bics	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	7e5b      	ldrb	r3, [r3, #25]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d108      	bne.n	8000b46 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	430a      	orrs	r2, r1
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e007      	b.n	8000b56 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	438a      	bics	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7e9b      	ldrb	r3, [r3, #26]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d108      	bne.n	8000b70 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2120      	movs	r1, #32
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e007      	b.n	8000b80 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7edb      	ldrb	r3, [r3, #27]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2110      	movs	r1, #16
 8000b94:	438a      	bics	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7f1b      	ldrb	r3, [r3, #28]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2108      	movs	r1, #8
 8000bd0:	438a      	bics	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7f5b      	ldrb	r3, [r3, #29]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2104      	movs	r1, #4
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	691b      	ldr	r3, [r3, #16]
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	431a      	orrs	r2, r3
 8000c14:	0011      	movs	r1, r2
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2220      	movs	r2, #32
 8000c2e:	2101      	movs	r1, #1
 8000c30:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	0018      	movs	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b004      	add	sp, #16
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c4c:	2013      	movs	r0, #19
 8000c4e:	183b      	adds	r3, r7, r0
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	2120      	movs	r1, #32
 8000c54:	5c52      	ldrb	r2, [r2, r1]
 8000c56:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c58:	0002      	movs	r2, r0
 8000c5a:	18bb      	adds	r3, r7, r2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d004      	beq.n	8000c6c <HAL_CAN_ConfigFilter+0x30>
 8000c62:	18bb      	adds	r3, r7, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d000      	beq.n	8000c6c <HAL_CAN_ConfigFilter+0x30>
 8000c6a:	e0cd      	b.n	8000e08 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	58d3      	ldr	r3, [r2, r3]
 8000c74:	2201      	movs	r2, #1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	0011      	movs	r1, r2
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	221f      	movs	r2, #31
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	2387      	movs	r3, #135	; 0x87
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	58d3      	ldr	r3, [r2, r3]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	0011      	movs	r1, r2
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	2387      	movs	r3, #135	; 0x87
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d129      	bne.n	8000d06 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	2383      	movs	r3, #131	; 0x83
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	58d3      	ldr	r3, [r2, r3]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	2383      	movs	r3, #131	; 0x83
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	041b      	lsls	r3, r3, #16
 8000cd6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cdc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3248      	adds	r2, #72	; 0x48
 8000ce2:	00d2      	lsls	r2, r2, #3
 8000ce4:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	041b      	lsls	r3, r3, #16
 8000cf2:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	3348      	adds	r3, #72	; 0x48
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	18cb      	adds	r3, r1, r3
 8000d02:	3304      	adds	r3, #4
 8000d04:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d128      	bne.n	8000d60 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	2383      	movs	r3, #131	; 0x83
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	58d2      	ldr	r2, [r2, r3]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	697a      	ldr	r2, [r7, #20]
 8000d1e:	2383      	movs	r3, #131	; 0x83
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d36:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3248      	adds	r2, #72	; 0x48
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	041b      	lsls	r3, r3, #16
 8000d4c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d52:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d54:	6979      	ldr	r1, [r7, #20]
 8000d56:	3348      	adds	r3, #72	; 0x48
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	18cb      	adds	r3, r1, r3
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10c      	bne.n	8000d82 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	2381      	movs	r3, #129	; 0x81
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	58d3      	ldr	r3, [r2, r3]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	43d2      	mvns	r2, r2
 8000d74:	401a      	ands	r2, r3
 8000d76:	0011      	movs	r1, r2
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2381      	movs	r3, #129	; 0x81
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	50d1      	str	r1, [r2, r3]
 8000d80:	e00a      	b.n	8000d98 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	2381      	movs	r3, #129	; 0x81
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	58d2      	ldr	r2, [r2, r3]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	0011      	movs	r1, r2
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	2381      	movs	r3, #129	; 0x81
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d10c      	bne.n	8000dba <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2385      	movs	r3, #133	; 0x85
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	58d3      	ldr	r3, [r2, r3]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	43d2      	mvns	r2, r2
 8000dac:	401a      	ands	r2, r3
 8000dae:	0011      	movs	r1, r2
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2385      	movs	r3, #133	; 0x85
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	50d1      	str	r1, [r2, r3]
 8000db8:	e00a      	b.n	8000dd0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	2385      	movs	r3, #133	; 0x85
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	58d2      	ldr	r2, [r2, r3]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	431a      	orrs	r2, r3
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	2385      	movs	r3, #133	; 0x85
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10a      	bne.n	8000dee <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	2387      	movs	r3, #135	; 0x87
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	58d2      	ldr	r2, [r2, r3]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	0011      	movs	r1, r2
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	2387      	movs	r3, #135	; 0x87
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	58d3      	ldr	r3, [r2, r3]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4393      	bics	r3, r2
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	02d2      	lsls	r2, r2, #11
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
  }
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	5c9b      	ldrb	r3, [r3, r2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d12f      	bne.n	8000e94 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2220      	movs	r2, #32
 8000e38:	2102      	movs	r1, #2
 8000e3a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2101      	movs	r1, #1
 8000e48:	438a      	bics	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fdee 	bl	8000a2c <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e54:	e013      	b.n	8000e7e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e56:	f7ff fde9 	bl	8000a2c <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	d90c      	bls.n	8000e7e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	0292      	lsls	r2, r2, #10
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2220      	movs	r2, #32
 8000e76:	2105      	movs	r1, #5
 8000e78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e012      	b.n	8000ea4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	d1e5      	bne.n	8000e56 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	0312      	lsls	r2, r2, #12
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
  }
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eba:	201f      	movs	r0, #31
 8000ebc:	183b      	adds	r3, r7, r0
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	5c52      	ldrb	r2, [r2, r1]
 8000ec4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ece:	183b      	adds	r3, r7, r0
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d004      	beq.n	8000ee0 <HAL_CAN_AddTxMessage+0x34>
 8000ed6:	183b      	adds	r3, r7, r0
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d000      	beq.n	8000ee0 <HAL_CAN_AddTxMessage+0x34>
 8000ede:	e0ab      	b.n	8001038 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	04db      	lsls	r3, r3, #19
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d10a      	bne.n	8000f00 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	051b      	lsls	r3, r3, #20
 8000ef0:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ef2:	d105      	bne.n	8000f00 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	055b      	lsls	r3, r3, #21
 8000efa:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000efc:	d100      	bne.n	8000f00 <HAL_CAN_AddTxMessage+0x54>
 8000efe:	e092      	b.n	8001026 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	2203      	movs	r2, #3
 8000f06:	4013      	ands	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10c      	bne.n	8000f36 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4311      	orrs	r1, r2
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	3218      	adds	r2, #24
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	50d1      	str	r1, [r2, r3]
 8000f34:	e00f      	b.n	8000f56 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f40:	431a      	orrs	r2, r3
 8000f42:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000f4c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	3218      	adds	r2, #24
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3318      	adds	r3, #24
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	18cb      	adds	r3, r1, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	7d1b      	ldrb	r3, [r3, #20]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d112      	bne.n	8000f98 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3318      	adds	r3, #24
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	18d3      	adds	r3, r2, r3
 8000f7e:	3304      	adds	r3, #4
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	2380      	movs	r3, #128	; 0x80
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3318      	adds	r3, #24
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	18cb      	adds	r3, r1, r3
 8000f94:	3304      	adds	r3, #4
 8000f96:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	061a      	lsls	r2, r3, #24
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3305      	adds	r3, #5
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0019      	movs	r1, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	6979      	ldr	r1, [r7, #20]
 8000fc4:	23c6      	movs	r3, #198	; 0xc6
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	0109      	lsls	r1, r1, #4
 8000fca:	1841      	adds	r1, r0, r1
 8000fcc:	18cb      	adds	r3, r1, r3
 8000fce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	061a      	lsls	r2, r3, #24
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3302      	adds	r3, #2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	041b      	lsls	r3, r3, #16
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	6979      	ldr	r1, [r7, #20]
 8000ffa:	23c4      	movs	r3, #196	; 0xc4
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	0109      	lsls	r1, r1, #4
 8001000:	1841      	adds	r1, r0, r1
 8001002:	18cb      	adds	r3, r1, r3
 8001004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	3218      	adds	r2, #24
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	58d2      	ldr	r2, [r2, r3]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2101      	movs	r1, #1
 8001018:	4311      	orrs	r1, r2
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	3218      	adds	r2, #24
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e010      	b.n	8001048 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	0392      	lsls	r2, r2, #14
 800102e:	431a      	orrs	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e007      	b.n	8001048 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	02d2      	lsls	r2, r2, #11
 8001040:	431a      	orrs	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
  }
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b008      	add	sp, #32
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800105e:	2017      	movs	r0, #23
 8001060:	183b      	adds	r3, r7, r0
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	2120      	movs	r1, #32
 8001066:	5c52      	ldrb	r2, [r2, r1]
 8001068:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800106a:	0002      	movs	r2, r0
 800106c:	18bb      	adds	r3, r7, r2
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d004      	beq.n	800107e <HAL_CAN_GetRxMessage+0x2e>
 8001074:	18bb      	adds	r3, r7, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d000      	beq.n	800107e <HAL_CAN_GetRxMessage+0x2e>
 800107c:	e107      	b.n	800128e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10e      	bne.n	80010a2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2203      	movs	r2, #3
 800108c:	4013      	ands	r3, r2
 800108e:	d117      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	2280      	movs	r2, #128	; 0x80
 8001096:	0392      	lsls	r2, r2, #14
 8001098:	431a      	orrs	r2, r3
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0fd      	b.n	800129e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2203      	movs	r2, #3
 80010aa:	4013      	ands	r3, r2
 80010ac:	d108      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	0392      	lsls	r2, r2, #14
 80010b6:	431a      	orrs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0ee      	b.n	800129e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	321b      	adds	r2, #27
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	58d3      	ldr	r3, [r2, r3]
 80010cc:	2204      	movs	r2, #4
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10b      	bne.n	80010f4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	321b      	adds	r2, #27
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	58d3      	ldr	r3, [r2, r3]
 80010e8:	0d5b      	lsrs	r3, r3, #21
 80010ea:	055b      	lsls	r3, r3, #21
 80010ec:	0d5a      	lsrs	r2, r3, #21
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e00a      	b.n	800110a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	321b      	adds	r2, #27
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	58d3      	ldr	r3, [r2, r3]
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	321b      	adds	r2, #27
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	58d3      	ldr	r3, [r2, r3]
 8001116:	2202      	movs	r2, #2
 8001118:	401a      	ands	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	331b      	adds	r3, #27
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2208      	movs	r2, #8
 8001130:	4013      	ands	r3, r2
 8001132:	d003      	beq.n	800113c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2208      	movs	r2, #8
 8001138:	611a      	str	r2, [r3, #16]
 800113a:	e00b      	b.n	8001154 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	331b      	adds	r3, #27
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	220f      	movs	r2, #15
 800114e:	401a      	ands	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	331b      	adds	r3, #27
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	18d3      	adds	r3, r2, r3
 8001160:	3304      	adds	r3, #4
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	401a      	ands	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	331b      	adds	r3, #27
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0c1b      	lsrs	r3, r3, #16
 8001180:	041b      	lsls	r3, r3, #16
 8001182:	0c1a      	lsrs	r2, r3, #16
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	23dc      	movs	r3, #220	; 0xdc
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	188a      	adds	r2, r1, r2
 8001196:	18d3      	adds	r3, r2, r3
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	23dc      	movs	r3, #220	; 0xdc
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	188a      	adds	r2, r1, r2
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0a1a      	lsrs	r2, r3, #8
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	23dc      	movs	r3, #220	; 0xdc
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	188a      	adds	r2, r1, r2
 80011ca:	18d3      	adds	r3, r2, r3
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0c1a      	lsrs	r2, r3, #16
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3302      	adds	r3, #2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6819      	ldr	r1, [r3, #0]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	23dc      	movs	r3, #220	; 0xdc
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	188a      	adds	r2, r1, r2
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	0e1a      	lsrs	r2, r3, #24
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	3303      	adds	r3, #3
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6819      	ldr	r1, [r3, #0]
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	23de      	movs	r3, #222	; 0xde
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	188a      	adds	r2, r1, r2
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6819      	ldr	r1, [r3, #0]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	23de      	movs	r3, #222	; 0xde
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	188a      	adds	r2, r1, r2
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	0a1a      	lsrs	r2, r3, #8
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3305      	adds	r3, #5
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	23de      	movs	r3, #222	; 0xde
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	188a      	adds	r2, r1, r2
 8001238:	18d3      	adds	r3, r2, r3
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1a      	lsrs	r2, r3, #16
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3306      	adds	r3, #6
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6819      	ldr	r1, [r3, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	23de      	movs	r3, #222	; 0xde
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	188a      	adds	r2, r1, r2
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0e1a      	lsrs	r2, r3, #24
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3307      	adds	r3, #7
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2120      	movs	r1, #32
 8001274:	430a      	orrs	r2, r1
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	e007      	b.n	800128a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2120      	movs	r1, #32
 8001286:	430a      	orrs	r2, r1
 8001288:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e007      	b.n	800129e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	02d2      	lsls	r2, r2, #11
 8001296:	431a      	orrs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
  }
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b006      	add	sp, #24
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b0:	200f      	movs	r0, #15
 80012b2:	183b      	adds	r3, r7, r0
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	2120      	movs	r1, #32
 80012b8:	5c52      	ldrb	r2, [r2, r1]
 80012ba:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012bc:	0002      	movs	r2, r0
 80012be:	18bb      	adds	r3, r7, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d003      	beq.n	80012ce <HAL_CAN_ActivateNotification+0x28>
 80012c6:	18bb      	adds	r3, r7, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d109      	bne.n	80012e2 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6959      	ldr	r1, [r3, #20]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e007      	b.n	80012f2 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	02d2      	lsls	r2, r2, #11
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
  }
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b08a      	sub	sp, #40	; 0x28
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2201      	movs	r2, #1
 800133a:	4013      	ands	r3, r2
 800133c:	d100      	bne.n	8001340 <HAL_CAN_IRQHandler+0x46>
 800133e:	e084      	b.n	800144a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2201      	movs	r2, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d024      	beq.n	8001392 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2201      	movs	r2, #1
 800134e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d004      	beq.n	8001362 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f981 	bl	8001662 <HAL_CAN_TxMailbox0CompleteCallback>
 8001360:	e017      	b.n	8001392 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2204      	movs	r2, #4
 8001366:	4013      	ands	r3, r2
 8001368:	d005      	beq.n	8001376 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	4313      	orrs	r3, r2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
 8001374:	e00d      	b.n	8001392 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2208      	movs	r2, #8
 800137a:	4013      	ands	r3, r2
 800137c:	d005      	beq.n	800138a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	0152      	lsls	r2, r2, #5
 8001384:	4313      	orrs	r3, r2
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
 8001388:	e003      	b.n	8001392 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f000 f980 	bl	8001692 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4013      	ands	r3, r2
 800139a:	d028      	beq.n	80013ee <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	0052      	lsls	r2, r2, #1
 80013a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	d004      	beq.n	80013ba <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f95d 	bl	8001672 <HAL_CAN_TxMailbox1CompleteCallback>
 80013b8:	e019      	b.n	80013ee <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	d005      	beq.n	80013d0 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	0192      	lsls	r2, r2, #6
 80013ca:	4313      	orrs	r3, r2
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	e00e      	b.n	80013ee <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	d005      	beq.n	80013e6 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	01d2      	lsls	r2, r2, #7
 80013e0:	4313      	orrs	r3, r2
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
 80013e4:	e003      	b.n	80013ee <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f95a 	bl	80016a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	4013      	ands	r3, r2
 80013f6:	d028      	beq.n	800144a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0252      	lsls	r2, r2, #9
 8001400:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	029b      	lsls	r3, r3, #10
 8001408:	4013      	ands	r3, r2
 800140a:	d004      	beq.n	8001416 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	0018      	movs	r0, r3
 8001410:	f000 f937 	bl	8001682 <HAL_CAN_TxMailbox2CompleteCallback>
 8001414:	e019      	b.n	800144a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	02db      	lsls	r3, r3, #11
 800141c:	4013      	ands	r3, r2
 800141e:	d005      	beq.n	800142c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	0212      	lsls	r2, r2, #8
 8001426:	4313      	orrs	r3, r2
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
 800142a:	e00e      	b.n	800144a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	4013      	ands	r3, r2
 8001434:	d005      	beq.n	8001442 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0252      	lsls	r2, r2, #9
 800143c:	4313      	orrs	r3, r2
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e003      	b.n	800144a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f000 f934 	bl	80016b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	2208      	movs	r2, #8
 800144e:	4013      	ands	r3, r2
 8001450:	d00c      	beq.n	800146c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2210      	movs	r2, #16
 8001456:	4013      	ands	r3, r2
 8001458:	d008      	beq.n	800146c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4313      	orrs	r3, r2
 8001462:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2210      	movs	r2, #16
 800146a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	2204      	movs	r2, #4
 8001470:	4013      	ands	r3, r2
 8001472:	d00b      	beq.n	800148c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	2208      	movs	r2, #8
 8001478:	4013      	ands	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2208      	movs	r2, #8
 8001482:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f91b 	bl	80016c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d009      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2203      	movs	r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7fe febc 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	4013      	ands	r3, r2
 80014ae:	d00c      	beq.n	80014ca <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2210      	movs	r2, #16
 80014b4:	4013      	ands	r3, r2
 80014b6:	d008      	beq.n	80014ca <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	4313      	orrs	r3, r2
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2210      	movs	r2, #16
 80014c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2220      	movs	r2, #32
 80014ce:	4013      	ands	r3, r2
 80014d0:	d00b      	beq.n	80014ea <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2208      	movs	r2, #8
 80014d6:	4013      	ands	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f8fc 	bl	80016e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	2210      	movs	r2, #16
 80014ee:	4013      	ands	r3, r2
 80014f0:	d009      	beq.n	8001506 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2203      	movs	r2, #3
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f8e6 	bl	80016d2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001506:	6a3a      	ldr	r2, [r7, #32]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	029b      	lsls	r3, r3, #10
 800150c:	4013      	ands	r3, r2
 800150e:	d00b      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2210      	movs	r2, #16
 8001514:	4013      	ands	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2210      	movs	r2, #16
 800151e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f8e5 	bl	80016f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001528:	6a3a      	ldr	r2, [r7, #32]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	4013      	ands	r3, r2
 8001530:	d00b      	beq.n	800154a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2208      	movs	r2, #8
 8001536:	4013      	ands	r3, r2
 8001538:	d007      	beq.n	800154a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f000 f8dc 	bl	8001702 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d100      	bne.n	8001556 <HAL_CAN_IRQHandler+0x25c>
 8001554:	e074      	b.n	8001640 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d100      	bne.n	8001560 <HAL_CAN_IRQHandler+0x266>
 800155e:	e06b      	b.n	8001638 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001560:	6a3a      	ldr	r2, [r7, #32]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4013      	ands	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001570:	d003      	beq.n	800157a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	2201      	movs	r2, #1
 8001576:	4313      	orrs	r3, r2
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800157a:	6a3a      	ldr	r2, [r7, #32]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d007      	beq.n	8001594 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800158a:	d003      	beq.n	8001594 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	2202      	movs	r2, #2
 8001590:	4313      	orrs	r3, r2
 8001592:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001594:	6a3a      	ldr	r2, [r7, #32]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	4013      	ands	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015a4:	d003      	beq.n	80015ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	2204      	movs	r2, #4
 80015aa:	4313      	orrs	r3, r2
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ae:	6a3a      	ldr	r2, [r7, #32]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d03f      	beq.n	8001638 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2270      	movs	r2, #112	; 0x70
 80015bc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015be:	d03b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2270      	movs	r2, #112	; 0x70
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b60      	cmp	r3, #96	; 0x60
 80015c8:	d027      	beq.n	800161a <HAL_CAN_IRQHandler+0x320>
 80015ca:	d82c      	bhi.n	8001626 <HAL_CAN_IRQHandler+0x32c>
 80015cc:	2b50      	cmp	r3, #80	; 0x50
 80015ce:	d01f      	beq.n	8001610 <HAL_CAN_IRQHandler+0x316>
 80015d0:	d829      	bhi.n	8001626 <HAL_CAN_IRQHandler+0x32c>
 80015d2:	2b40      	cmp	r3, #64	; 0x40
 80015d4:	d017      	beq.n	8001606 <HAL_CAN_IRQHandler+0x30c>
 80015d6:	d826      	bhi.n	8001626 <HAL_CAN_IRQHandler+0x32c>
 80015d8:	2b30      	cmp	r3, #48	; 0x30
 80015da:	d00f      	beq.n	80015fc <HAL_CAN_IRQHandler+0x302>
 80015dc:	d823      	bhi.n	8001626 <HAL_CAN_IRQHandler+0x32c>
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d002      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x2ee>
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d005      	beq.n	80015f2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015e6:	e01e      	b.n	8001626 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	2208      	movs	r2, #8
 80015ec:	4313      	orrs	r3, r2
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015f0:	e01a      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	2210      	movs	r2, #16
 80015f6:	4313      	orrs	r3, r2
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80015fa:	e015      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	2220      	movs	r2, #32
 8001600:	4313      	orrs	r3, r2
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001604:	e010      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	4313      	orrs	r3, r2
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800160e:	e00b      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	4313      	orrs	r3, r2
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001618:	e006      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	4313      	orrs	r3, r2
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001624:	e000      	b.n	8001628 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001626:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699a      	ldr	r2, [r3, #24]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2170      	movs	r1, #112	; 0x70
 8001634:	438a      	bics	r2, r1
 8001636:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2204      	movs	r2, #4
 800163e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f85c 	bl	8001712 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b00a      	add	sp, #40	; 0x28
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	46bd      	mov	sp, r7
 800169e:	b002      	add	sp, #8
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b002      	add	sp, #8
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b002      	add	sp, #8
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	0002      	movs	r2, r0
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b7f      	cmp	r3, #127	; 0x7f
 8001736:	d809      	bhi.n	800174c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	001a      	movs	r2, r3
 800173e:	231f      	movs	r3, #31
 8001740:	401a      	ands	r2, r3
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_EnableIRQ+0x30>)
 8001744:	2101      	movs	r1, #1
 8001746:	4091      	lsls	r1, r2
 8001748:	000a      	movs	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
  }
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b002      	add	sp, #8
 8001752:	bd80      	pop	{r7, pc}
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	0002      	movs	r2, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b7f      	cmp	r3, #127	; 0x7f
 800176c:	d828      	bhi.n	80017c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <__NVIC_SetPriority+0xd4>)
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b25b      	sxtb	r3, r3
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	33c0      	adds	r3, #192	; 0xc0
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	589b      	ldr	r3, [r3, r2]
 800177e:	1dfa      	adds	r2, r7, #7
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	0011      	movs	r1, r2
 8001784:	2203      	movs	r2, #3
 8001786:	400a      	ands	r2, r1
 8001788:	00d2      	lsls	r2, r2, #3
 800178a:	21ff      	movs	r1, #255	; 0xff
 800178c:	4091      	lsls	r1, r2
 800178e:	000a      	movs	r2, r1
 8001790:	43d2      	mvns	r2, r2
 8001792:	401a      	ands	r2, r3
 8001794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	22ff      	movs	r2, #255	; 0xff
 800179c:	401a      	ands	r2, r3
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	2303      	movs	r3, #3
 80017a6:	4003      	ands	r3, r0
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <__NVIC_SetPriority+0xd4>)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	430a      	orrs	r2, r1
 80017b8:	33c0      	adds	r3, #192	; 0xc0
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017be:	e031      	b.n	8001824 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c0:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <__NVIC_SetPriority+0xd8>)
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0019      	movs	r1, r3
 80017c8:	230f      	movs	r3, #15
 80017ca:	400b      	ands	r3, r1
 80017cc:	3b08      	subs	r3, #8
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3306      	adds	r3, #6
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	18d3      	adds	r3, r2, r3
 80017d6:	3304      	adds	r3, #4
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1dfa      	adds	r2, r7, #7
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	0011      	movs	r1, r2
 80017e0:	2203      	movs	r2, #3
 80017e2:	400a      	ands	r2, r1
 80017e4:	00d2      	lsls	r2, r2, #3
 80017e6:	21ff      	movs	r1, #255	; 0xff
 80017e8:	4091      	lsls	r1, r2
 80017ea:	000a      	movs	r2, r1
 80017ec:	43d2      	mvns	r2, r2
 80017ee:	401a      	ands	r2, r3
 80017f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	019b      	lsls	r3, r3, #6
 80017f6:	22ff      	movs	r2, #255	; 0xff
 80017f8:	401a      	ands	r2, r3
 80017fa:	1dfb      	adds	r3, r7, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	0018      	movs	r0, r3
 8001800:	2303      	movs	r3, #3
 8001802:	4003      	ands	r3, r0
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001808:	4809      	ldr	r0, [pc, #36]	; (8001830 <__NVIC_SetPriority+0xd8>)
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	001c      	movs	r4, r3
 8001810:	230f      	movs	r3, #15
 8001812:	4023      	ands	r3, r4
 8001814:	3b08      	subs	r3, #8
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	430a      	orrs	r2, r1
 800181a:	3306      	adds	r3, #6
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	18c3      	adds	r3, r0, r3
 8001820:	3304      	adds	r3, #4
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b003      	add	sp, #12
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1e5a      	subs	r2, r3, #1
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	045b      	lsls	r3, r3, #17
 8001844:	429a      	cmp	r2, r3
 8001846:	d301      	bcc.n	800184c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001848:	2301      	movs	r3, #1
 800184a:	e010      	b.n	800186e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <SysTick_Config+0x44>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	3a01      	subs	r2, #1
 8001852:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001854:	2301      	movs	r3, #1
 8001856:	425b      	negs	r3, r3
 8001858:	2103      	movs	r1, #3
 800185a:	0018      	movs	r0, r3
 800185c:	f7ff ff7c 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <SysTick_Config+0x44>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001866:	4b04      	ldr	r3, [pc, #16]	; (8001878 <SysTick_Config+0x44>)
 8001868:	2207      	movs	r2, #7
 800186a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	210f      	movs	r1, #15
 8001888:	187b      	adds	r3, r7, r1
 800188a:	1c02      	adds	r2, r0, #0
 800188c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	187b      	adds	r3, r7, r1
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b25b      	sxtb	r3, r3
 8001896:	0011      	movs	r1, r2
 8001898:	0018      	movs	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	0002      	movs	r2, r0
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff ff33 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b002      	add	sp, #8
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff ffaf 	bl	8001834 <SysTick_Config>
 80018d6:	0003      	movs	r3, r0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	e155      	b.n	8001b9c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d100      	bne.n	8001908 <HAL_GPIO_Init+0x28>
 8001906:	e146      	b.n	8001b96 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800191c:	2b02      	cmp	r3, #2
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	409a      	lsls	r2, r3
 800192e:	0013      	movs	r3, r2
 8001930:	43da      	mvns	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	0013      	movs	r3, r2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	2201      	movs	r2, #1
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2203      	movs	r2, #3
 8001988:	4013      	ands	r3, r2
 800198a:	2b03      	cmp	r3, #3
 800198c:	d017      	beq.n	80019be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	409a      	lsls	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	43da      	mvns	r2, r3
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	409a      	lsls	r2, r3
 80019b0:	0013      	movs	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2203      	movs	r2, #3
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d123      	bne.n	8001a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	58d3      	ldr	r3, [r2, r3]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2207      	movs	r2, #7
 80019dc:	4013      	ands	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	43da      	mvns	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2107      	movs	r1, #7
 80019f6:	400b      	ands	r3, r1
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	6939      	ldr	r1, [r7, #16]
 8001a10:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	401a      	ands	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	23c0      	movs	r3, #192	; 0xc0
 8001a4c:	029b      	lsls	r3, r3, #10
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d100      	bne.n	8001a54 <HAL_GPIO_Init+0x174>
 8001a52:	e0a0      	b.n	8001b96 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a54:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <HAL_GPIO_Init+0x2d4>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4013      	ands	r3, r2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x2d8>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	589b      	ldr	r3, [r3, r2]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	2390      	movs	r3, #144	; 0x90
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a47      	ldr	r2, [pc, #284]	; (8001bbc <HAL_GPIO_Init+0x2dc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x1ea>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <HAL_GPIO_Init+0x2e0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x1e6>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a45      	ldr	r2, [pc, #276]	; (8001bc4 <HAL_GPIO_Init+0x2e4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x1e2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a44      	ldr	r2, [pc, #272]	; (8001bc8 <HAL_GPIO_Init+0x2e8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x1de>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001abe:	2305      	movs	r3, #5
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x1f0>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae0:	4935      	ldr	r1, [pc, #212]	; (8001bb8 <HAL_GPIO_Init+0x2d8>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aee:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	035b      	lsls	r3, r3, #13
 8001b06:	4013      	ands	r3, r2
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b18:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43da      	mvns	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	039b      	lsls	r3, r3, #14
 8001b30:	4013      	ands	r3, r2
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	029b      	lsls	r3, r3, #10
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43da      	mvns	r2, r3
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	025b      	lsls	r3, r3, #9
 8001b84:	4013      	ands	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_GPIO_Init+0x2ec>)
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	40da      	lsrs	r2, r3
 8001ba4:	1e13      	subs	r3, r2, #0
 8001ba6:	d000      	beq.n	8001baa <HAL_GPIO_Init+0x2ca>
 8001ba8:	e6a2      	b.n	80018f0 <HAL_GPIO_Init+0x10>
  } 
}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b006      	add	sp, #24
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010000 	.word	0x40010000
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	48000800 	.word	0x48000800
 8001bc4:	48000c00 	.word	0x48000c00
 8001bc8:	48001000 	.word	0x48001000
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	0008      	movs	r0, r1
 8001bda:	0011      	movs	r1, r2
 8001bdc:	1cbb      	adds	r3, r7, #2
 8001bde:	1c02      	adds	r2, r0, #0
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	1c7b      	adds	r3, r7, #1
 8001be4:	1c0a      	adds	r2, r1, #0
 8001be6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be8:	1c7b      	adds	r3, r7, #1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf0:	1cbb      	adds	r3, r7, #2
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bfa:	1cbb      	adds	r3, r7, #2
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	000a      	movs	r2, r1
 8001c14:	1cbb      	adds	r3, r7, #2
 8001c16:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1e:	1cbb      	adds	r3, r7, #2
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4013      	ands	r3, r2
 8001c26:	041a      	lsls	r2, r3, #16
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	1cb9      	adds	r1, r7, #2
 8001c2e:	8809      	ldrh	r1, [r1, #0]
 8001c30:	400b      	ands	r3, r1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b004      	add	sp, #16
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 fb76 	bl	8002340 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <HAL_RCC_OscConfig+0x20>
 8001c5e:	e08e      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c60:	4bc5      	ldr	r3, [pc, #788]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	220c      	movs	r2, #12
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00e      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c6c:	4bc2      	ldr	r3, [pc, #776]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	220c      	movs	r2, #12
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d117      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x68>
 8001c78:	4bbf      	ldr	r3, [pc, #764]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	401a      	ands	r2, r3
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	025b      	lsls	r3, r3, #9
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8a:	4bbb      	ldr	r3, [pc, #748]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	029b      	lsls	r3, r3, #10
 8001c92:	4013      	ands	r3, r2
 8001c94:	d100      	bne.n	8001c98 <HAL_RCC_OscConfig+0x58>
 8001c96:	e071      	b.n	8001d7c <HAL_RCC_OscConfig+0x13c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d000      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x62>
 8001ca0:	e06c      	b.n	8001d7c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f000 fb4c 	bl	8002340 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x80>
 8001cb0:	4bb1      	ldr	r3, [pc, #708]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4bb0      	ldr	r3, [pc, #704]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cb6:	2180      	movs	r1, #128	; 0x80
 8001cb8:	0249      	lsls	r1, r1, #9
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e02f      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xa2>
 8001cc8:	4bab      	ldr	r3, [pc, #684]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4baa      	ldr	r3, [pc, #680]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cce:	49ab      	ldr	r1, [pc, #684]	; (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4ba8      	ldr	r3, [pc, #672]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4ba7      	ldr	r3, [pc, #668]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cda:	49a9      	ldr	r1, [pc, #676]	; (8001f80 <HAL_RCC_OscConfig+0x340>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e01e      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d10e      	bne.n	8001d08 <HAL_RCC_OscConfig+0xc8>
 8001cea:	4ba3      	ldr	r3, [pc, #652]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4ba2      	ldr	r3, [pc, #648]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cf0:	2180      	movs	r1, #128	; 0x80
 8001cf2:	02c9      	lsls	r1, r1, #11
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	4b9f      	ldr	r3, [pc, #636]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b9e      	ldr	r3, [pc, #632]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	0249      	lsls	r1, r1, #9
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0xe0>
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b9a      	ldr	r3, [pc, #616]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d0e:	499b      	ldr	r1, [pc, #620]	; (8001f7c <HAL_RCC_OscConfig+0x33c>)
 8001d10:	400a      	ands	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	4b98      	ldr	r3, [pc, #608]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	4999      	ldr	r1, [pc, #612]	; (8001f80 <HAL_RCC_OscConfig+0x340>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d014      	beq.n	8001d52 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7fe fe80 	bl	8000a2c <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d32:	f7fe fe7b 	bl	8000a2c <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b64      	cmp	r3, #100	; 0x64
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e2fd      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d44:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0xf2>
 8001d50:	e015      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fe6b 	bl	8000a2c <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7fe fe66 	bl	8000a2c <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e2e8      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	4013      	ands	r3, r2
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x11c>
 8001d7a:	e000      	b.n	8001d7e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d100      	bne.n	8001d8a <HAL_RCC_OscConfig+0x14a>
 8001d88:	e06c      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	4013      	ands	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d94:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d11f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1a0>
 8001da0:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	401a      	ands	r2, r3
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d116      	bne.n	8001de0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2202      	movs	r2, #2
 8001db8:	4013      	ands	r3, r2
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x188>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e2bb      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	22f8      	movs	r2, #248	; 0xf8
 8001dce:	4393      	bics	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00da      	lsls	r2, r3, #3
 8001dd8:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	e041      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d024      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de8:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7fe fe1a 	bl	8000a2c <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7fe fe15 	bl	8000a2c <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e297      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0f1      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	22f8      	movs	r2, #248	; 0xf8
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00da      	lsls	r2, r3, #3
 8001e2a:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fdf5 	bl	8000a2c <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7fe fdf0 	bl	8000a2c <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e272      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f1      	bne.n	8001e48 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d036      	beq.n	8001edc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d019      	beq.n	8001eaa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e76:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7fe fdd3 	bl	8000a2c <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fdce 	bl	8000a2c <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e250      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d0f1      	beq.n	8001e8c <HAL_RCC_OscConfig+0x24c>
 8001ea8:	e018      	b.n	8001edc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	438a      	bics	r2, r1
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fdb9 	bl	8000a2c <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fdb4 	bl	8000a2c <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e236      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d1f1      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d100      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2a8>
 8001ee6:	e0b5      	b.n	8002054 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee8:	201f      	movs	r0, #31
 8001eea:	183b      	adds	r3, r7, r0
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d110      	bne.n	8001f1e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0549      	lsls	r1, r1, #21
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f18:	183b      	adds	r3, r7, r0
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	d11a      	bne.n	8001f60 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0049      	lsls	r1, r1, #1
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f38:	f7fe fd78 	bl	8000a2c <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f42:	f7fe fd73 	bl	8000a2c <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b64      	cmp	r3, #100	; 0x64
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1f5      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x344>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10f      	bne.n	8001f88 <HAL_RCC_OscConfig+0x348>
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_RCC_OscConfig+0x338>)
 8001f6e:	2101      	movs	r1, #1
 8001f70:	430a      	orrs	r2, r1
 8001f72:	621a      	str	r2, [r3, #32]
 8001f74:	e036      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	fffeffff 	.word	0xfffeffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	40007000 	.word	0x40007000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x36a>
 8001f90:	4bca      	ldr	r3, [pc, #808]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f92:	6a1a      	ldr	r2, [r3, #32]
 8001f94:	4bc9      	ldr	r3, [pc, #804]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	4bc7      	ldr	r3, [pc, #796]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	4bc6      	ldr	r3, [pc, #792]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	621a      	str	r2, [r3, #32]
 8001fa8:	e01c      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x38c>
 8001fb2:	4bc2      	ldr	r3, [pc, #776]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4bc1      	ldr	r3, [pc, #772]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fb8:	2104      	movs	r1, #4
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	4bbf      	ldr	r3, [pc, #764]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4bbe      	ldr	r3, [pc, #760]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3a4>
 8001fcc:	4bbb      	ldr	r3, [pc, #748]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fce:	6a1a      	ldr	r2, [r3, #32]
 8001fd0:	4bba      	ldr	r3, [pc, #744]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	4bb8      	ldr	r3, [pc, #736]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	4bb7      	ldr	r3, [pc, #732]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8001fde:	2104      	movs	r1, #4
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d014      	beq.n	8002016 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7fe fd1e 	bl	8000a2c <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe fd19 	bl	8000a2c <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4aaf      	ldr	r2, [pc, #700]	; (80022c0 <HAL_RCC_OscConfig+0x680>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e19a      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	4bac      	ldr	r3, [pc, #688]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x3b6>
 8002014:	e013      	b.n	800203e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe fd09 	bl	8000a2c <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201e:	e009      	b.n	8002034 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002020:	f7fe fd04 	bl	8000a2c <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	4aa5      	ldr	r2, [pc, #660]	; (80022c0 <HAL_RCC_OscConfig+0x680>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e185      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	4ba1      	ldr	r3, [pc, #644]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203e:	231f      	movs	r3, #31
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b9c      	ldr	r3, [pc, #624]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800204e:	499d      	ldr	r1, [pc, #628]	; (80022c4 <HAL_RCC_OscConfig+0x684>)
 8002050:	400a      	ands	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2210      	movs	r2, #16
 800205a:	4013      	ands	r3, r2
 800205c:	d063      	beq.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d12a      	bne.n	80020bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002066:	4b95      	ldr	r3, [pc, #596]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800206a:	4b94      	ldr	r3, [pc, #592]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800206c:	2104      	movs	r1, #4
 800206e:	430a      	orrs	r2, r1
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002072:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fcd5 	bl	8000a2c <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002088:	f7fe fcd0 	bl	8000a2c <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e152      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f1      	beq.n	8002088 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a4:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	22f8      	movs	r2, #248	; 0xf8
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	00da      	lsls	r2, r3, #3
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	e034      	b.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	3305      	adds	r3, #5
 80020c2:	d111      	bne.n	80020e8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020c4:	4b7d      	ldr	r3, [pc, #500]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c8:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ca:	2104      	movs	r1, #4
 80020cc:	438a      	bics	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d4:	22f8      	movs	r2, #248	; 0xf8
 80020d6:	4393      	bics	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	00da      	lsls	r2, r3, #3
 80020e0:	4b76      	ldr	r3, [pc, #472]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34
 80020e6:	e01e      	b.n	8002126 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020e8:	4b74      	ldr	r3, [pc, #464]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	430a      	orrs	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020f4:	4b71      	ldr	r3, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	4b70      	ldr	r3, [pc, #448]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fc94 	bl	8000a2c <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800210a:	f7fe fc8f 	bl	8000a2c <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e111      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2220      	movs	r2, #32
 800212c:	4013      	ands	r3, r2
 800212e:	d05c      	beq.n	80021ea <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d00e      	beq.n	800215a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800213c:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	220c      	movs	r2, #12
 8002142:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002144:	2b08      	cmp	r3, #8
 8002146:	d114      	bne.n	8002172 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002148:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	401a      	ands	r2, r3
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	429a      	cmp	r2, r3
 8002158:	d10b      	bne.n	8002172 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	4013      	ands	r3, r2
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_OscConfig+0x5a8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d03c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0e6      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800217a:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0249      	lsls	r1, r1, #9
 8002184:	430a      	orrs	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fc50 	bl	8000a2c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002192:	f7fe fc4b 	bl	8000a2c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0cd      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021a4:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	4013      	ands	r3, r2
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x552>
 80021b0:	e01b      	b.n	80021ea <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021b8:	4943      	ldr	r1, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x688>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fc35 	bl	8000a2c <HAL_GetTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c8:	f7fe fc30 	bl	8000a2c <HAL_GetTick>
 80021cc:	0002      	movs	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0b2      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	4013      	ands	r3, r2
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x588>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d100      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5b4>
 80021f2:	e0a4      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f4:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	220c      	movs	r2, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d100      	bne.n	8002202 <HAL_RCC_OscConfig+0x5c2>
 8002200:	e078      	b.n	80022f4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2b02      	cmp	r3, #2
 8002208:	d14c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002210:	492e      	ldr	r1, [pc, #184]	; (80022cc <HAL_RCC_OscConfig+0x68c>)
 8002212:	400a      	ands	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe fc09 	bl	8000a2c <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fc04 	bl	8000a2c <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e086      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	049b      	lsls	r3, r3, #18
 800223a:	4013      	ands	r3, r2
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	220f      	movs	r2, #15
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	; 0x2c
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <HAL_RCC_OscConfig+0x690>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	431a      	orrs	r2, r3
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0449      	lsls	r1, r1, #17
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fbd7 	bl	8000a2c <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fbd2 	bl	8000a2c <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e054      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	049b      	lsls	r3, r3, #18
 800229e:	4013      	ands	r3, r2
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x644>
 80022a2:	e04c      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_OscConfig+0x67c>)
 80022aa:	4908      	ldr	r1, [pc, #32]	; (80022cc <HAL_RCC_OscConfig+0x68c>)
 80022ac:	400a      	ands	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fbbc 	bl	8000a2c <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x6a6>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40021000 	.word	0x40021000
 80022c0:	00001388 	.word	0x00001388
 80022c4:	efffffff 	.word	0xefffffff
 80022c8:	fffeffff 	.word	0xfffeffff
 80022cc:	feffffff 	.word	0xfeffffff
 80022d0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d4:	f7fe fbaa 	bl	8000a2c <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e02c      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	049b      	lsls	r3, r3, #18
 80022ee:	4013      	ands	r3, r2
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x694>
 80022f2:	e024      	b.n	800233e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e01f      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_RCC_OscConfig+0x708>)
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	23c0      	movs	r3, #192	; 0xc0
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	429a      	cmp	r2, r3
 800231a:	d10e      	bne.n	800233a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	220f      	movs	r2, #15
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d107      	bne.n	800233a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	23f0      	movs	r3, #240	; 0xf0
 800232e:	039b      	lsls	r3, r3, #14
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	b008      	add	sp, #32
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000

0800234c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0bf      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d911      	bls.n	8002392 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b5e      	ldr	r3, [pc, #376]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	4393      	bics	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	4b5b      	ldr	r3, [pc, #364]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d001      	beq.n	8002392 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0a6      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2202      	movs	r2, #2
 8002398:	4013      	ands	r3, r2
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2204      	movs	r2, #4
 80023a2:	4013      	ands	r3, r2
 80023a4:	d006      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023ac:	21e0      	movs	r1, #224	; 0xe0
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	22f0      	movs	r2, #240	; 0xf0
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	d04c      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d120      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800240a:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e062      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b34      	ldr	r3, [pc, #208]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e05b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe faf6 	bl	8000a2c <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe faf1 	bl	8000a2c <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_RCC_ClockConfig+0x1a4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	220c      	movs	r2, #12
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d211      	bcs.n	800249e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x19c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e020      	b.n	80024e0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <HAL_RCC_ClockConfig+0x1a8>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024bc:	f000 f820 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024c0:	0001      	movs	r1, r0
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1a0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	220f      	movs	r2, #15
 80024ca:	4013      	ands	r3, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1ac>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	000a      	movs	r2, r1
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1b0>)
 80024d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fa61 	bl	80009a0 <HAL_InitTick>
  
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	fffff8ff 	.word	0xfffff8ff
 80024f8:	080027c4 	.word	0x080027c4
 80024fc:	20000000 	.word	0x20000000

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	2b0c      	cmp	r3, #12
 8002528:	d046      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>
 800252a:	d848      	bhi.n	80025be <HAL_RCC_GetSysClockFreq+0xbe>
 800252c:	2b04      	cmp	r3, #4
 800252e:	d002      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x36>
 8002530:	2b08      	cmp	r3, #8
 8002532:	d003      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x3c>
 8002534:	e043      	b.n	80025be <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002538:	613b      	str	r3, [r7, #16]
      break;
 800253a:	e043      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	220f      	movs	r2, #15
 8002542:	4013      	ands	r3, r2
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	220f      	movs	r2, #15
 8002550:	4013      	ands	r3, r2
 8002552:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_RCC_GetSysClockFreq+0xdc>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	23c0      	movs	r3, #192	; 0xc0
 800255c:	025b      	lsls	r3, r3, #9
 800255e:	401a      	ands	r2, r3
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	429a      	cmp	r2, r3
 8002566:	d109      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	481a      	ldr	r0, [pc, #104]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800256c:	f7fd fdcc 	bl	8000108 <__udivsi3>
 8002570:	0003      	movs	r3, r0
 8002572:	001a      	movs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4353      	muls	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e01a      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	23c0      	movs	r3, #192	; 0xc0
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	401a      	ands	r2, r3
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	025b      	lsls	r3, r3, #9
 8002588:	429a      	cmp	r2, r3
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4814      	ldr	r0, [pc, #80]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002590:	f7fd fdba 	bl	8000108 <__udivsi3>
 8002594:	0003      	movs	r3, r0
 8002596:	001a      	movs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4353      	muls	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e008      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	480c      	ldr	r0, [pc, #48]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a4:	f7fd fdb0 	bl	8000108 <__udivsi3>
 80025a8:	0003      	movs	r3, r0
 80025aa:	001a      	movs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4353      	muls	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	613b      	str	r3, [r7, #16]
      break;
 80025b6:	e005      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xe0>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e002      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025c0:	613b      	str	r3, [r7, #16]
      break;
 80025c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025c4:	693b      	ldr	r3, [r7, #16]
}
 80025c6:	0018      	movs	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b006      	add	sp, #24
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40021000 	.word	0x40021000
 80025d4:	007a1200 	.word	0x007a1200
 80025d8:	080027d4 	.word	0x080027d4
 80025dc:	080027e4 	.word	0x080027e4
 80025e0:	02dc6c00 	.word	0x02dc6c00

080025e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e0a8      	b.n	8002748 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	2382      	movs	r3, #130	; 0x82
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	429a      	cmp	r2, r3
 8002608:	d009      	beq.n	800261e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
 8002610:	e005      	b.n	800261e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	225d      	movs	r2, #93	; 0x5d
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	225c      	movs	r2, #92	; 0x5c
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f7fe f876 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	225d      	movs	r2, #93	; 0x5d
 8002644:	2102      	movs	r1, #2
 8002646:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2140      	movs	r1, #64	; 0x40
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	23e0      	movs	r3, #224	; 0xe0
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	429a      	cmp	r2, r3
 8002662:	d902      	bls.n	800266a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e002      	b.n	8002670 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	23f0      	movs	r3, #240	; 0xf0
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	429a      	cmp	r2, r3
 800267a:	d008      	beq.n	800268e <HAL_SPI_Init+0xaa>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	23e0      	movs	r3, #224	; 0xe0
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	429a      	cmp	r2, r3
 8002686:	d002      	beq.n	800268e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	2382      	movs	r3, #130	; 0x82
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	401a      	ands	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6899      	ldr	r1, [r3, #8]
 800269c:	2384      	movs	r3, #132	; 0x84
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	400b      	ands	r3, r1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2102      	movs	r1, #2
 80026aa:	400b      	ands	r3, r1
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2101      	movs	r1, #1
 80026b4:	400b      	ands	r3, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6999      	ldr	r1, [r3, #24]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	400b      	ands	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2138      	movs	r1, #56	; 0x38
 80026ca:	400b      	ands	r3, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	400b      	ands	r3, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	0011      	movs	r1, r2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	2204      	movs	r2, #4
 80026f4:	401a      	ands	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2110      	movs	r1, #16
 80026fc:	400b      	ands	r3, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	2108      	movs	r1, #8
 8002706:	400b      	ands	r3, r1
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68d9      	ldr	r1, [r3, #12]
 800270e:	23f0      	movs	r3, #240	; 0xf0
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	400b      	ands	r3, r1
 8002714:	431a      	orrs	r2, r3
 8002716:	0011      	movs	r1, r2
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69da      	ldr	r2, [r3, #28]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4907      	ldr	r1, [pc, #28]	; (8002750 <HAL_SPI_Init+0x16c>)
 8002734:	400a      	ands	r2, r1
 8002736:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	225d      	movs	r2, #93	; 0x5d
 8002742:	2101      	movs	r1, #1
 8002744:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	0018      	movs	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	b004      	add	sp, #16
 800274e:	bd80      	pop	{r7, pc}
 8002750:	fffff7ff 	.word	0xfffff7ff

08002754 <__libc_init_array>:
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	2600      	movs	r6, #0
 8002758:	4d0c      	ldr	r5, [pc, #48]	; (800278c <__libc_init_array+0x38>)
 800275a:	4c0d      	ldr	r4, [pc, #52]	; (8002790 <__libc_init_array+0x3c>)
 800275c:	1b64      	subs	r4, r4, r5
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	42a6      	cmp	r6, r4
 8002762:	d109      	bne.n	8002778 <__libc_init_array+0x24>
 8002764:	2600      	movs	r6, #0
 8002766:	f000 f821 	bl	80027ac <_init>
 800276a:	4d0a      	ldr	r5, [pc, #40]	; (8002794 <__libc_init_array+0x40>)
 800276c:	4c0a      	ldr	r4, [pc, #40]	; (8002798 <__libc_init_array+0x44>)
 800276e:	1b64      	subs	r4, r4, r5
 8002770:	10a4      	asrs	r4, r4, #2
 8002772:	42a6      	cmp	r6, r4
 8002774:	d105      	bne.n	8002782 <__libc_init_array+0x2e>
 8002776:	bd70      	pop	{r4, r5, r6, pc}
 8002778:	00b3      	lsls	r3, r6, #2
 800277a:	58eb      	ldr	r3, [r5, r3]
 800277c:	4798      	blx	r3
 800277e:	3601      	adds	r6, #1
 8002780:	e7ee      	b.n	8002760 <__libc_init_array+0xc>
 8002782:	00b3      	lsls	r3, r6, #2
 8002784:	58eb      	ldr	r3, [r5, r3]
 8002786:	4798      	blx	r3
 8002788:	3601      	adds	r6, #1
 800278a:	e7f2      	b.n	8002772 <__libc_init_array+0x1e>
 800278c:	080027f4 	.word	0x080027f4
 8002790:	080027f4 	.word	0x080027f4
 8002794:	080027f4 	.word	0x080027f4
 8002798:	080027f8 	.word	0x080027f8

0800279c <memset>:
 800279c:	0003      	movs	r3, r0
 800279e:	1882      	adds	r2, r0, r2
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d100      	bne.n	80027a6 <memset+0xa>
 80027a4:	4770      	bx	lr
 80027a6:	7019      	strb	r1, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	e7f9      	b.n	80027a0 <memset+0x4>

080027ac <_init>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr

080027b8 <_fini>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr
