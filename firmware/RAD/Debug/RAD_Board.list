
RAD_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001bc0  08001bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf0  08001bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf0  08001bf0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf0  08001bf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf0  08001bf0  00011bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08001c04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08001c04  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000644a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012c6  00000000  00000000  0002647e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00027748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  00027de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ee  00000000  00000000  000283d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e24  00000000  00000000  000406be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5e1  00000000  00000000  000484e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4ac3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000166c  00000000  00000000  000d4b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ba8 	.word	0x08001ba8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001ba8 	.word	0x08001ba8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb20 	bl	8000868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f812 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8fe 	bl	800042c <MX_GPIO_Init>
  MX_CAN_Init();
 8000230:	f000 f84a 	bl	80002c8 <MX_CAN_Init>
  MX_SPI1_Init();
 8000234:	f000 f87e 	bl	8000334 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000238:	f000 f8ba 	bl	80003b0 <MX_SPI2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800023c:	2390      	movs	r3, #144	; 0x90
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	2120      	movs	r1, #32
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fedf 	bl	8001006 <HAL_GPIO_TogglePin>
    HAL_Delay (100);   /* Insert delay 100 ms */
 8000248:	2064      	movs	r0, #100	; 0x64
 800024a:	f000 fb71 	bl	8000930 <HAL_Delay>
    HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 800024e:	e7f5      	b.n	800023c <main+0x1c>

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b093      	sub	sp, #76	; 0x4c
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	2334      	movs	r3, #52	; 0x34
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f001 fc99 	bl	8001b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	0018      	movs	r0, r3
 800026a:	2310      	movs	r3, #16
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f001 fc92 	bl	8001b98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000274:	193b      	adds	r3, r7, r4
 8000276:	2220      	movs	r2, #32
 8000278:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800027a:	193b      	adds	r3, r7, r4
 800027c:	2201      	movs	r2, #1
 800027e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2200      	movs	r2, #0
 8000284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	193b      	adds	r3, r7, r4
 8000288:	0018      	movs	r0, r3
 800028a:	f000 fed7 	bl	800103c <HAL_RCC_OscConfig>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000292:	f000 f959 	bl	8000548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2207      	movs	r2, #7
 800029a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2203      	movs	r2, #3
 80002a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2101      	movs	r1, #1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fa48 	bl	8001748 <HAL_RCC_ClockConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80002bc:	f000 f944 	bl	8000548 <Error_Handler>
  }
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b013      	add	sp, #76	; 0x4c
 80002c6:	bd90      	pop	{r4, r7, pc}

080002c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_CAN_Init+0x64>)
 80002ce:	4a18      	ldr	r2, [pc, #96]	; (8000330 <MX_CAN_Init+0x68>)
 80002d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <MX_CAN_Init+0x64>)
 80002d4:	2210      	movs	r2, #16
 80002d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_CAN_Init+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002de:	4b13      	ldr	r3, [pc, #76]	; (800032c <MX_CAN_Init+0x64>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_CAN_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <MX_CAN_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <MX_CAN_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <MX_CAN_Init+0x64>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <MX_CAN_Init+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <MX_CAN_Init+0x64>)
 8000304:	2200      	movs	r2, #0
 8000306:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <MX_CAN_Init+0x64>)
 800030a:	2200      	movs	r2, #0
 800030c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <MX_CAN_Init+0x64>)
 8000310:	2200      	movs	r2, #0
 8000312:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <MX_CAN_Init+0x64>)
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fb2e 	bl	8000978 <HAL_CAN_Init>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 f912 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	20000028 	.word	0x20000028
 8000330:	40006400 	.word	0x40006400

08000334 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_SPI1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_SPI1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000340:	2282      	movs	r2, #130	; 0x82
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800034c:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <MX_SPI1_Init+0x74>)
 800034e:	22c0      	movs	r2, #192	; 0xc0
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000362:	2280      	movs	r2, #128	; 0x80
 8000364:	0092      	lsls	r2, r2, #2
 8000366:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_SPI1_Init+0x74>)
 800036a:	2210      	movs	r2, #16
 800036c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000382:	2207      	movs	r2, #7
 8000384:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000388:	2200      	movs	r2, #0
 800038a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_SPI1_Init+0x74>)
 800038e:	2208      	movs	r2, #8
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_SPI1_Init+0x74>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fb23 	bl	80019e0 <HAL_SPI_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f8d3 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000050 	.word	0x20000050
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	; (8000424 <MX_SPI2_Init+0x74>)
 80003b6:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <MX_SPI2_Init+0x78>)
 80003b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <MX_SPI2_Init+0x74>)
 80003bc:	2282      	movs	r2, #130	; 0x82
 80003be:	0052      	lsls	r2, r2, #1
 80003c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <MX_SPI2_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c8:	4b16      	ldr	r3, [pc, #88]	; (8000424 <MX_SPI2_Init+0x74>)
 80003ca:	22c0      	movs	r2, #192	; 0xc0
 80003cc:	0092      	lsls	r2, r2, #2
 80003ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_SPI2_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_SPI2_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_SPI2_Init+0x74>)
 80003de:	2280      	movs	r2, #128	; 0x80
 80003e0:	0092      	lsls	r2, r2, #2
 80003e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_SPI2_Init+0x74>)
 80003e6:	2210      	movs	r2, #16
 80003e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_SPI2_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_SPI2_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_SPI2_Init+0x74>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_SPI2_Init+0x74>)
 80003fe:	2207      	movs	r2, #7
 8000400:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_SPI2_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_SPI2_Init+0x74>)
 800040a:	2208      	movs	r2, #8
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <MX_SPI2_Init+0x74>)
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fae5 	bl	80019e0 <HAL_SPI_Init>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800041a:	f000 f895 	bl	8000548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000b4 	.word	0x200000b4
 8000428:	40003800 	.word	0x40003800

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b08b      	sub	sp, #44	; 0x2c
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	2414      	movs	r4, #20
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2314      	movs	r3, #20
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f001 fbab 	bl	8001b98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b3f      	ldr	r3, [pc, #252]	; (8000540 <MX_GPIO_Init+0x114>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <MX_GPIO_Init+0x114>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0309      	lsls	r1, r1, #12
 800044c:	430a      	orrs	r2, r1
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <MX_GPIO_Init+0x114>)
 8000452:	695a      	ldr	r2, [r3, #20]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	031b      	lsls	r3, r3, #12
 8000458:	4013      	ands	r3, r2
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_GPIO_Init+0x114>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b37      	ldr	r3, [pc, #220]	; (8000540 <MX_GPIO_Init+0x114>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	03c9      	lsls	r1, r1, #15
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b34      	ldr	r3, [pc, #208]	; (8000540 <MX_GPIO_Init+0x114>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	03db      	lsls	r3, r3, #15
 8000474:	4013      	ands	r3, r2
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b31      	ldr	r3, [pc, #196]	; (8000540 <MX_GPIO_Init+0x114>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b30      	ldr	r3, [pc, #192]	; (8000540 <MX_GPIO_Init+0x114>)
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0289      	lsls	r1, r1, #10
 8000484:	430a      	orrs	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	4b2d      	ldr	r3, [pc, #180]	; (8000540 <MX_GPIO_Init+0x114>)
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	029b      	lsls	r3, r3, #10
 8000490:	4013      	ands	r3, r2
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_GPIO_Init+0x114>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_GPIO_Init+0x114>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	02c9      	lsls	r1, r1, #11
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	4b26      	ldr	r3, [pc, #152]	; (8000540 <MX_GPIO_Init+0x114>)
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	02db      	lsls	r3, r3, #11
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2200      	movs	r2, #0
 80004b8:	2120      	movs	r1, #32
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fd86 	bl	8000fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	2280      	movs	r2, #128	; 0x80
 80004c4:	0192      	lsls	r2, r2, #6
 80004c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2284      	movs	r2, #132	; 0x84
 80004cc:	0392      	lsls	r2, r2, #14
 80004ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	4a1a      	ldr	r2, [pc, #104]	; (8000544 <MX_GPIO_Init+0x118>)
 80004da:	0019      	movs	r1, r3
 80004dc:	0010      	movs	r0, r2
 80004de:	f000 fbfd 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	220c      	movs	r2, #12
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2202      	movs	r2, #2
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	193a      	adds	r2, r7, r4
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	0011      	movs	r1, r2
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fbe7 	bl	8000cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800050e:	0021      	movs	r1, r4
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2220      	movs	r2, #32
 8000514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2201      	movs	r2, #1
 800051a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000528:	187a      	adds	r2, r7, r1
 800052a:	2390      	movs	r3, #144	; 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	0011      	movs	r1, r2
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fbd3 	bl	8000cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b00b      	add	sp, #44	; 0x2c
 800053c:	bd90      	pop	{r4, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	40021000 	.word	0x40021000
 8000544:	48000800 	.word	0x48000800

08000548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054c:	b672      	cpsid	i
}
 800054e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000550:	e7fe      	b.n	8000550 <Error_Handler+0x8>
	...

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x44>)
 800055c:	699a      	ldr	r2, [r3, #24]
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_MspInit+0x44>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	619a      	str	r2, [r3, #24]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x44>)
 8000574:	69da      	ldr	r2, [r3, #28]
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_MspInit+0x44>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0549      	lsls	r1, r1, #21
 800057c:	430a      	orrs	r2, r1
 800057e:	61da      	str	r2, [r3, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_MspInit+0x44>)
 8000582:	69da      	ldr	r2, [r3, #28]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	055b      	lsls	r3, r3, #21
 8000588:	4013      	ands	r3, r2
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b08b      	sub	sp, #44	; 0x2c
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	2414      	movs	r4, #20
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0018      	movs	r0, r3
 80005aa:	2314      	movs	r3, #20
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f001 faf2 	bl	8001b98 <memset>
  if(hcan->Instance==CAN)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <HAL_CAN_MspInit+0x94>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d133      	bne.n	8000626 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0489      	lsls	r1, r1, #18
 80005c8:	430a      	orrs	r2, r1
 80005ca:	61da      	str	r2, [r3, #28]
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005ce:	69da      	ldr	r2, [r3, #28]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	049b      	lsls	r3, r3, #18
 80005d4:	4013      	ands	r3, r2
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005e0:	2180      	movs	r1, #128	; 0x80
 80005e2:	0289      	lsls	r1, r1, #10
 80005e4:	430a      	orrs	r2, r1
 80005e6:	615a      	str	r2, [r3, #20]
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_CAN_MspInit+0x98>)
 80005ea:	695a      	ldr	r2, [r3, #20]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	029b      	lsls	r3, r3, #10
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	22c0      	movs	r2, #192	; 0xc0
 80005fa:	0152      	lsls	r2, r2, #5
 80005fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	0021      	movs	r1, r4
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2202      	movs	r2, #2
 8000604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2203      	movs	r2, #3
 8000610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2204      	movs	r2, #4
 8000616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	187a      	adds	r2, r7, r1
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	0011      	movs	r1, r2
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fb5b 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b00b      	add	sp, #44	; 0x2c
 800062c:	bd90      	pop	{r4, r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40006400 	.word	0x40006400
 8000634:	40021000 	.word	0x40021000

08000638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08f      	sub	sp, #60	; 0x3c
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	2424      	movs	r4, #36	; 0x24
 8000642:	193b      	adds	r3, r7, r4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f001 faa4 	bl	8001b98 <memset>
  if(hspi->Instance==SPI1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a5c      	ldr	r2, [pc, #368]	; (80007c8 <HAL_SPI_MspInit+0x190>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d156      	bne.n	8000708 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800065a:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	4b5b      	ldr	r3, [pc, #364]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	0149      	lsls	r1, r1, #5
 8000664:	430a      	orrs	r2, r1
 8000666:	619a      	str	r2, [r3, #24]
 8000668:	4b58      	ldr	r3, [pc, #352]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800066a:	699a      	ldr	r2, [r3, #24]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	015b      	lsls	r3, r3, #5
 8000670:	4013      	ands	r3, r2
 8000672:	623b      	str	r3, [r7, #32]
 8000674:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b55      	ldr	r3, [pc, #340]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b54      	ldr	r3, [pc, #336]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b51      	ldr	r3, [pc, #324]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b4e      	ldr	r3, [pc, #312]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	02c9      	lsls	r1, r1, #11
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <HAL_SPI_MspInit+0x194>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	02db      	lsls	r3, r3, #11
 80006a8:	4013      	ands	r3, r2
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	22c0      	movs	r2, #192	; 0xc0
 80006b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2202      	movs	r2, #2
 80006b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2203      	movs	r2, #3
 80006c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	193a      	adds	r2, r7, r4
 80006ce:	2390      	movs	r3, #144	; 0x90
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fb01 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2208      	movs	r2, #8
 80006e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2203      	movs	r2, #3
 80006f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	4a34      	ldr	r2, [pc, #208]	; (80007d0 <HAL_SPI_MspInit+0x198>)
 80006fe:	0019      	movs	r1, r3
 8000700:	0010      	movs	r0, r2
 8000702:	f000 faeb 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000706:	e05b      	b.n	80007c0 <HAL_SPI_MspInit+0x188>
  else if(hspi->Instance==SPI2)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <HAL_SPI_MspInit+0x19c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d156      	bne.n	80007c0 <HAL_SPI_MspInit+0x188>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	01c9      	lsls	r1, r1, #7
 800071c:	430a      	orrs	r2, r1
 800071e:	61da      	str	r2, [r3, #28]
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000722:	69da      	ldr	r2, [r3, #28]
 8000724:	2380      	movs	r3, #128	; 0x80
 8000726:	01db      	lsls	r3, r3, #7
 8000728:	4013      	ands	r3, r2
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0309      	lsls	r1, r1, #12
 8000738:	430a      	orrs	r2, r1
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	031b      	lsls	r3, r3, #12
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800074c:	695a      	ldr	r2, [r3, #20]
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <HAL_SPI_MspInit+0x194>)
 8000750:	2180      	movs	r1, #128	; 0x80
 8000752:	02c9      	lsls	r1, r1, #11
 8000754:	430a      	orrs	r2, r1
 8000756:	615a      	str	r2, [r3, #20]
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_SPI_MspInit+0x194>)
 800075a:	695a      	ldr	r2, [r3, #20]
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	02db      	lsls	r3, r3, #11
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000766:	2424      	movs	r4, #36	; 0x24
 8000768:	193b      	adds	r3, r7, r4
 800076a:	220c      	movs	r2, #12
 800076c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2202      	movs	r2, #2
 8000772:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2203      	movs	r2, #3
 800077e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2201      	movs	r2, #1
 8000784:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	193b      	adds	r3, r7, r4
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_SPI_MspInit+0x1a0>)
 800078a:	0019      	movs	r1, r3
 800078c:	0010      	movs	r0, r2
 800078e:	f000 faa5 	bl	8000cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000792:	0021      	movs	r1, r4
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	00d2      	lsls	r2, r2, #3
 800079a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2202      	movs	r2, #2
 80007a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2203      	movs	r2, #3
 80007ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2205      	movs	r2, #5
 80007b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_SPI_MspInit+0x198>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	0010      	movs	r0, r2
 80007bc:	f000 fa8e 	bl	8000cdc <HAL_GPIO_Init>
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b00f      	add	sp, #60	; 0x3c
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	40013000 	.word	0x40013000
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400
 80007d4:	40003800 	.word	0x40003800
 80007d8:	48000800 	.word	0x48000800

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f87a 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f7ff fff7 	bl	800080a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f001 f985 	bl	8001b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fceb 	bl	8000220 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000858:	08001bf8 	.word	0x08001bf8
  ldr r2, =_sbss
 800085c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000860:	2000011c 	.word	0x2000011c

08000864 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_COMP_IRQHandler>
	...

08000868 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <HAL_Init+0x24>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_Init+0x24>)
 8000872:	2110      	movs	r1, #16
 8000874:	430a      	orrs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f809 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800087e:	f7ff fe69 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	0018      	movs	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_InitTick+0x5c>)
 800089a:	681c      	ldr	r4, [r3, #0]
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_InitTick+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	23fa      	movs	r3, #250	; 0xfa
 80008a4:	0098      	lsls	r0, r3, #2
 80008a6:	f7ff fc2f 	bl	8000108 <__udivsi3>
 80008aa:	0003      	movs	r3, r0
 80008ac:	0019      	movs	r1, r3
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff fc2a 	bl	8000108 <__udivsi3>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa03 	bl	8000cc2 <HAL_SYSTICK_Config>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e00f      	b.n	80008e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d80b      	bhi.n	80008e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 f9e0 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_InitTick+0x64>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b003      	add	sp, #12
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	18d2      	adds	r2, r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	20000008 	.word	0x20000008
 8000918:	20000118 	.word	0x20000118

0800091c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	20000118 	.word	0x20000118

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	0003      	movs	r3, r0
 800093e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3301      	adds	r3, #1
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001a      	movs	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	189b      	adds	r3, r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	0002      	movs	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b004      	add	sp, #16
 8000970:	bd80      	pop	{r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d101      	bne.n	800098a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e0f0      	b.n	8000b6c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2220      	movs	r2, #32
 800098e:	5c9b      	ldrb	r3, [r3, r2]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fdff 	bl	800059c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ae:	f7ff ffb5 	bl	800091c <HAL_GetTick>
 80009b2:	0003      	movs	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009b6:	e013      	b.n	80009e0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009b8:	f7ff ffb0 	bl	800091c <HAL_GetTick>
 80009bc:	0002      	movs	r2, r0
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	2b0a      	cmp	r3, #10
 80009c4:	d90c      	bls.n	80009e0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0292      	lsls	r2, r2, #10
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2220      	movs	r2, #32
 80009d8:	2105      	movs	r1, #5
 80009da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e0c5      	b.n	8000b6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4013      	ands	r3, r2
 80009ea:	d0e5      	beq.n	80009b8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2102      	movs	r1, #2
 80009f8:	438a      	bics	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009fc:	f7ff ff8e 	bl	800091c <HAL_GetTick>
 8000a00:	0003      	movs	r3, r0
 8000a02:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a04:	e013      	b.n	8000a2e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a06:	f7ff ff89 	bl	800091c <HAL_GetTick>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b0a      	cmp	r3, #10
 8000a12:	d90c      	bls.n	8000a2e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	0292      	lsls	r2, r2, #10
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2220      	movs	r2, #32
 8000a26:	2105      	movs	r1, #5
 8000a28:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e09e      	b.n	8000b6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2202      	movs	r2, #2
 8000a36:	4013      	ands	r3, r2
 8000a38:	d1e5      	bne.n	8000a06 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7e1b      	ldrb	r3, [r3, #24]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d108      	bne.n	8000a54 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	e007      	b.n	8000a64 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	438a      	bics	r2, r1
 8000a62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7e5b      	ldrb	r3, [r3, #25]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d108      	bne.n	8000a7e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2140      	movs	r1, #64	; 0x40
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e007      	b.n	8000a8e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	438a      	bics	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7e9b      	ldrb	r3, [r3, #26]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d108      	bne.n	8000aa8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2120      	movs	r1, #32
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	e007      	b.n	8000ab8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	438a      	bics	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7edb      	ldrb	r3, [r3, #27]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d108      	bne.n	8000ad2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2110      	movs	r1, #16
 8000acc:	438a      	bics	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2110      	movs	r1, #16
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7f1b      	ldrb	r3, [r3, #28]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d108      	bne.n	8000afc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2108      	movs	r1, #8
 8000af6:	430a      	orrs	r2, r1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e007      	b.n	8000b0c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2108      	movs	r1, #8
 8000b08:	438a      	bics	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7f5b      	ldrb	r3, [r3, #29]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d108      	bne.n	8000b26 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2104      	movs	r1, #4
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	e007      	b.n	8000b36 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2104      	movs	r1, #4
 8000b32:	438a      	bics	r2, r1
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2220      	movs	r2, #32
 8000b66:	2101      	movs	r1, #1
 8000b68:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	b004      	add	sp, #16
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b7f      	cmp	r3, #127	; 0x7f
 8000b88:	d828      	bhi.n	8000bdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	33c0      	adds	r3, #192	; 0xc0
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	589b      	ldr	r3, [r3, r2]
 8000b9a:	1dfa      	adds	r2, r7, #7
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	21ff      	movs	r1, #255	; 0xff
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	000a      	movs	r2, r1
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	401a      	ands	r2, r3
 8000bb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	019b      	lsls	r3, r3, #6
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	401a      	ands	r2, r3
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4003      	ands	r3, r0
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc8:	481f      	ldr	r0, [pc, #124]	; (8000c48 <__NVIC_SetPriority+0xd4>)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	33c0      	adds	r3, #192	; 0xc0
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bda:	e031      	b.n	8000c40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	0019      	movs	r1, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	400b      	ands	r3, r1
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	3306      	adds	r3, #6
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	400a      	ands	r2, r1
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	21ff      	movs	r1, #255	; 0xff
 8000c04:	4091      	lsls	r1, r2
 8000c06:	000a      	movs	r2, r1
 8000c08:	43d2      	mvns	r2, r2
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	019b      	lsls	r3, r3, #6
 8000c12:	22ff      	movs	r2, #255	; 0xff
 8000c14:	401a      	ands	r2, r3
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	4003      	ands	r3, r0
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	4023      	ands	r3, r4
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	430a      	orrs	r2, r1
 8000c36:	3306      	adds	r3, #6
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	18c3      	adds	r3, r0, r3
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b003      	add	sp, #12
 8000c46:	bd90      	pop	{r4, r7, pc}
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	1e5a      	subs	r2, r3, #1
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	045b      	lsls	r3, r3, #17
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d301      	bcc.n	8000c68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c64:	2301      	movs	r3, #1
 8000c66:	e010      	b.n	8000c8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <SysTick_Config+0x44>)
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
 8000c74:	2103      	movs	r1, #3
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff ff7c 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x44>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x44>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	1c02      	adds	r2, r0, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	0011      	movs	r1, r2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff5d 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ffbf 	bl	8000c50 <SysTick_Config>
 8000cd2:	0003      	movs	r3, r0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e155      	b.n	8000f98 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <HAL_GPIO_Init+0x28>
 8000d02:	e146      	b.n	8000f92 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d005      	beq.n	8000d1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2203      	movs	r2, #3
 8000d16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d130      	bne.n	8000d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2203      	movs	r2, #3
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d52:	2201      	movs	r2, #1
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	2201      	movs	r2, #1
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2203      	movs	r2, #3
 8000d84:	4013      	ands	r3, r2
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d017      	beq.n	8000dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	2203      	movs	r2, #3
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d123      	bne.n	8000e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	0092      	lsls	r2, r2, #2
 8000dd0:	58d3      	ldr	r3, [r2, r3]
 8000dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	4013      	ands	r3, r2
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	220f      	movs	r2, #15
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2107      	movs	r1, #7
 8000df2:	400b      	ands	r3, r1
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	0092      	lsls	r2, r2, #2
 8000e0a:	6939      	ldr	r1, [r7, #16]
 8000e0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	23c0      	movs	r3, #192	; 0xc0
 8000e48:	029b      	lsls	r3, r3, #10
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_GPIO_Init+0x174>
 8000e4e:	e0a0      	b.n	8000f92 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <HAL_GPIO_Init+0x2d4>)
 8000e52:	699a      	ldr	r2, [r3, #24]
 8000e54:	4b56      	ldr	r3, [pc, #344]	; (8000fb0 <HAL_GPIO_Init+0x2d4>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <HAL_GPIO_Init+0x2d4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4013      	ands	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e68:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x2d8>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	589b      	ldr	r3, [r3, r2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	220f      	movs	r2, #15
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	2390      	movs	r3, #144	; 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x1ee>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <HAL_GPIO_Init+0x2dc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x1ea>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a46      	ldr	r2, [pc, #280]	; (8000fbc <HAL_GPIO_Init+0x2e0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x1e6>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_GPIO_Init+0x2e4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x1e2>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a44      	ldr	r2, [pc, #272]	; (8000fc4 <HAL_GPIO_Init+0x2e8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x1de>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x1f0>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	2103      	movs	r1, #3
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x2d8>)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	035b      	lsls	r3, r3, #13
 8000f02:	4013      	ands	r3, r2
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	039b      	lsls	r3, r3, #14
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f38:	4b23      	ldr	r3, [pc, #140]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	029b      	lsls	r3, r3, #10
 8000f56:	4013      	ands	r3, r2
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000f68:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43da      	mvns	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	025b      	lsls	r3, r3, #9
 8000f80:	4013      	ands	r3, r2
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_GPIO_Init+0x2ec>)
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	40da      	lsrs	r2, r3
 8000fa0:	1e13      	subs	r3, r2, #0
 8000fa2:	d000      	beq.n	8000fa6 <HAL_GPIO_Init+0x2ca>
 8000fa4:	e6a2      	b.n	8000cec <HAL_GPIO_Init+0x10>
  } 
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b006      	add	sp, #24
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010000 	.word	0x40010000
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000c00 	.word	0x48000c00
 8000fc4:	48001000 	.word	0x48001000
 8000fc8:	40010400 	.word	0x40010400

08000fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	0011      	movs	r1, r2
 8000fd8:	1cbb      	adds	r3, r7, #2
 8000fda:	1c02      	adds	r2, r0, #0
 8000fdc:	801a      	strh	r2, [r3, #0]
 8000fde:	1c7b      	adds	r3, r7, #1
 8000fe0:	1c0a      	adds	r2, r1, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe4:	1c7b      	adds	r3, r7, #1
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fec:	1cbb      	adds	r3, r7, #2
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff6:	1cbb      	adds	r3, r7, #2
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	000a      	movs	r2, r1
 8001010:	1cbb      	adds	r3, r7, #2
 8001012:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800101a:	1cbb      	adds	r3, r7, #2
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4013      	ands	r3, r2
 8001022:	041a      	lsls	r2, r3, #16
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	1cb9      	adds	r1, r7, #2
 800102a:	8809      	ldrh	r1, [r1, #0]
 800102c:	400b      	ands	r3, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	f000 fb76 	bl	800173c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2201      	movs	r2, #1
 8001056:	4013      	ands	r3, r2
 8001058:	d100      	bne.n	800105c <HAL_RCC_OscConfig+0x20>
 800105a:	e08e      	b.n	800117a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800105c:	4bc5      	ldr	r3, [pc, #788]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	220c      	movs	r2, #12
 8001062:	4013      	ands	r3, r2
 8001064:	2b04      	cmp	r3, #4
 8001066:	d00e      	beq.n	8001086 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001068:	4bc2      	ldr	r3, [pc, #776]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	220c      	movs	r2, #12
 800106e:	4013      	ands	r3, r2
 8001070:	2b08      	cmp	r3, #8
 8001072:	d117      	bne.n	80010a4 <HAL_RCC_OscConfig+0x68>
 8001074:	4bbf      	ldr	r3, [pc, #764]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	401a      	ands	r2, r3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	025b      	lsls	r3, r3, #9
 8001082:	429a      	cmp	r2, r3
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001086:	4bbb      	ldr	r3, [pc, #748]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	029b      	lsls	r3, r3, #10
 800108e:	4013      	ands	r3, r2
 8001090:	d100      	bne.n	8001094 <HAL_RCC_OscConfig+0x58>
 8001092:	e071      	b.n	8001178 <HAL_RCC_OscConfig+0x13c>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d000      	beq.n	800109e <HAL_RCC_OscConfig+0x62>
 800109c:	e06c      	b.n	8001178 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	f000 fb4c 	bl	800173c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d107      	bne.n	80010bc <HAL_RCC_OscConfig+0x80>
 80010ac:	4bb1      	ldr	r3, [pc, #708]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4bb0      	ldr	r3, [pc, #704]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0249      	lsls	r1, r1, #9
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e02f      	b.n	800111c <HAL_RCC_OscConfig+0xe0>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0xa2>
 80010c4:	4bab      	ldr	r3, [pc, #684]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4baa      	ldr	r3, [pc, #680]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010ca:	49ab      	ldr	r1, [pc, #684]	; (8001378 <HAL_RCC_OscConfig+0x33c>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	4ba8      	ldr	r3, [pc, #672]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4ba7      	ldr	r3, [pc, #668]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010d6:	49a9      	ldr	r1, [pc, #676]	; (800137c <HAL_RCC_OscConfig+0x340>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e01e      	b.n	800111c <HAL_RCC_OscConfig+0xe0>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	d10e      	bne.n	8001104 <HAL_RCC_OscConfig+0xc8>
 80010e6:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4ba2      	ldr	r3, [pc, #648]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	02c9      	lsls	r1, r1, #11
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	4b9f      	ldr	r3, [pc, #636]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80010fa:	2180      	movs	r1, #128	; 0x80
 80010fc:	0249      	lsls	r1, r1, #9
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xe0>
 8001104:	4b9b      	ldr	r3, [pc, #620]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b9a      	ldr	r3, [pc, #616]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800110a:	499b      	ldr	r1, [pc, #620]	; (8001378 <HAL_RCC_OscConfig+0x33c>)
 800110c:	400a      	ands	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	4b98      	ldr	r3, [pc, #608]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b97      	ldr	r3, [pc, #604]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001116:	4999      	ldr	r1, [pc, #612]	; (800137c <HAL_RCC_OscConfig+0x340>)
 8001118:	400a      	ands	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d014      	beq.n	800114e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fbfa 	bl	800091c <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112e:	f7ff fbf5 	bl	800091c <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b64      	cmp	r3, #100	; 0x64
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e2fd      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	4b8c      	ldr	r3, [pc, #560]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	029b      	lsls	r3, r3, #10
 8001148:	4013      	ands	r3, r2
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0xf2>
 800114c:	e015      	b.n	800117a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff fbe5 	bl	800091c <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fbe0 	bl	800091c <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e2e8      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b82      	ldr	r3, [pc, #520]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x11c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x14a>
 8001184:	e06c      	b.n	8001260 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001186:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	220c      	movs	r2, #12
 800118c:	4013      	ands	r3, r2
 800118e:	d00e      	beq.n	80011ae <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001190:	4b78      	ldr	r3, [pc, #480]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	220c      	movs	r2, #12
 8001196:	4013      	ands	r3, r2
 8001198:	2b08      	cmp	r3, #8
 800119a:	d11f      	bne.n	80011dc <HAL_RCC_OscConfig+0x1a0>
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	23c0      	movs	r3, #192	; 0xc0
 80011a2:	025b      	lsls	r3, r3, #9
 80011a4:	401a      	ands	r2, r3
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b71      	ldr	r3, [pc, #452]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	4013      	ands	r3, r2
 80011b6:	d005      	beq.n	80011c4 <HAL_RCC_OscConfig+0x188>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d001      	beq.n	80011c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e2bb      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c4:	4b6b      	ldr	r3, [pc, #428]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	22f8      	movs	r2, #248	; 0xf8
 80011ca:	4393      	bics	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	00da      	lsls	r2, r3, #3
 80011d4:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80011d6:	430a      	orrs	r2, r1
 80011d8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e041      	b.n	8001260 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d024      	beq.n	800122e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b63      	ldr	r3, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb94 	bl	800091c <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb8f 	bl	800091c <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e297      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b59      	ldr	r3, [pc, #356]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2202      	movs	r2, #2
 8001212:	4013      	ands	r3, r2
 8001214:	d0f1      	beq.n	80011fa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	22f8      	movs	r2, #248	; 0xf8
 800121c:	4393      	bics	r3, r2
 800121e:	0019      	movs	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	00da      	lsls	r2, r3, #3
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b51      	ldr	r3, [pc, #324]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001234:	2101      	movs	r1, #1
 8001236:	438a      	bics	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fb6f 	bl	800091c <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fb6a 	bl	800091c <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e272      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d1f1      	bne.n	8001244 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2208      	movs	r2, #8
 8001266:	4013      	ands	r3, r2
 8001268:	d036      	beq.n	80012d8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d019      	beq.n	80012a6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b40      	ldr	r3, [pc, #256]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff fb4d 	bl	800091c <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff fb48 	bl	800091c <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e250      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d0f1      	beq.n	8001288 <HAL_RCC_OscConfig+0x24c>
 80012a4:	e018      	b.n	80012d8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a6:	4b33      	ldr	r3, [pc, #204]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012ac:	2101      	movs	r1, #1
 80012ae:	438a      	bics	r2, r1
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb33 	bl	800091c <HAL_GetTick>
 80012b6:	0003      	movs	r3, r0
 80012b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012bc:	f7ff fb2e 	bl	800091c <HAL_GetTick>
 80012c0:	0002      	movs	r2, r0
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e236      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ce:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d1f1      	bne.n	80012bc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2204      	movs	r2, #4
 80012de:	4013      	ands	r3, r2
 80012e0:	d100      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2a8>
 80012e2:	e0b5      	b.n	8001450 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e4:	201f      	movs	r0, #31
 80012e6:	183b      	adds	r3, r7, r0
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012ee:	69da      	ldr	r2, [r3, #28]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	055b      	lsls	r3, r3, #21
 80012f4:	4013      	ands	r3, r2
 80012f6:	d110      	bne.n	800131a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012fa:	69da      	ldr	r2, [r3, #28]
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0549      	lsls	r1, r1, #21
 8001302:	430a      	orrs	r2, r1
 8001304:	61da      	str	r2, [r3, #28]
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001314:	183b      	adds	r3, r7, r0
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_OscConfig+0x344>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4013      	ands	r3, r2
 8001324:	d11a      	bne.n	800135c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_RCC_OscConfig+0x344>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_RCC_OscConfig+0x344>)
 800132c:	2180      	movs	r1, #128	; 0x80
 800132e:	0049      	lsls	r1, r1, #1
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001334:	f7ff faf2 	bl	800091c <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff faed 	bl	800091c <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b64      	cmp	r3, #100	; 0x64
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e1f5      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x344>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4013      	ands	r3, r2
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10f      	bne.n	8001384 <HAL_RCC_OscConfig+0x348>
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4b02      	ldr	r3, [pc, #8]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 800136a:	2101      	movs	r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e036      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a4>
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40021000 	.word	0x40021000
 8001378:	fffeffff 	.word	0xfffeffff
 800137c:	fffbffff 	.word	0xfffbffff
 8001380:	40007000 	.word	0x40007000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x36a>
 800138c:	4bca      	ldr	r3, [pc, #808]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	4bc9      	ldr	r3, [pc, #804]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	621a      	str	r2, [r3, #32]
 8001398:	4bc7      	ldr	r3, [pc, #796]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	4bc6      	ldr	r3, [pc, #792]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800139e:	2104      	movs	r1, #4
 80013a0:	438a      	bics	r2, r1
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a4>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d10c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x38c>
 80013ae:	4bc2      	ldr	r3, [pc, #776]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	4bc1      	ldr	r3, [pc, #772]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013b4:	2104      	movs	r1, #4
 80013b6:	430a      	orrs	r2, r1
 80013b8:	621a      	str	r2, [r3, #32]
 80013ba:	4bbf      	ldr	r3, [pc, #764]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013bc:	6a1a      	ldr	r2, [r3, #32]
 80013be:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	621a      	str	r2, [r3, #32]
 80013c6:	e00b      	b.n	80013e0 <HAL_RCC_OscConfig+0x3a4>
 80013c8:	4bbb      	ldr	r3, [pc, #748]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4bba      	ldr	r3, [pc, #744]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	4bb8      	ldr	r3, [pc, #736]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4bb7      	ldr	r3, [pc, #732]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d014      	beq.n	8001412 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fa98 	bl	800091c <HAL_GetTick>
 80013ec:	0003      	movs	r3, r0
 80013ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e009      	b.n	8001406 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fa93 	bl	800091c <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4aaf      	ldr	r2, [pc, #700]	; (80016bc <HAL_RCC_OscConfig+0x680>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e19a      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001406:	4bac      	ldr	r3, [pc, #688]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3b6>
 8001410:	e013      	b.n	800143a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fa83 	bl	800091c <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141a:	e009      	b.n	8001430 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141c:	f7ff fa7e 	bl	800091c <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	4aa5      	ldr	r2, [pc, #660]	; (80016bc <HAL_RCC_OscConfig+0x680>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e185      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4ba1      	ldr	r3, [pc, #644]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	2202      	movs	r2, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800143a:	231f      	movs	r3, #31
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001444:	4b9c      	ldr	r3, [pc, #624]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	4b9b      	ldr	r3, [pc, #620]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800144a:	499d      	ldr	r1, [pc, #628]	; (80016c0 <HAL_RCC_OscConfig+0x684>)
 800144c:	400a      	ands	r2, r1
 800144e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2210      	movs	r2, #16
 8001456:	4013      	ands	r3, r2
 8001458:	d063      	beq.n	8001522 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d12a      	bne.n	80014b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001462:	4b95      	ldr	r3, [pc, #596]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001466:	4b94      	ldr	r3, [pc, #592]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001468:	2104      	movs	r1, #4
 800146a:	430a      	orrs	r2, r1
 800146c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800146e:	4b92      	ldr	r3, [pc, #584]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001472:	4b91      	ldr	r3, [pc, #580]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001474:	2101      	movs	r1, #1
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fa4f 	bl	800091c <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001484:	f7ff fa4a 	bl	800091c <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e152      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2202      	movs	r2, #2
 800149c:	4013      	ands	r3, r2
 800149e:	d0f1      	beq.n	8001484 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014a0:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	22f8      	movs	r2, #248	; 0xf8
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	00da      	lsls	r2, r3, #3
 80014b0:	4b81      	ldr	r3, [pc, #516]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34
 80014b6:	e034      	b.n	8001522 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	3305      	adds	r3, #5
 80014be:	d111      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014c0:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c4:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	2104      	movs	r1, #4
 80014c8:	438a      	bics	r2, r1
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014cc:	4b7a      	ldr	r3, [pc, #488]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d0:	22f8      	movs	r2, #248	; 0xf8
 80014d2:	4393      	bics	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	00da      	lsls	r2, r3, #3
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014de:	430a      	orrs	r2, r1
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
 80014e2:	e01e      	b.n	8001522 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014e4:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e8:	4b73      	ldr	r3, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	2104      	movs	r1, #4
 80014ec:	430a      	orrs	r2, r1
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014f0:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f4:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fa0e 	bl	800091c <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001506:	f7ff fa09 	bl	800091c <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e111      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2220      	movs	r2, #32
 8001528:	4013      	ands	r3, r2
 800152a:	d05c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800152c:	4b62      	ldr	r3, [pc, #392]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d00e      	beq.n	8001556 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001538:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	220c      	movs	r2, #12
 800153e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001540:	2b08      	cmp	r3, #8
 8001542:	d114      	bne.n	800156e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001544:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	23c0      	movs	r3, #192	; 0xc0
 800154a:	025b      	lsls	r3, r3, #9
 800154c:	401a      	ands	r2, r3
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	025b      	lsls	r3, r3, #9
 8001552:	429a      	cmp	r2, r3
 8001554:	d10b      	bne.n	800156e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001556:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155a:	2380      	movs	r3, #128	; 0x80
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d040      	beq.n	80015e4 <HAL_RCC_OscConfig+0x5a8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d03c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0e6      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d01b      	beq.n	80015ae <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001576:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157a:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0249      	lsls	r1, r1, #9
 8001580:	430a      	orrs	r2, r1
 8001582:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff f9ca 	bl	800091c <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158e:	f7ff f9c5 	bl	800091c <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e0cd      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x552>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80015b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	4943      	ldr	r1, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x688>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff f9af 	bl	800091c <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c4:	f7ff f9aa 	bl	800091c <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0b2      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80015d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	029b      	lsls	r3, r3, #10
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x588>
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d100      	bne.n	80015f0 <HAL_RCC_OscConfig+0x5b4>
 80015ee:	e0a4      	b.n	800173a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	220c      	movs	r2, #12
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x5c2>
 80015fc:	e078      	b.n	80016f0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	2b02      	cmp	r3, #2
 8001604:	d14c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800160c:	492e      	ldr	r1, [pc, #184]	; (80016c8 <HAL_RCC_OscConfig+0x68c>)
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff f983 	bl	800091c <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff f97e 	bl	800091c <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e086      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	220f      	movs	r2, #15
 8001640:	4393      	bics	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800164a:	430a      	orrs	r2, r1
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_RCC_OscConfig+0x690>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	431a      	orrs	r2, r3
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001664:	430a      	orrs	r2, r1
 8001666:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 800166e:	2180      	movs	r1, #128	; 0x80
 8001670:	0449      	lsls	r1, r1, #17
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff f951 	bl	800091c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff f94c 	bl	800091c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e054      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x644>
 800169e:	e04c      	b.n	800173a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <HAL_RCC_OscConfig+0x68c>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f936 	bl	800091c <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x6a6>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	40021000 	.word	0x40021000
 80016bc:	00001388 	.word	0x00001388
 80016c0:	efffffff 	.word	0xefffffff
 80016c4:	fffeffff 	.word	0xfffeffff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f924 	bl	800091c <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e02c      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_RCC_OscConfig+0x708>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	049b      	lsls	r3, r3, #18
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x694>
 80016ee:	e024      	b.n	800173a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e01f      	b.n	800173c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_OscConfig+0x708>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_RCC_OscConfig+0x708>)
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	401a      	ands	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	429a      	cmp	r2, r3
 8001716:	d10e      	bne.n	8001736 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	220f      	movs	r2, #15
 800171c:	401a      	ands	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001722:	429a      	cmp	r2, r3
 8001724:	d107      	bne.n	8001736 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	23f0      	movs	r3, #240	; 0xf0
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b008      	add	sp, #32
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0bf      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d911      	bls.n	800178e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b5e      	ldr	r3, [pc, #376]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4393      	bics	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	4b5b      	ldr	r3, [pc, #364]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0a6      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d015      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2204      	movs	r2, #4
 800179e:	4013      	ands	r3, r2
 80017a0:	d006      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017a2:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4b50      	ldr	r3, [pc, #320]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017a8:	21e0      	movs	r1, #224	; 0xe0
 80017aa:	00c9      	lsls	r1, r1, #3
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	22f0      	movs	r2, #240	; 0xf0
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	4013      	ands	r3, r2
 80017cc:	d04c      	beq.n	8001868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b44      	ldr	r3, [pc, #272]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	029b      	lsls	r3, r3, #10
 80017de:	4013      	ands	r3, r2
 80017e0:	d120      	bne.n	8001824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07a      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	049b      	lsls	r3, r3, #18
 80017f6:	4013      	ands	r3, r2
 80017f8:	d114      	bne.n	8001824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06e      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d108      	bne.n	8001824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e062      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e05b      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	4393      	bics	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001838:	f7ff f870 	bl	800091c <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001840:	e009      	b.n	8001856 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f86b 	bl	800091c <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_RCC_ClockConfig+0x1a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e042      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	220c      	movs	r2, #12
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	429a      	cmp	r2, r3
 8001866:	d1ec      	bne.n	8001842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2201      	movs	r2, #1
 800186e:	4013      	ands	r3, r2
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d211      	bcs.n	800189a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4393      	bics	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x19c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d001      	beq.n	800189a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e020      	b.n	80018dc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	d009      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_RCC_ClockConfig+0x1a8>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018b8:	f000 f820 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018bc:	0001      	movs	r1, r0
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1a0>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	220f      	movs	r2, #15
 80018c6:	4013      	ands	r3, r2
 80018c8:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1ac>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	000a      	movs	r2, r1
 80018ce:	40da      	lsrs	r2, r3
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1b0>)
 80018d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7fe ffdb 	bl	8000890 <HAL_InitTick>
  
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b004      	add	sp, #16
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40022000 	.word	0x40022000
 80018e8:	40021000 	.word	0x40021000
 80018ec:	00001388 	.word	0x00001388
 80018f0:	fffff8ff 	.word	0xfffff8ff
 80018f4:	08001bc0 	.word	0x08001bc0
 80018f8:	20000000 	.word	0x20000000

080018fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	220c      	movs	r2, #12
 8001920:	4013      	ands	r3, r2
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d046      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0xb8>
 8001926:	d848      	bhi.n	80019ba <HAL_RCC_GetSysClockFreq+0xbe>
 8001928:	2b04      	cmp	r3, #4
 800192a:	d002      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x36>
 800192c:	2b08      	cmp	r3, #8
 800192e:	d003      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x3c>
 8001930:	e043      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001934:	613b      	str	r3, [r7, #16]
      break;
 8001936:	e043      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	220f      	movs	r2, #15
 800193e:	4013      	ands	r3, r2
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	220f      	movs	r2, #15
 800194c:	4013      	ands	r3, r2
 800194e:	4a22      	ldr	r2, [pc, #136]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	401a      	ands	r2, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	429a      	cmp	r2, r3
 8001962:	d109      	bne.n	8001978 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	481a      	ldr	r0, [pc, #104]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001968:	f7fe fbce 	bl	8000108 <__udivsi3>
 800196c:	0003      	movs	r3, r0
 800196e:	001a      	movs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4353      	muls	r3, r2
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e01a      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	401a      	ands	r2, r3
 8001980:	23c0      	movs	r3, #192	; 0xc0
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d109      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	4814      	ldr	r0, [pc, #80]	; (80019dc <HAL_RCC_GetSysClockFreq+0xe0>)
 800198c:	f7fe fbbc 	bl	8000108 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	001a      	movs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4353      	muls	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	e008      	b.n	80019ae <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	480c      	ldr	r0, [pc, #48]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019a0:	f7fe fbb2 	bl	8000108 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	001a      	movs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4353      	muls	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	613b      	str	r3, [r7, #16]
      break;
 80019b2:	e005      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_GetSysClockFreq+0xe0>)
 80019b6:	613b      	str	r3, [r7, #16]
      break;
 80019b8:	e002      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019bc:	613b      	str	r3, [r7, #16]
      break;
 80019be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c0:	693b      	ldr	r3, [r7, #16]
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b006      	add	sp, #24
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	08001bd0 	.word	0x08001bd0
 80019d8:	08001be0 	.word	0x08001be0
 80019dc:	02dc6c00 	.word	0x02dc6c00

080019e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a8      	b.n	8001b44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	2382      	movs	r3, #130	; 0x82
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d009      	beq.n	8001a1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	e005      	b.n	8001a1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	225d      	movs	r2, #93	; 0x5d
 8001a24:	5c9b      	ldrb	r3, [r3, r2]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d107      	bne.n	8001a3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	225c      	movs	r2, #92	; 0x5c
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7fe fdfe 	bl	8000638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	225d      	movs	r2, #93	; 0x5d
 8001a40:	2102      	movs	r1, #2
 8001a42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2140      	movs	r1, #64	; 0x40
 8001a50:	438a      	bics	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	23e0      	movs	r3, #224	; 0xe0
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d902      	bls.n	8001a66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	e002      	b.n	8001a6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	23f0      	movs	r3, #240	; 0xf0
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d008      	beq.n	8001a8a <HAL_SPI_Init+0xaa>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	23e0      	movs	r3, #224	; 0xe0
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d002      	beq.n	8001a8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2382      	movs	r3, #130	; 0x82
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6899      	ldr	r1, [r3, #8]
 8001a98:	2384      	movs	r3, #132	; 0x84
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6999      	ldr	r1, [r3, #24]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	400b      	ands	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2138      	movs	r1, #56	; 0x38
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	400b      	ands	r3, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	0011      	movs	r1, r2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	019b      	lsls	r3, r3, #6
 8001ade:	401a      	ands	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	2204      	movs	r2, #4
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	2110      	movs	r1, #16
 8001af8:	400b      	ands	r3, r1
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b00:	2108      	movs	r1, #8
 8001b02:	400b      	ands	r3, r1
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	23f0      	movs	r3, #240	; 0xf0
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	0011      	movs	r1, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	015b      	lsls	r3, r3, #5
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4907      	ldr	r1, [pc, #28]	; (8001b4c <HAL_SPI_Init+0x16c>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	225d      	movs	r2, #93	; 0x5d
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	fffff7ff 	.word	0xfffff7ff

08001b50 <__libc_init_array>:
 8001b50:	b570      	push	{r4, r5, r6, lr}
 8001b52:	2600      	movs	r6, #0
 8001b54:	4d0c      	ldr	r5, [pc, #48]	; (8001b88 <__libc_init_array+0x38>)
 8001b56:	4c0d      	ldr	r4, [pc, #52]	; (8001b8c <__libc_init_array+0x3c>)
 8001b58:	1b64      	subs	r4, r4, r5
 8001b5a:	10a4      	asrs	r4, r4, #2
 8001b5c:	42a6      	cmp	r6, r4
 8001b5e:	d109      	bne.n	8001b74 <__libc_init_array+0x24>
 8001b60:	2600      	movs	r6, #0
 8001b62:	f000 f821 	bl	8001ba8 <_init>
 8001b66:	4d0a      	ldr	r5, [pc, #40]	; (8001b90 <__libc_init_array+0x40>)
 8001b68:	4c0a      	ldr	r4, [pc, #40]	; (8001b94 <__libc_init_array+0x44>)
 8001b6a:	1b64      	subs	r4, r4, r5
 8001b6c:	10a4      	asrs	r4, r4, #2
 8001b6e:	42a6      	cmp	r6, r4
 8001b70:	d105      	bne.n	8001b7e <__libc_init_array+0x2e>
 8001b72:	bd70      	pop	{r4, r5, r6, pc}
 8001b74:	00b3      	lsls	r3, r6, #2
 8001b76:	58eb      	ldr	r3, [r5, r3]
 8001b78:	4798      	blx	r3
 8001b7a:	3601      	adds	r6, #1
 8001b7c:	e7ee      	b.n	8001b5c <__libc_init_array+0xc>
 8001b7e:	00b3      	lsls	r3, r6, #2
 8001b80:	58eb      	ldr	r3, [r5, r3]
 8001b82:	4798      	blx	r3
 8001b84:	3601      	adds	r6, #1
 8001b86:	e7f2      	b.n	8001b6e <__libc_init_array+0x1e>
 8001b88:	08001bf0 	.word	0x08001bf0
 8001b8c:	08001bf0 	.word	0x08001bf0
 8001b90:	08001bf0 	.word	0x08001bf0
 8001b94:	08001bf4 	.word	0x08001bf4

08001b98 <memset>:
 8001b98:	0003      	movs	r3, r0
 8001b9a:	1882      	adds	r2, r0, r2
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d100      	bne.n	8001ba2 <memset+0xa>
 8001ba0:	4770      	bx	lr
 8001ba2:	7019      	strb	r1, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	e7f9      	b.n	8001b9c <memset+0x4>

08001ba8 <_init>:
 8001ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bae:	bc08      	pop	{r3}
 8001bb0:	469e      	mov	lr, r3
 8001bb2:	4770      	bx	lr

08001bb4 <_fini>:
 8001bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bba:	bc08      	pop	{r3}
 8001bbc:	469e      	mov	lr, r3
 8001bbe:	4770      	bx	lr
