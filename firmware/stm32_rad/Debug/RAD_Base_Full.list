
RAD_Base_Full.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047ec  080047ec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080047ec  080047ec  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047ec  080047ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080047f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ec  20000070  08004860  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004860  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010224  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002353  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00032650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c51  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001777f  00000000  00000000  00034261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c1d  00000000  00000000  0004b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000936c5  00000000  00000000  0005d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047f8  00000000  00000000  000f0cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f54bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080046e8 	.word	0x080046e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080046e8 	.word	0x080046e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000150:	b08c      	sub	sp, #48	; 0x30
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc4a 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 fa20 	bl	800059c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_CAN_Init();
 800015c:	f000 fa7a 	bl	8000654 <MX_CAN_Init>
//  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
//  {
//	  Error_Handler();
//  }

  setTimestamp(&testTimer);
 8000160:	4895      	ldr	r0, [pc, #596]	; (80003b8 <main+0x26c>)
 8000162:	f000 faff 	bl	8000764 <setTimestamp>
		  LED_STATE_HIGH,
		  LED_STATE_IDLE_HIGH,
		  LED_STATE_LOW
	  } ledState = LED_STATE_INIT;

	  switch (ledState)
 8000166:	4b95      	ldr	r3, [pc, #596]	; (80003bc <main+0x270>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b04      	cmp	r3, #4
 800016c:	d851      	bhi.n	8000212 <main+0xc6>
 800016e:	a201      	add	r2, pc, #4	; (adr r2, 8000174 <main+0x28>)
 8000170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000174:	08000189 	.word	0x08000189
 8000178:	08000197 	.word	0x08000197
 800017c:	080001cb 	.word	0x080001cb
 8000180:	080001e3 	.word	0x080001e3
 8000184:	080001fb 	.word	0x080001fb
	  {
	  	  case LED_STATE_INIT:
	  		  setTimestamp(&ledTimer);
 8000188:	488d      	ldr	r0, [pc, #564]	; (80003c0 <main+0x274>)
 800018a:	f000 faeb 	bl	8000764 <setTimestamp>
			  ledState = LED_STATE_IDLE_LOW;
 800018e:	4b8b      	ldr	r3, [pc, #556]	; (80003bc <main+0x270>)
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
			  break;
 8000194:	e044      	b.n	8000220 <main+0xd4>

	  	  case LED_STATE_IDLE_LOW:
	  		  //1 second timeout

	  		  if (timeElapsed(&ledTimer, 1000) && ledBlinks > 0)
 8000196:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800019a:	4889      	ldr	r0, [pc, #548]	; (80003c0 <main+0x274>)
 800019c:	f000 faf6 	bl	800078c <timeElapsed>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d039      	beq.n	800021a <main+0xce>
 80001a6:	4b87      	ldr	r3, [pc, #540]	; (80003c4 <main+0x278>)
 80001a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001ac:	4313      	orrs	r3, r2
 80001ae:	d034      	beq.n	800021a <main+0xce>
	  		  {
	  			  ledBlinks--;
 80001b0:	4b84      	ldr	r3, [pc, #528]	; (80003c4 <main+0x278>)
 80001b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001b6:	1e54      	subs	r4, r2, #1
 80001b8:	f143 35ff 	adc.w	r5, r3, #4294967295
 80001bc:	4b81      	ldr	r3, [pc, #516]	; (80003c4 <main+0x278>)
 80001be:	e9c3 4500 	strd	r4, r5, [r3]
	  			  ledState = LED_STATE_HIGH;
 80001c2:	4b7e      	ldr	r3, [pc, #504]	; (80003bc <main+0x270>)
 80001c4:	2202      	movs	r2, #2
 80001c6:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80001c8:	e027      	b.n	800021a <main+0xce>

	  	  case LED_STATE_HIGH:
	  		  //Turn on LED
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2104      	movs	r1, #4
 80001ce:	487e      	ldr	r0, [pc, #504]	; (80003c8 <main+0x27c>)
 80001d0:	f001 fa77 	bl	80016c2 <HAL_GPIO_WritePin>
	  		  setTimestamp(&ledTimer);
 80001d4:	487a      	ldr	r0, [pc, #488]	; (80003c0 <main+0x274>)
 80001d6:	f000 fac5 	bl	8000764 <setTimestamp>
	  		  ledState = LED_STATE_IDLE_HIGH;
 80001da:	4b78      	ldr	r3, [pc, #480]	; (80003bc <main+0x270>)
 80001dc:	2203      	movs	r2, #3
 80001de:	701a      	strb	r2, [r3, #0]
	  		  break;
 80001e0:	e01e      	b.n	8000220 <main+0xd4>

	  	  case LED_STATE_IDLE_HIGH:
	  		  if (timeElapsed(&ledTimer, 1000))
 80001e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001e6:	4876      	ldr	r0, [pc, #472]	; (80003c0 <main+0x274>)
 80001e8:	f000 fad0 	bl	800078c <timeElapsed>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d015      	beq.n	800021e <main+0xd2>
			  {
				  ledState = LED_STATE_LOW;
 80001f2:	4b72      	ldr	r3, [pc, #456]	; (80003bc <main+0x270>)
 80001f4:	2204      	movs	r2, #4
 80001f6:	701a      	strb	r2, [r3, #0]
			  }
			  break;
 80001f8:	e011      	b.n	800021e <main+0xd2>

	  	  case LED_STATE_LOW:
			  //Turn off LED
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2104      	movs	r1, #4
 80001fe:	4872      	ldr	r0, [pc, #456]	; (80003c8 <main+0x27c>)
 8000200:	f001 fa5f 	bl	80016c2 <HAL_GPIO_WritePin>
			  setTimestamp(&ledTimer);
 8000204:	486e      	ldr	r0, [pc, #440]	; (80003c0 <main+0x274>)
 8000206:	f000 faad 	bl	8000764 <setTimestamp>
			  ledState = LED_STATE_IDLE_LOW;
 800020a:	4b6c      	ldr	r3, [pc, #432]	; (80003bc <main+0x270>)
 800020c:	2201      	movs	r2, #1
 800020e:	701a      	strb	r2, [r3, #0]
			  break;
 8000210:	e006      	b.n	8000220 <main+0xd4>

	  	  default:
	  		  ledState = LED_STATE_INIT;
 8000212:	4b6a      	ldr	r3, [pc, #424]	; (80003bc <main+0x270>)
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
	  		  break;
 8000218:	e002      	b.n	8000220 <main+0xd4>
	  		  break;
 800021a:	bf00      	nop
 800021c:	e000      	b.n	8000220 <main+0xd4>
			  break;
 800021e:	bf00      	nop
		  TEST_I2C,
		  TEST_LIMIT_SWITCH,
		  TEST_FORCE_RESISTOR
	  } testState = TEST_CAN;

	  switch (testState)
 8000220:	4b6a      	ldr	r3, [pc, #424]	; (80003cc <main+0x280>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b07      	cmp	r3, #7
 8000226:	f200 819b 	bhi.w	8000560 <main+0x414>
 800022a:	a201      	add	r2, pc, #4	; (adr r2, 8000230 <main+0xe4>)
 800022c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000230:	08000251 	.word	0x08000251
 8000234:	08000261 	.word	0x08000261
 8000238:	080002d7 	.word	0x080002d7
 800023c:	08000325 	.word	0x08000325
 8000240:	08000405 	.word	0x08000405
 8000244:	08000561 	.word	0x08000561
 8000248:	0800049f 	.word	0x0800049f
 800024c:	08000555 	.word	0x08000555
	  {
	  	  case TEST_BLINK:
		  	  ledBlinks = 1;
 8000250:	495c      	ldr	r1, [pc, #368]	; (80003c4 <main+0x278>)
 8000252:	f04f 0201 	mov.w	r2, #1
 8000256:	f04f 0300 	mov.w	r3, #0
 800025a:	e9c1 2300 	strd	r2, r3, [r1]
		  	  break;
 800025e:	e188      	b.n	8000572 <main+0x426>

	  	  case TEST_MOTOR:


	  		uint16_t MotorTestRead = 0x0000;
 8000260:	2300      	movs	r3, #0
 8000262:	82fb      	strh	r3, [r7, #22]
	  		//HAL_UART_Receive_IT(&huart3, (uint8_t*)&MotorTestRead, sizeof(MotorTestRead));
	  		//if (uart3Flag)
	  		if (timeElapsed(&testTimer, 5000))
 8000264:	f241 3188 	movw	r1, #5000	; 0x1388
 8000268:	4853      	ldr	r0, [pc, #332]	; (80003b8 <main+0x26c>)
 800026a:	f000 fa8f 	bl	800078c <timeElapsed>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	f000 8177 	beq.w	8000564 <main+0x418>
			{
				rotations = 100;//(uint16_t)MotorTestRead;
 8000276:	4b56      	ldr	r3, [pc, #344]	; (80003d0 <main+0x284>)
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	801a      	strh	r2, [r3, #0]
				ledBlinks = 1;
 800027c:	4951      	ldr	r1, [pc, #324]	; (80003c4 <main+0x278>)
 800027e:	f04f 0201 	mov.w	r2, #1
 8000282:	f04f 0300 	mov.w	r3, #0
 8000286:	e9c1 2300 	strd	r2, r3, [r1]
				if (uart3Flag){
 800028a:	4b52      	ldr	r3, [pc, #328]	; (80003d4 <main+0x288>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d007      	beq.n	80002a4 <main+0x158>
					HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000294:	2104      	movs	r1, #4
 8000296:	4850      	ldr	r0, [pc, #320]	; (80003d8 <main+0x28c>)
 8000298:	f002 fcc0 	bl	8002c1c <HAL_TIM_PWM_Start>
					uart3Flag = 0;
 800029c:	4b4d      	ldr	r3, [pc, #308]	; (80003d4 <main+0x288>)
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	e006      	b.n	80002b2 <main+0x166>
				}
				else
				{
					HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 80002a4:	2104      	movs	r1, #4
 80002a6:	484c      	ldr	r0, [pc, #304]	; (80003d8 <main+0x28c>)
 80002a8:	f002 fd5a 	bl	8002d60 <HAL_TIM_PWM_Stop>
					uart3Flag = 1;
 80002ac:	4b49      	ldr	r3, [pc, #292]	; (80003d4 <main+0x288>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]


				//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

				//HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
				int buf_len = sprintf(uart_buf, "PWM Test: 0x%x rotations\n", MotorTestRead);
 80002b2:	8afb      	ldrh	r3, [r7, #22]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4949      	ldr	r1, [pc, #292]	; (80003dc <main+0x290>)
 80002b8:	4849      	ldr	r0, [pc, #292]	; (80003e0 <main+0x294>)
 80002ba:	f003 fd63 	bl	8003d84 <siprintf>
 80002be:	6138      	str	r0, [r7, #16]

				HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	2364      	movs	r3, #100	; 0x64
 80002c6:	4946      	ldr	r1, [pc, #280]	; (80003e0 <main+0x294>)
 80002c8:	4846      	ldr	r0, [pc, #280]	; (80003e4 <main+0x298>)
 80002ca:	f002 ffc1 	bl	8003250 <HAL_UART_Transmit>
				setTimestamp(&testTimer);
 80002ce:	483a      	ldr	r0, [pc, #232]	; (80003b8 <main+0x26c>)
 80002d0:	f000 fa48 	bl	8000764 <setTimestamp>

			}

	  		  break;
 80002d4:	e146      	b.n	8000564 <main+0x418>

	  	  case TEST_UART:

	  		uint16_t UART_read = 0x0000;
 80002d6:	2300      	movs	r3, #0
 80002d8:	81fb      	strh	r3, [r7, #14]
	  		HAL_UART_Receive_IT(&huart3, (uint8_t*)&UART_read, sizeof(UART_read));
 80002da:	f107 030e 	add.w	r3, r7, #14
 80002de:	2202      	movs	r2, #2
 80002e0:	4619      	mov	r1, r3
 80002e2:	4840      	ldr	r0, [pc, #256]	; (80003e4 <main+0x298>)
 80002e4:	f003 f837 	bl	8003356 <HAL_UART_Receive_IT>

	  		//Wait for UART msg to trigger callback, then break it down
	  		if (uart3Flag)
 80002e8:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <main+0x288>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d018      	beq.n	8000324 <main+0x1d8>
	  		{
	  			ledBlinks = (uint16_t)UART_read;
 80002f2:	89fb      	ldrh	r3, [r7, #14]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	2200      	movs	r2, #0
 80002f8:	469a      	mov	sl, r3
 80002fa:	4693      	mov	fp, r2
 80002fc:	4b31      	ldr	r3, [pc, #196]	; (80003c4 <main+0x278>)
 80002fe:	e9c3 ab00 	strd	sl, fp, [r3]
	  			uart3Flag = 0;
 8000302:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <main+0x288>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]

	  			int buf_len = sprintf(uart_buf, "UART Test: 0x%x \n", UART_read);
 8000308:	89fb      	ldrh	r3, [r7, #14]
 800030a:	461a      	mov	r2, r3
 800030c:	4936      	ldr	r1, [pc, #216]	; (80003e8 <main+0x29c>)
 800030e:	4834      	ldr	r0, [pc, #208]	; (80003e0 <main+0x294>)
 8000310:	f003 fd38 	bl	8003d84 <siprintf>
 8000314:	61b8      	str	r0, [r7, #24]

	  			HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 8000316:	69bb      	ldr	r3, [r7, #24]
 8000318:	b29a      	uxth	r2, r3
 800031a:	2364      	movs	r3, #100	; 0x64
 800031c:	4930      	ldr	r1, [pc, #192]	; (80003e0 <main+0x294>)
 800031e:	4831      	ldr	r0, [pc, #196]	; (80003e4 <main+0x298>)
 8000320:	f002 ff96 	bl	8003250 <HAL_UART_Transmit>
//
//
//	  			  HAL_CAN_SendMessage(&msg);
//	  		  }

	  		if (timeElapsed(&testTimer, 5000))
 8000324:	f241 3188 	movw	r1, #5000	; 0x1388
 8000328:	4823      	ldr	r0, [pc, #140]	; (80003b8 <main+0x26c>)
 800032a:	f000 fa2f 	bl	800078c <timeElapsed>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	f000 8119 	beq.w	8000568 <main+0x41c>
//			  msg.id.value = RAD_BOARD_ID;
//			  memcpy(msg.data, &i, 8*sizeof(uint8_t));
//
//			  memset(&RxData, 0, 8*sizeof(uint8_t));

	  			TxHeader.IDE = CAN_ID_STD;
 8000336:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <main+0x2a0>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
	  			TxHeader.StdId = 0x446;
 800033c:	4b2b      	ldr	r3, [pc, #172]	; (80003ec <main+0x2a0>)
 800033e:	f240 4246 	movw	r2, #1094	; 0x446
 8000342:	601a      	str	r2, [r3, #0]
	  			TxHeader.RTR = CAN_RTR_DATA;
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <main+0x2a0>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
	  			TxHeader.DLC = 2;
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <main+0x2a0>)
 800034c:	2202      	movs	r2, #2
 800034e:	611a      	str	r2, [r3, #16]

	  			TxData[0] = 50;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <main+0x2a4>)
 8000352:	2232      	movs	r2, #50	; 0x32
 8000354:	701a      	strb	r2, [r3, #0]
	  			TxData[1] = 0xAA;
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <main+0x2a4>)
 8000358:	22aa      	movs	r2, #170	; 0xaa
 800035a:	705a      	strb	r2, [r3, #1]


			  //CAN_SendMessage(&msg);

			  uint8_t csend[] = {'H','E','L','L','O'}; // Tx Buffer
 800035c:	4a25      	ldr	r2, [pc, #148]	; (80003f4 <main+0x2a8>)
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000366:	6018      	str	r0, [r3, #0]
 8000368:	3304      	adds	r3, #4
 800036a:	7019      	strb	r1, [r3, #0]


			  if (HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox) != HAL_OK)
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <main+0x2ac>)
 800036e:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <main+0x2a4>)
 8000370:	491e      	ldr	r1, [pc, #120]	; (80003ec <main+0x2a0>)
 8000372:	4822      	ldr	r0, [pc, #136]	; (80003fc <main+0x2b0>)
 8000374:	f000 fda4 	bl	8000ec0 <HAL_CAN_AddTxMessage>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d006      	beq.n	800038c <main+0x240>
			  	{
				  ledBlinks = 2;
 800037e:	4911      	ldr	r1, [pc, #68]	; (80003c4 <main+0x278>)
 8000380:	f04f 0202 	mov.w	r2, #2
 8000384:	f04f 0300 	mov.w	r3, #0
 8000388:	e9c1 2300 	strd	r2, r3, [r1]
			  	}

			  ledBlinks = 1;
 800038c:	490d      	ldr	r1, [pc, #52]	; (80003c4 <main+0x278>)
 800038e:	f04f 0201 	mov.w	r2, #1
 8000392:	f04f 0300 	mov.w	r3, #0
 8000396:	e9c1 2300 	strd	r2, r3, [r1]
			  i++;
 800039a:	4b19      	ldr	r3, [pc, #100]	; (8000400 <main+0x2b4>)
 800039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003a0:	f112 0801 	adds.w	r8, r2, #1
 80003a4:	f143 0900 	adc.w	r9, r3, #0
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <main+0x2b4>)
 80003aa:	e9c3 8900 	strd	r8, r9, [r3]
			  getTimestamp(&testTimer);
 80003ae:	4802      	ldr	r0, [pc, #8]	; (80003b8 <main+0x26c>)
 80003b0:	f000 f9e5 	bl	800077e <getTimestamp>
		  }

	  		break;
 80003b4:	e0d8      	b.n	8000568 <main+0x41c>
 80003b6:	bf00      	nop
 80003b8:	200001d4 	.word	0x200001d4
 80003bc:	2000020b 	.word	0x2000020b
 80003c0:	200001c0 	.word	0x200001c0
 80003c4:	200001c8 	.word	0x200001c8
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	20000000 	.word	0x20000000
 80003d0:	200001d0 	.word	0x200001d0
 80003d4:	2000020a 	.word	0x2000020a
 80003d8:	2000010c 	.word	0x2000010c
 80003dc:	08004700 	.word	0x08004700
 80003e0:	200001d8 	.word	0x200001d8
 80003e4:	20000154 	.word	0x20000154
 80003e8:	0800471c 	.word	0x0800471c
 80003ec:	2000019c 	.word	0x2000019c
 80003f0:	200001b4 	.word	0x200001b4
 80003f4:	0800478c 	.word	0x0800478c
 80003f8:	200001bc 	.word	0x200001bc
 80003fc:	2000008c 	.word	0x2000008c
 8000400:	20000008 	.word	0x20000008

	  	  case TEST_SPI:

	  		  if(timeElapsed(&testTimer, 5000))
 8000404:	f241 3188 	movw	r1, #5000	; 0x1388
 8000408:	485a      	ldr	r0, [pc, #360]	; (8000574 <main+0x428>)
 800040a:	f000 f9bf 	bl	800078c <timeElapsed>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	f000 80ab 	beq.w	800056c <main+0x420>
	  		  {
	  			  uint16_t SPI_msg = 0x0000; //two bytes, 16 bits
 8000416:	2300      	movs	r3, #0
 8000418:	80fb      	strh	r3, [r7, #6]

				  SPI_msg |= 0x3FFF; //ANGLE REGISTER
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000420:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000424:	b29b      	uxth	r3, r3
 8000426:	80fb      	strh	r3, [r7, #6]
				  SPI_msg |= (1 << 14); //READ COMMAND
 8000428:	88fb      	ldrh	r3, [r7, #6]
 800042a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800042e:	b29b      	uxth	r3, r3
 8000430:	80fb      	strh	r3, [r7, #6]

				  //CALCULATE PARITY - current message is 0x7FFF, or 0b0111 1111 1111 1111 - odd number of bits
				  SPI_msg |= (1 << 15);
 8000432:	88fb      	ldrh	r3, [r7, #6]
 8000434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800043c:	b29b      	uxth	r3, r3
 800043e:	80fb      	strh	r3, [r7, #6]

				  //SPI MSG is 0xFFFF for angle read

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	484c      	ldr	r0, [pc, #304]	; (8000578 <main+0x42c>)
 8000446:	f001 f93c 	bl	80016c2 <HAL_GPIO_WritePin>
				  HAL_SPI_Transmit(&hspi2, (uint8_t *)&SPI_msg, sizeof(SPI_msg), 100);
 800044a:	1db9      	adds	r1, r7, #6
 800044c:	2364      	movs	r3, #100	; 0x64
 800044e:	2202      	movs	r2, #2
 8000450:	484a      	ldr	r0, [pc, #296]	; (800057c <main+0x430>)
 8000452:	f001 fde3 	bl	800201c <HAL_SPI_Transmit>
				  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
				  //HAL_SPI_Transmit(&hspi2, (uint8_t *)&SPI_msg, sizeof(SPI_msg), timeout);

				  uint16_t SPI_read;

				  HAL_SPI_Receive(&hspi2, (uint8_t*)&SPI_read, sizeof(SPI_read), 100);
 8000456:	1d39      	adds	r1, r7, #4
 8000458:	2364      	movs	r3, #100	; 0x64
 800045a:	2202      	movs	r2, #2
 800045c:	4847      	ldr	r0, [pc, #284]	; (800057c <main+0x430>)
 800045e:	f001 ff20 	bl	80022a2 <HAL_SPI_Receive>

				  ledBlinks = 1;
 8000462:	4947      	ldr	r1, [pc, #284]	; (8000580 <main+0x434>)
 8000464:	f04f 0201 	mov.w	r2, #1
 8000468:	f04f 0300 	mov.w	r3, #0
 800046c:	e9c1 2300 	strd	r2, r3, [r1]

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	4840      	ldr	r0, [pc, #256]	; (8000578 <main+0x42c>)
 8000476:	f001 f924 	bl	80016c2 <HAL_GPIO_WritePin>

				  int buf_len = sprintf(uart_buf, "SPI Test: 0x%x \n", SPI_msg);
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	461a      	mov	r2, r3
 800047e:	4941      	ldr	r1, [pc, #260]	; (8000584 <main+0x438>)
 8000480:	4841      	ldr	r0, [pc, #260]	; (8000588 <main+0x43c>)
 8000482:	f003 fc7f 	bl	8003d84 <siprintf>
 8000486:	61f8      	str	r0, [r7, #28]

				  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	b29a      	uxth	r2, r3
 800048c:	2364      	movs	r3, #100	; 0x64
 800048e:	493e      	ldr	r1, [pc, #248]	; (8000588 <main+0x43c>)
 8000490:	483e      	ldr	r0, [pc, #248]	; (800058c <main+0x440>)
 8000492:	f002 fedd 	bl	8003250 <HAL_UART_Transmit>

				  //Wait 5s till next test
				  setTimestamp(&testTimer);
 8000496:	4837      	ldr	r0, [pc, #220]	; (8000574 <main+0x428>)
 8000498:	f000 f964 	bl	8000764 <setTimestamp>
	  		  }


	  		 break;
 800049c:	e066      	b.n	800056c <main+0x420>

	  	  case TEST_LIMIT_SWITCH:

	  		 if (timeElapsed(&testTimer, 1000))
 800049e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <main+0x428>)
 80004a4:	f000 f972 	bl	800078c <timeElapsed>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d02b      	beq.n	8000506 <main+0x3ba>
	  			  		  {
	  			 	 	 	//polling Limit Switch
	  						 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 80004ae:	2101      	movs	r1, #1
 80004b0:	4837      	ldr	r0, [pc, #220]	; (8000590 <main+0x444>)
 80004b2:	f001 f8ef 	bl	8001694 <HAL_GPIO_ReadPin>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d10e      	bne.n	80004da <main+0x38e>
	  						 {
	  							 int buf_len = sprintf(uart_buf, "Force sensitive Resistor A pressed\n");
 80004bc:	4935      	ldr	r1, [pc, #212]	; (8000594 <main+0x448>)
 80004be:	4832      	ldr	r0, [pc, #200]	; (8000588 <main+0x43c>)
 80004c0:	f003 fc60 	bl	8003d84 <siprintf>
 80004c4:	62f8      	str	r0, [r7, #44]	; 0x2c

	  							 HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 80004c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	492e      	ldr	r1, [pc, #184]	; (8000588 <main+0x43c>)
 80004ce:	482f      	ldr	r0, [pc, #188]	; (800058c <main+0x440>)
 80004d0:	f002 febe 	bl	8003250 <HAL_UART_Transmit>
	  							 getTimestamp(&testTimer);
 80004d4:	4827      	ldr	r0, [pc, #156]	; (8000574 <main+0x428>)
 80004d6:	f000 f952 	bl	800077e <getTimestamp>
	  						 }
	  						 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_SET)
 80004da:	2102      	movs	r1, #2
 80004dc:	482c      	ldr	r0, [pc, #176]	; (8000590 <main+0x444>)
 80004de:	f001 f8d9 	bl	8001694 <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10e      	bne.n	8000506 <main+0x3ba>
	  						 {
	  							 int buf_len = sprintf(uart_buf, "Force sensitive Resistor B pressed\n");
 80004e8:	492b      	ldr	r1, [pc, #172]	; (8000598 <main+0x44c>)
 80004ea:	4827      	ldr	r0, [pc, #156]	; (8000588 <main+0x43c>)
 80004ec:	f003 fc4a 	bl	8003d84 <siprintf>
 80004f0:	62b8      	str	r0, [r7, #40]	; 0x28

	  							 HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 80004f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	2364      	movs	r3, #100	; 0x64
 80004f8:	4923      	ldr	r1, [pc, #140]	; (8000588 <main+0x43c>)
 80004fa:	4824      	ldr	r0, [pc, #144]	; (800058c <main+0x440>)
 80004fc:	f002 fea8 	bl	8003250 <HAL_UART_Transmit>
	  							 getTimestamp(&testTimer);
 8000500:	481c      	ldr	r0, [pc, #112]	; (8000574 <main+0x428>)
 8000502:	f000 f93c 	bl	800077e <getTimestamp>

	  						 }
	  			  		  }

				 //polling Limit Switch
			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000506:	2101      	movs	r1, #1
 8000508:	4821      	ldr	r0, [pc, #132]	; (8000590 <main+0x444>)
 800050a:	f001 f8c3 	bl	8001694 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10b      	bne.n	800052c <main+0x3e0>
			  {
				int buf_len = sprintf(uart_buf, "Force sensitive Resistor A pressed\n");
 8000514:	491f      	ldr	r1, [pc, #124]	; (8000594 <main+0x448>)
 8000516:	481c      	ldr	r0, [pc, #112]	; (8000588 <main+0x43c>)
 8000518:	f003 fc34 	bl	8003d84 <siprintf>
 800051c:	6278      	str	r0, [r7, #36]	; 0x24

				HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 800051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000520:	b29a      	uxth	r2, r3
 8000522:	2364      	movs	r3, #100	; 0x64
 8000524:	4918      	ldr	r1, [pc, #96]	; (8000588 <main+0x43c>)
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <main+0x440>)
 8000528:	f002 fe92 	bl	8003250 <HAL_UART_Transmit>
			  }
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)==GPIO_PIN_SET)
 800052c:	2102      	movs	r1, #2
 800052e:	4818      	ldr	r0, [pc, #96]	; (8000590 <main+0x444>)
 8000530:	f001 f8b0 	bl	8001694 <HAL_GPIO_ReadPin>
 8000534:	4603      	mov	r3, r0
 8000536:	2b01      	cmp	r3, #1
 8000538:	d11a      	bne.n	8000570 <main+0x424>
			{
			int buf_len = sprintf(uart_buf, "Force sensitive Resistor B pressed\n");
 800053a:	4917      	ldr	r1, [pc, #92]	; (8000598 <main+0x44c>)
 800053c:	4812      	ldr	r0, [pc, #72]	; (8000588 <main+0x43c>)
 800053e:	f003 fc21 	bl	8003d84 <siprintf>
 8000542:	6238      	str	r0, [r7, #32]

			HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, buf_len, 100);
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	b29a      	uxth	r2, r3
 8000548:	2364      	movs	r3, #100	; 0x64
 800054a:	490f      	ldr	r1, [pc, #60]	; (8000588 <main+0x43c>)
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0x440>)
 800054e:	f002 fe7f 	bl	8003250 <HAL_UART_Transmit>
			}

	  		  break;
 8000552:	e00d      	b.n	8000570 <main+0x424>

	  	  case TEST_FORCE_RESISTOR:

	  		  if (timeElapsed(&testTimer, 1000))
 8000554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000558:	4806      	ldr	r0, [pc, #24]	; (8000574 <main+0x428>)
 800055a:	f000 f917 	bl	800078c <timeElapsed>
	  		  {

	  		  }
	  		  break;
 800055e:	e008      	b.n	8000572 <main+0x426>

	  	  default:
	  		  break;
 8000560:	bf00      	nop
 8000562:	e600      	b.n	8000166 <main+0x1a>
	  		  break;
 8000564:	bf00      	nop
 8000566:	e5fe      	b.n	8000166 <main+0x1a>
	  		break;
 8000568:	bf00      	nop
 800056a:	e5fc      	b.n	8000166 <main+0x1a>
	  		 break;
 800056c:	bf00      	nop
 800056e:	e5fa      	b.n	8000166 <main+0x1a>
	  		  break;
 8000570:	bf00      	nop
  {
 8000572:	e5f8      	b.n	8000166 <main+0x1a>
 8000574:	200001d4 	.word	0x200001d4
 8000578:	40010c00 	.word	0x40010c00
 800057c:	200000b4 	.word	0x200000b4
 8000580:	200001c8 	.word	0x200001c8
 8000584:	08004730 	.word	0x08004730
 8000588:	200001d8 	.word	0x200001d8
 800058c:	20000154 	.word	0x20000154
 8000590:	40010800 	.word	0x40010800
 8000594:	08004744 	.word	0x08004744
 8000598:	08004768 	.word	0x08004768

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a6:	2228      	movs	r2, #40	; 0x28
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fc0a 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80005e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f87e 	bl	80016f4 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fe:	f000 f8da 	bl	80007b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000612:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2101      	movs	r1, #1
 800061e:	4618      	mov	r0, r3
 8000620:	f001 faea 	bl	8001bf8 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800062a:	f000 f8c4 	bl	80007b6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062e:	2302      	movs	r3, #2
 8000630:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000632:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000636:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fc38 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000646:	f000 f8b6 	bl	80007b6 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_CAN_Init+0xb0>)
 800065c:	4a2a      	ldr	r2, [pc, #168]	; (8000708 <MX_CAN_Init+0xb4>)
 800065e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 5;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_CAN_Init+0xb0>)
 8000662:	2205      	movs	r2, #5
 8000664:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_CAN_Init+0xb0>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_CAN_Init+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_CAN_Init+0xb0>)
 8000674:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000678:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_CAN_Init+0xb0>)
 800067c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000680:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_CAN_Init+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_CAN_Init+0xb0>)
 800068a:	2200      	movs	r2, #0
 800068c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_CAN_Init+0xb0>)
 8000690:	2200      	movs	r2, #0
 8000692:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_CAN_Init+0xb0>)
 8000696:	2200      	movs	r2, #0
 8000698:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_CAN_Init+0xb0>)
 800069c:	2200      	movs	r2, #0
 800069e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_CAN_Init+0xb0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_CAN_Init+0xb0>)
 80006a8:	f000 fa02 	bl	8000ab0 <HAL_CAN_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006b2:	f000 f880 	bl	80007b6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  	CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_DISABLE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80006ba:	2312      	movs	r3, #18
 80006bc:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x446<<5;
 80006c2:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80006c6:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 80006cc:	f648 03c0 	movw	r3, #35008	; 0x88c0
 80006d0:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80006da:	2301      	movs	r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80006de:	2314      	movs	r3, #20
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <MX_CAN_Init+0xb0>)
 80006e8:	f000 fadd 	bl	8000ca6 <HAL_CAN_ConfigFilter>
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_CAN_Init+0xb0>)
 80006ee:	f000 fba3 	bl	8000e38 <HAL_CAN_Start>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_CAN_Init+0xa8>
  {
	  Error_Handler();
 80006f8:	f000 f85d 	bl	80007b6 <Error_Handler>
  }

  /* USER CODE END CAN_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40006400 	.word	0x40006400

0800070c <HAL_TIM_PWM_PulseFinishedCallback>:
//    	CAN_addMessage(&(RxHeader.ExtId), RxData);
//    }
}

void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM2)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800071c:	d10b      	bne.n	8000736 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
	{
		if(rotations-- == 0){
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	b291      	uxth	r1, r2
 8000726:	4a06      	ldr	r2, [pc, #24]	; (8000740 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8000728:	8011      	strh	r1, [r2, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d103      	bne.n	8000736 <HAL_TIM_PWM_PulseFinishedCallback+0x2a>
			HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 800072e:	2104      	movs	r1, #4
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8000732:	f002 fb79 	bl	8002e28 <HAL_TIM_PWM_Stop_IT>
		}

	}
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200001d0 	.word	0x200001d0
 8000744:	2000010c 	.word	0x2000010c

08000748 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uart3Flag = 1;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <HAL_UART_RxCpltCallback+0x18>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	2000020a 	.word	0x2000020a

08000764 <setTimestamp>:
}



void setTimestamp(uint32_t * time)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	*time = HAL_GetTick();
 800076c:	f000 f996 	bl	8000a9c <HAL_GetTick>
 8000770:	4602      	mov	r2, r0
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <getTimestamp>:

uint32_t getTimestamp()
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000782:	f000 f98b 	bl	8000a9c <HAL_GetTick>
 8000786:	4603      	mov	r3, r0
}
 8000788:	4618      	mov	r0, r3
 800078a:	bd80      	pop	{r7, pc}

0800078c <timeElapsed>:

bool timeElapsed(uint32_t * time, uint32_t elapsed)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
	return HAL_GetTick() - elapsed >= *(time);
 8000796:	f000 f981 	bl	8000a9c <HAL_GetTick>
 800079a:	4602      	mov	r2, r0
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	1ad2      	subs	r2, r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	bf2c      	ite	cs
 80007a8:	2301      	movcs	r3, #1
 80007aa:	2300      	movcc	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ba:	b672      	cpsid	i
}
 80007bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007be:	e7fe      	b.n	80007be <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_MspInit+0x40>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_MspInit+0x40>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_MspInit+0x40>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_MspInit+0x40>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_MspInit+0x40>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_MspInit+0x40>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <HAL_CAN_MspInit+0x8c>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d131      	bne.n	8000888 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_CAN_MspInit+0x90>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a1a      	ldr	r2, [pc, #104]	; (8000894 <HAL_CAN_MspInit+0x90>)
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082e:	61d3      	str	r3, [r2, #28]
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_CAN_MspInit+0x90>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_CAN_MspInit+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_CAN_MspInit+0x90>)
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_CAN_MspInit+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0304 	and.w	r3, r3, #4
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000854:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	480b      	ldr	r0, [pc, #44]	; (8000898 <HAL_CAN_MspInit+0x94>)
 800086a:	f000 fd8f 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800086e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_CAN_MspInit+0x94>)
 8000884:	f000 fd82 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40006400 	.word	0x40006400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 f8c9 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <TIM2_IRQHandler+0x10>)
 80008f2:	f002 fb4b 	bl	8002f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	2000010c 	.word	0x2000010c

08000900 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <SPI2_IRQHandler+0x10>)
 8000906:	f001 ff95 	bl	8002834 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000b4 	.word	0x200000b4

08000914 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USART3_IRQHandler+0x10>)
 800091a:	f002 fd41 	bl	80033a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000154 	.word	0x20000154

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f003 fa3c 	bl	8003dd4 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20005000 	.word	0x20005000
 8000988:	00000400 	.word	0x00000400
 800098c:	2000020c 	.word	0x2000020c
 8000990:	20000360 	.word	0x20000360

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a0:	f7ff fff8 	bl	8000994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009a6:	490c      	ldr	r1, [pc, #48]	; (80009d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ac:	e002      	b.n	80009b4 <LoopCopyDataInit>

080009ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b2:	3304      	adds	r3, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b8:	d3f9      	bcc.n	80009ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ba:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009bc:	4c09      	ldr	r4, [pc, #36]	; (80009e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c0:	e001      	b.n	80009c6 <LoopFillZerobss>

080009c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c4:	3204      	adds	r2, #4

080009c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c8:	d3fb      	bcc.n	80009c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 fa09 	bl	8003de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ce:	f7ff fbbd 	bl	800014c <main>
  bx lr
 80009d2:	4770      	bx	lr
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80009dc:	080047f4 	.word	0x080047f4
  ldr r2, =_sbss
 80009e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_2_IRQHandler>
	...

080009ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x28>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 fbdf 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff feda 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fbe9 	bl	800120e <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 fbbf 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000010 	.word	0x20000010
 8000a70:	20000018 	.word	0x20000018
 8000a74:	20000014 	.word	0x20000014

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x20>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <HAL_IncTick+0x20>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000018 	.word	0x20000018
 8000a98:	20000210 	.word	0x20000210

08000a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b02      	ldr	r3, [pc, #8]	; (8000aac <HAL_GetTick+0x10>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000210 	.word	0x20000210

08000ab0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e0ed      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fe98 	bl	8000804 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f042 0201 	orr.w	r2, r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae4:	f7ff ffda 	bl	8000a9c <HAL_GetTick>
 8000ae8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aea:	e012      	b.n	8000b12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aec:	f7ff ffd6 	bl	8000a9c <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	2b0a      	cmp	r3, #10
 8000af8:	d90b      	bls.n	8000b12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2205      	movs	r2, #5
 8000b0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e0c5      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0e5      	beq.n	8000aec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f022 0202 	bic.w	r2, r2, #2
 8000b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b30:	f7ff ffb4 	bl	8000a9c <HAL_GetTick>
 8000b34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b36:	e012      	b.n	8000b5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b38:	f7ff ffb0 	bl	8000a9c <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d90b      	bls.n	8000b5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2205      	movs	r2, #5
 8000b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e09f      	b.n	8000c9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1e5      	bne.n	8000b38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7e1b      	ldrb	r3, [r3, #24]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	e007      	b.n	8000b96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e5b      	ldrb	r3, [r3, #25]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d108      	bne.n	8000bb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7e9b      	ldrb	r3, [r3, #26]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d108      	bne.n	8000bda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0220 	orr.w	r2, r2, #32
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	e007      	b.n	8000bea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0220 	bic.w	r2, r2, #32
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7edb      	ldrb	r3, [r3, #27]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d108      	bne.n	8000c04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0210 	bic.w	r2, r2, #16
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e007      	b.n	8000c14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f042 0210 	orr.w	r2, r2, #16
 8000c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7f1b      	ldrb	r3, [r3, #28]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d108      	bne.n	8000c2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0208 	orr.w	r2, r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	e007      	b.n	8000c3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0208 	bic.w	r2, r2, #8
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	7f5b      	ldrb	r3, [r3, #29]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d108      	bne.n	8000c58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f042 0204 	orr.w	r2, r2, #4
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	431a      	orrs	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	ea42 0103 	orr.w	r1, r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b087      	sub	sp, #28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cbe:	7cfb      	ldrb	r3, [r7, #19]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d003      	beq.n	8000ccc <HAL_CAN_ConfigFilter+0x26>
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	f040 80aa 	bne.w	8000e20 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f003 031f 	and.w	r3, r3, #31
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d123      	bne.n	8000d4e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d28:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3248      	adds	r2, #72	; 0x48
 8000d2e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d42:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	3348      	adds	r3, #72	; 0x48
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d122      	bne.n	8000d9c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3248      	adds	r2, #72	; 0x48
 8000d7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d92:	6979      	ldr	r1, [r7, #20]
 8000d94:	3348      	adds	r3, #72	; 0x48
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d109      	bne.n	8000de4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000de2:	e007      	b.n	8000df4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e12:	f023 0201 	bic.w	r2, r3, #1
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e006      	b.n	8000e2e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
  }
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d12e      	bne.n	8000eaa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e64:	f7ff fe1a 	bl	8000a9c <HAL_GetTick>
 8000e68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e6a:	e012      	b.n	8000e92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e6c:	f7ff fe16 	bl	8000a9c <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b0a      	cmp	r3, #10
 8000e78:	d90b      	bls.n	8000e92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2205      	movs	r2, #5
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e012      	b.n	8000eb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1e5      	bne.n	8000e6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e006      	b.n	8000eb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
  }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d003      	beq.n	8000eec <HAL_CAN_AddTxMessage+0x2c>
 8000ee4:	7ffb      	ldrb	r3, [r7, #31]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f040 80ad 	bne.w	8001046 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10a      	bne.n	8000f0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8095 	beq.w	8001036 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	0e1b      	lsrs	r3, r3, #24
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f16:	2201      	movs	r2, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10d      	bne.n	8000f44 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	6809      	ldr	r1, [r1, #0]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3318      	adds	r3, #24
 8000f3c:	011b      	lsls	r3, r3, #4
 8000f3e:	440b      	add	r3, r1
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e00f      	b.n	8000f64 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f4e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f54:	68f9      	ldr	r1, [r7, #12]
 8000f56:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f58:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3318      	adds	r3, #24
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	440b      	add	r3, r1
 8000f62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6819      	ldr	r1, [r3, #0]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3318      	adds	r3, #24
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	440b      	add	r3, r1
 8000f74:	3304      	adds	r3, #4
 8000f76:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	7d1b      	ldrb	r3, [r3, #20]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d111      	bne.n	8000fa4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3318      	adds	r3, #24
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	6811      	ldr	r1, [r2, #0]
 8000f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3318      	adds	r3, #24
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	061a      	lsls	r2, r3, #24
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3306      	adds	r3, #6
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3305      	adds	r3, #5
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	3204      	adds	r2, #4
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	6811      	ldr	r1, [r2, #0]
 8000fcc:	ea43 0200 	orr.w	r2, r3, r0
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3303      	adds	r3, #3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	061a      	lsls	r2, r3, #24
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	041b      	lsls	r3, r3, #16
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	ea43 0200 	orr.w	r2, r3, r0
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	440b      	add	r3, r1
 800100c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001010:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3318      	adds	r3, #24
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	6811      	ldr	r1, [r2, #0]
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3318      	adds	r3, #24
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	440b      	add	r3, r1
 8001030:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e00e      	b.n	8001054 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e006      	b.n	8001054 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
  }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3724      	adds	r7, #36	; 0x24
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff90 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff49 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff5e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffb0 	bl	800117c <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001226:	b480      	push	{r7}
 8001228:	b085      	sub	sp, #20
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d008      	beq.n	8001250 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e020      	b.n	8001292 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020e 	bic.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f202 	lsl.w	r2, r1, r2
 800127e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d005      	beq.n	80012c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2204      	movs	r2, #4
 80012b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e051      	b.n	8001364 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 020e 	bic.w	r2, r2, #14
 80012ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_DMA_Abort_IT+0xd4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d029      	beq.n	800133e <HAL_DMA_Abort_IT+0xa2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <HAL_DMA_Abort_IT+0xd8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d022      	beq.n	800133a <HAL_DMA_Abort_IT+0x9e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_DMA_Abort_IT+0xdc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01a      	beq.n	8001334 <HAL_DMA_Abort_IT+0x98>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_DMA_Abort_IT+0xe0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d012      	beq.n	800132e <HAL_DMA_Abort_IT+0x92>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_DMA_Abort_IT+0xe4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00a      	beq.n	8001328 <HAL_DMA_Abort_IT+0x8c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <HAL_DMA_Abort_IT+0xe8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d102      	bne.n	8001322 <HAL_DMA_Abort_IT+0x86>
 800131c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001320:	e00e      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 8001322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001326:	e00b      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 8001328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132c:	e008      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	e005      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 8001334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001338:	e002      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 800133a:	2310      	movs	r3, #16
 800133c:	e000      	b.n	8001340 <HAL_DMA_Abort_IT+0xa4>
 800133e:	2301      	movs	r3, #1
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_DMA_Abort_IT+0xec>)
 8001342:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	4798      	blx	r3
    } 
  }
  return status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020008 	.word	0x40020008
 8001374:	4002001c 	.word	0x4002001c
 8001378:	40020030 	.word	0x40020030
 800137c:	40020044 	.word	0x40020044
 8001380:	40020058 	.word	0x40020058
 8001384:	4002006c 	.word	0x4002006c
 8001388:	40020000 	.word	0x40020000

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e169      	b.n	8001674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8158 	bne.w	800166e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a9a      	ldr	r2, [pc, #616]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d05e      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013c8:	4a98      	ldr	r2, [pc, #608]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d875      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013ce:	4a98      	ldr	r2, [pc, #608]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d058      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013d4:	4a96      	ldr	r2, [pc, #600]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d86f      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013da:	4a96      	ldr	r2, [pc, #600]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d052      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013e0:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d869      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013e6:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04c      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013ec:	4a92      	ldr	r2, [pc, #584]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d863      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013f2:	4a92      	ldr	r2, [pc, #584]	; (800163c <HAL_GPIO_Init+0x2b0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d046      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013f8:	4a90      	ldr	r2, [pc, #576]	; (800163c <HAL_GPIO_Init+0x2b0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d85d      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d82a      	bhi.n	8001458 <HAL_GPIO_Init+0xcc>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d859      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_Init+0x80>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001487 	.word	0x08001487
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	080014bb 	.word	0x080014bb
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014bb 	.word	0x080014bb
 800142c:	080014bb 	.word	0x080014bb
 8001430:	080014bb 	.word	0x080014bb
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014bb 	.word	0x080014bb
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014bb 	.word	0x080014bb
 8001444:	080014bb 	.word	0x080014bb
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014bb 	.word	0x080014bb
 8001450:	08001469 	.word	0x08001469
 8001454:	0800147d 	.word	0x0800147d
 8001458:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_GPIO_Init+0x2b4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e02c      	b.n	80014ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e029      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e024      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	3308      	adds	r3, #8
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e01f      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e01a      	b.n	80014bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148e:	2304      	movs	r3, #4
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e013      	b.n	80014bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	611a      	str	r2, [r3, #16]
          break;
 80014a6:	e009      	b.n	80014bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	615a      	str	r2, [r3, #20]
          break;
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x130>
          break;
 80014ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d801      	bhi.n	80014c6 <HAL_GPIO_Init+0x13a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_Init+0x13e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d802      	bhi.n	80014d8 <HAL_GPIO_Init+0x14c>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x152>
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3b08      	subs	r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	210f      	movs	r1, #15
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80b1 	beq.w	800166e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800150c:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2bc>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a40      	ldr	r2, [pc, #256]	; (800164c <HAL_GPIO_Init+0x2c0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1ec>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3f      	ldr	r2, [pc, #252]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1e8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3d      	ldr	r2, [pc, #244]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1e0>
 8001568:	2303      	movs	r3, #3
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 800156c:	2304      	movs	r3, #4
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001578:	2300      	movs	r3, #0
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158a:	492f      	ldr	r1, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x2bc>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	492c      	ldr	r1, [pc, #176]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4922      	ldr	r1, [pc, #136]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	491e      	ldr	r1, [pc, #120]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4918      	ldr	r1, [pc, #96]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_GPIO_Init+0x2d0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4914      	ldr	r1, [pc, #80]	; (800165c <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d021      	beq.n	8001660 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_GPIO_Init+0x2d0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e021      	b.n	800166e <HAL_GPIO_Init+0x2e2>
 800162a:	bf00      	nop
 800162c:	10320000 	.word	0x10320000
 8001630:	10310000 	.word	0x10310000
 8001634:	10220000 	.word	0x10220000
 8001638:	10210000 	.word	0x10210000
 800163c:	10120000 	.word	0x10120000
 8001640:	10110000 	.word	0x10110000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40011400 	.word	0x40011400
 800165c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4909      	ldr	r1, [pc, #36]	; (8001690 <HAL_GPIO_Init+0x304>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f ae8e 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	372c      	adds	r7, #44	; 0x2c
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	e001      	b.n	80016b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016de:	e003      	b.n	80016e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e0:	887b      	ldrh	r3, [r7, #2]
 80016e2:	041a      	lsls	r2, r3, #16
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e272      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8087 	beq.w	8001822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001714:	4b92      	ldr	r3, [pc, #584]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 030c 	and.w	r3, r3, #12
 800171c:	2b04      	cmp	r3, #4
 800171e:	d00c      	beq.n	800173a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001720:	4b8f      	ldr	r3, [pc, #572]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d112      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
 800172c:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d10b      	bne.n	8001752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173a:	4b89      	ldr	r3, [pc, #548]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d06c      	beq.n	8001820 <HAL_RCC_OscConfig+0x12c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d168      	bne.n	8001820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e24c      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175a:	d106      	bne.n	800176a <HAL_RCC_OscConfig+0x76>
 800175c:	4b80      	ldr	r3, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a7f      	ldr	r2, [pc, #508]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e02e      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10c      	bne.n	800178c <HAL_RCC_OscConfig+0x98>
 8001772:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b78      	ldr	r3, [pc, #480]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a77      	ldr	r2, [pc, #476]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xbc>
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a71      	ldr	r2, [pc, #452]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b6f      	ldr	r3, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6e      	ldr	r2, [pc, #440]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xd4>
 80017b0:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b68      	ldr	r3, [pc, #416]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a67      	ldr	r2, [pc, #412]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff f964 	bl	8000a9c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff f960 	bl	8000a9c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e200      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xe4>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f950 	bl	8000a9c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f94c 	bl	8000a9c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1ec      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x10c>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182e:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
 8001846:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c0      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4939      	ldr	r1, [pc, #228]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f905 	bl	8000a9c <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f901 	bl	8000a9c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4927      	ldr	r1, [pc, #156]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f8e4 	bl	8000a9c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff f8e0 	bl	8000a9c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e180      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03a      	beq.n	8001978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d019      	beq.n	800193e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff f8c4 	bl	8000a9c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff f8c0 	bl	8000a9c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e160      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_RCC_OscConfig+0x26c>)
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001936:	2001      	movs	r0, #1
 8001938:	f000 fa9c 	bl	8001e74 <RCC_Delay>
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff f8aa 	bl	8000a9c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194a:	e00f      	b.n	800196c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194c:	f7ff f8a6 	bl	8000a9c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d908      	bls.n	800196c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e146      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	42420000 	.word	0x42420000
 8001968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1e9      	bne.n	800194c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a6 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b88      	ldr	r3, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a87      	ldr	r2, [pc, #540]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]
 80019a2:	4b85      	ldr	r3, [pc, #532]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7e      	ldr	r2, [pc, #504]	; (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff f867 	bl	8000a9c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff f863 	bl	8000a9c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e103      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b75      	ldr	r3, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4c8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x312>
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4a6e      	ldr	r2, [pc, #440]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6213      	str	r3, [r2, #32]
 8001a04:	e02d      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x334>
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a69      	ldr	r2, [pc, #420]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a66      	ldr	r2, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
 8001a26:	e01c      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x356>
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4a60      	ldr	r2, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6213      	str	r3, [r2, #32]
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6213      	str	r3, [r2, #32]
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0x36e>
 8001a4a:	4b5b      	ldr	r3, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a57      	ldr	r2, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f817 	bl	8000a9c <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff f813 	bl	8000a9c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0b1      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ee      	beq.n	8001a72 <HAL_RCC_OscConfig+0x37e>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f801 	bl	8000a9c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7fe fffd 	bl	8000a9c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e09b      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a3b      	ldr	r2, [pc, #236]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8087 	beq.w	8001bea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d061      	beq.n	8001bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d146      	bne.n	8001b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7fe ffd1 	bl	8000a9c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afe:	f7fe ffcd 	bl	8000a9c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e06d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d108      	bne.n	8001b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b26:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4921      	ldr	r1, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a19      	ldr	r1, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe ffa1 	bl	8000a9c <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5e:	f7fe ff9d 	bl	8000a9c <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46a>
 8001b7c:	e035      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7fe ff8a 	bl	8000a9c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe ff86 	bl	8000a9c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e026      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x498>
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e019      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40007000 	.word	0x40007000
 8001bc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_OscConfig+0x500>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0d0      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b67      	ldr	r3, [pc, #412]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	4965      	ldr	r1, [pc, #404]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b8      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c54:	4b59      	ldr	r3, [pc, #356]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d005      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c78:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	494d      	ldr	r1, [pc, #308]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d040      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d115      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e07f      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e073      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4936      	ldr	r1, [pc, #216]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7fe fed8 	bl	8000a9c <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7fe fed4 	bl	8000a9c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e053      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d210      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e032      	b.n	8001dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4916      	ldr	r1, [pc, #88]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d86:	f000 f821 	bl	8001dcc <HAL_RCC_GetSysClockFreq>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490a      	ldr	r1, [pc, #40]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fe36 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	08004794 	.word	0x08004794
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000014 	.word	0x20000014

08001dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x30>
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x36>
 8001dfa:	e027      	b.n	8001e4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	e027      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	0c9b      	lsrs	r3, r3, #18
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	0c5b      	lsrs	r3, r3, #17
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	e004      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e40:	fb02 f303 	mul.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	613b      	str	r3, [r7, #16]
      break;
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4e:	613b      	str	r3, [r7, #16]
      break;
 8001e50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e52:	693b      	ldr	r3, [r7, #16]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	080047a4 	.word	0x080047a4
 8001e6c:	080047b4 	.word	0x080047b4
 8001e70:	003d0900 	.word	0x003d0900

08001e74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <RCC_Delay+0x34>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <RCC_Delay+0x38>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e90:	bf00      	nop
  }
  while (Delay --);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1e5a      	subs	r2, r3, #1
 8001e96:	60fa      	str	r2, [r7, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f9      	bne.n	8001e90 <RCC_Delay+0x1c>
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d07d      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10d      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	4b4c      	ldr	r3, [pc, #304]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	61d3      	str	r3, [r2, #28]
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d118      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a42      	ldr	r2, [pc, #264]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7fe fdc4 	bl	8000a9c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	e008      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe fdc0 	bl	8000a9c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e06d      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02e      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d027      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f6a:	4a29      	ldr	r2, [pc, #164]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d014      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fd8f 	bl	8000a9c <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7fe fd8b 	bl	8000a9c <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e036      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4917      	ldr	r1, [pc, #92]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb6:	7dfb      	ldrb	r3, [r7, #23]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a13      	ldr	r2, [pc, #76]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	490b      	ldr	r1, [pc, #44]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4904      	ldr	r1, [pc, #16]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	42420440 	.word	0x42420440

0800201c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_SPI_Transmit+0x22>
 800203a:	2302      	movs	r3, #2
 800203c:	e12d      	b.n	800229a <HAL_SPI_Transmit+0x27e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002046:	f7fe fd29 	bl	8000a9c <HAL_GetTick>
 800204a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d002      	beq.n	8002062 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800205c:	2302      	movs	r3, #2
 800205e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002060:	e116      	b.n	8002290 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SPI_Transmit+0x52>
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002072:	e10d      	b.n	8002290 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2203      	movs	r2, #3
 8002078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ba:	d10f      	bne.n	80020dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	2b40      	cmp	r3, #64	; 0x40
 80020e8:	d007      	beq.n	80020fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002102:	d14f      	bne.n	80021a4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_SPI_Transmit+0xf6>
 800210c:	8afb      	ldrh	r3, [r7, #22]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d142      	bne.n	8002198 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002136:	e02f      	b.n	8002198 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d112      	bne.n	800216c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	881a      	ldrh	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	1c9a      	adds	r2, r3, #2
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	86da      	strh	r2, [r3, #54]	; 0x36
 800216a:	e015      	b.n	8002198 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800216c:	f7fe fc96 	bl	8000a9c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d803      	bhi.n	8002184 <HAL_SPI_Transmit+0x168>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d102      	bne.n	800218a <HAL_SPI_Transmit+0x16e>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002196:	e07b      	b.n	8002290 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ca      	bne.n	8002138 <HAL_SPI_Transmit+0x11c>
 80021a2:	e050      	b.n	8002246 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x196>
 80021ac:	8afb      	ldrh	r3, [r7, #22]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d144      	bne.n	800223c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021d8:	e030      	b.n	800223c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d113      	bne.n	8002210 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	7812      	ldrb	r2, [r2, #0]
 80021f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	1c5a      	adds	r2, r3, #1
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	; 0x36
 800220e:	e015      	b.n	800223c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002210:	f7fe fc44 	bl	8000a9c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d803      	bhi.n	8002228 <HAL_SPI_Transmit+0x20c>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d102      	bne.n	800222e <HAL_SPI_Transmit+0x212>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800223a:	e029      	b.n	8002290 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1c9      	bne.n	80021da <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fcc8 	bl	8002be0 <SPI_EndRxTxTransaction>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e003      	b.n	8002290 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002298:	7ffb      	ldrb	r3, [r7, #31]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b088      	sub	sp, #32
 80022a6:	af02      	add	r7, sp, #8
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022c6:	e0fb      	b.n	80024c0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d0:	d112      	bne.n	80022f8 <HAL_SPI_Receive+0x56>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10e      	bne.n	80022f8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2204      	movs	r2, #4
 80022de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8ef 	bl	80024d2 <HAL_SPI_TransmitReceive>
 80022f4:	4603      	mov	r3, r0
 80022f6:	e0e8      	b.n	80024ca <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Receive+0x64>
 8002302:	2302      	movs	r3, #2
 8002304:	e0e1      	b.n	80024ca <HAL_SPI_Receive+0x228>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230e:	f7fe fbc5 	bl	8000a9c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_Receive+0x7e>
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002324:	e0cc      	b.n	80024c0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2204      	movs	r2, #4
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800236c:	d10f      	bne.n	800238e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b40      	cmp	r3, #64	; 0x40
 800239a:	d007      	beq.n	80023ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d16a      	bne.n	800248a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023b4:	e032      	b.n	800241c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d115      	bne.n	80023f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f103 020c 	add.w	r2, r3, #12
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ee:	e015      	b.n	800241c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023f0:	f7fe fb54 	bl	8000a9c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d803      	bhi.n	8002408 <HAL_SPI_Receive+0x166>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d102      	bne.n	800240e <HAL_SPI_Receive+0x16c>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800241a:	e051      	b.n	80024c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002420:	b29b      	uxth	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1c7      	bne.n	80023b6 <HAL_SPI_Receive+0x114>
 8002426:	e035      	b.n	8002494 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d113      	bne.n	800245e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	b292      	uxth	r2, r2
 8002442:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	1c9a      	adds	r2, r3, #2
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245c:	e015      	b.n	800248a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245e:	f7fe fb1d 	bl	8000a9c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d803      	bhi.n	8002476 <HAL_SPI_Receive+0x1d4>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002474:	d102      	bne.n	800247c <HAL_SPI_Receive+0x1da>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002488:	e01a      	b.n	80024c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1c9      	bne.n	8002428 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	6839      	ldr	r1, [r7, #0]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fb4f 	bl	8002b3c <SPI_EndRxTransaction>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e003      	b.n	80024c0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b08c      	sub	sp, #48	; 0x30
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_SPI_TransmitReceive+0x26>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e198      	b.n	800282a <HAL_SPI_TransmitReceive+0x358>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002500:	f7fe facc 	bl	8000a9c <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800250c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800251a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800251e:	2b01      	cmp	r3, #1
 8002520:	d00f      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x70>
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002528:	d107      	bne.n	800253a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_SPI_TransmitReceive+0x68>
 8002532:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002536:	2b04      	cmp	r3, #4
 8002538:	d003      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002540:	e16d      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x82>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_SPI_TransmitReceive+0x82>
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800255a:	e160      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b04      	cmp	r3, #4
 8002566:	d003      	beq.n	8002570 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2205      	movs	r2, #5
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	887a      	ldrh	r2, [r7, #2]
 8002580:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	887a      	ldrh	r2, [r7, #2]
 8002586:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d007      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025cc:	d17c      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x10a>
 80025d6:	8b7b      	ldrh	r3, [r7, #26]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d16a      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002600:	e057      	b.n	80026b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b02      	cmp	r3, #2
 800260e:	d11b      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x176>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_SPI_TransmitReceive+0x176>
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d113      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	1c9a      	adds	r2, r3, #2
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800263a:	b29b      	uxth	r3, r3
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d119      	bne.n	800268a <HAL_SPI_TransmitReceive+0x1b8>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	b292      	uxth	r2, r2
 800266c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	1c9a      	adds	r2, r3, #2
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002686:	2301      	movs	r3, #1
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800268a:	f7fe fa07 	bl	8000a9c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002696:	429a      	cmp	r2, r3
 8002698:	d80b      	bhi.n	80026b2 <HAL_SPI_TransmitReceive+0x1e0>
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a0:	d007      	beq.n	80026b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80026b0:	e0b5      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1a2      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x130>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d19d      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x130>
 80026c6:	e080      	b.n	80027ca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_SPI_TransmitReceive+0x204>
 80026d0:	8b7b      	ldrh	r3, [r7, #26]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d16f      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fc:	e05b      	b.n	80027b6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b02      	cmp	r3, #2
 800270a:	d11c      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x274>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d017      	beq.n	8002746 <HAL_SPI_TransmitReceive+0x274>
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d114      	bne.n	8002746 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d119      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x2b6>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002784:	2301      	movs	r3, #1
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002788:	f7fe f988 	bl	8000a9c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002794:	429a      	cmp	r2, r3
 8002796:	d803      	bhi.n	80027a0 <HAL_SPI_TransmitReceive+0x2ce>
 8002798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279e:	d102      	bne.n	80027a6 <HAL_SPI_TransmitReceive+0x2d4>
 80027a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80027b4:	e033      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d19e      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x22c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d199      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fa06 	bl	8002be0 <SPI_EndRxTxTransaction>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027e6:	e01a      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002814:	e003      	b.n	800281e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800282a:	4618      	mov	r0, r3
 800282c:	3730      	adds	r7, #48	; 0x30
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10e      	bne.n	8002874 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d009      	beq.n	8002874 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
    return;
 8002872:	e0b7      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_SPI_IRQHandler+0x5e>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
    return;
 8002890:	e0a8      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_SPI_IRQHandler+0x74>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 809e 	beq.w	80029e4 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8098 	beq.w	80029e4 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d011      	beq.n	80028ee <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	e00b      	b.n	8002906 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
        return;
 8002904:	e06e      	b.n	80029e4 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d014      	beq.n	800293a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04f      	beq.n	80029e2 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002950:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <HAL_SPI_IRQHandler+0x13a>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d034      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0203 	bic.w	r2, r2, #3
 800297c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d011      	beq.n	80029aa <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	4a18      	ldr	r2, [pc, #96]	; (80029ec <HAL_SPI_IRQHandler+0x1b8>)
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fc82 	bl	800129c <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b6:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_SPI_IRQHandler+0x1b8>)
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fc6c 	bl	800129c <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00a      	beq.n	80029e0 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80029d6:	e003      	b.n	80029e0 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f809 	bl	80029f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029de:	e000      	b.n	80029e2 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 80029e0:	bf00      	nop
    return;
 80029e2:	bf00      	nop
  }
}
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08002a03 	.word	0x08002a03

080029f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7ff ffe7 	bl	80029f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a3c:	f7fe f82e 	bl	8000a9c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a4c:	f7fe f826 	bl	8000a9c <HAL_GetTick>
 8002a50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	0d1b      	lsrs	r3, r3, #20
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a62:	e054      	b.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d050      	beq.n	8002b0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a6c:	f7fe f816 	bl	8000a9c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d902      	bls.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d13d      	bne.n	8002afe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a9a:	d111      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa4:	d004      	beq.n	8002ab0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d107      	bne.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002abe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac8:	d10f      	bne.n	8002aea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e017      	b.n	8002b2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4013      	ands	r3, r2
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d19b      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000010 	.word	0x20000010

08002b3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b50:	d111      	bne.n	8002b76 <SPI_EndRxTransaction+0x3a>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5a:	d004      	beq.n	8002b66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b64:	d107      	bne.n	8002b76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b74:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b7e:	d117      	bne.n	8002bb0 <SPI_EndRxTransaction+0x74>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b88:	d112      	bne.n	8002bb0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2101      	movs	r1, #1
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff ff49 	bl	8002a2c <SPI_WaitFlagStateUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e013      	b.n	8002bd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2180      	movs	r1, #128	; 0x80
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff ff36 	bl	8002a2c <SPI_WaitFlagStateUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bca:	f043 0220 	orr.w	r2, r3, #32
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e000      	b.n	8002bd8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f7ff ff18 	bl	8002a2c <SPI_WaitFlagStateUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0220 	orr.w	r2, r3, #32
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e000      	b.n	8002c14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d109      	bne.n	8002c40 <HAL_TIM_PWM_Start+0x24>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e022      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d109      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x3e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	bf14      	ite	ne
 8002c52:	2301      	movne	r3, #1
 8002c54:	2300      	moveq	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e015      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d109      	bne.n	8002c74 <HAL_TIM_PWM_Start+0x58>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e008      	b.n	8002c86 <HAL_TIM_PWM_Start+0x6a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e05e      	b.n	8002d4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0x82>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	e013      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0x92>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xa2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	e003      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xaa>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa88 	bl	80031e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_TIM_PWM_Start+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_TIM_PWM_Start+0x138>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <HAL_TIM_PWM_Start+0xfa>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d00:	d009      	beq.n	8002d16 <HAL_TIM_PWM_Start+0xfa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIM_PWM_Start+0x13c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_TIM_PWM_Start+0xfa>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_TIM_PWM_Start+0x140>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b06      	cmp	r3, #6
 8002d26:	d010      	beq.n	8002d4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0201 	orr.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d38:	e007      	b.n	8002d4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800

08002d60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fa36 	bl	80031e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_TIM_PWM_Stop+0xc4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d117      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10f      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	f240 4344 	movw	r3, #1092	; 0x444
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_PWM_Stop+0x52>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10f      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	f240 4344 	movw	r3, #1092	; 0x444
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_TIM_PWM_Stop+0x82>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Stop+0x92>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df0:	e013      	b.n	8002e1a <HAL_TIM_PWM_Stop+0xba>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Stop+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e00:	e00b      	b.n	8002e1a <HAL_TIM_PWM_Stop+0xba>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Stop+0xb2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_PWM_Stop+0xba>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40012c00 	.word	0x40012c00

08002e28 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b0c      	cmp	r3, #12
 8002e3a:	d841      	bhi.n	8002ec0 <HAL_TIM_PWM_Stop_IT+0x98>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e79 	.word	0x08002e79
 8002e48:	08002ec1 	.word	0x08002ec1
 8002e4c:	08002ec1 	.word	0x08002ec1
 8002e50:	08002ec1 	.word	0x08002ec1
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002ec1 	.word	0x08002ec1
 8002e5c:	08002ec1 	.word	0x08002ec1
 8002e60:	08002ec1 	.word	0x08002ec1
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002ec1 	.word	0x08002ec1
 8002e6c:	08002ec1 	.word	0x08002ec1
 8002e70:	08002ec1 	.word	0x08002ec1
 8002e74:	08002eaf 	.word	0x08002eaf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0202 	bic.w	r2, r2, #2
 8002e86:	60da      	str	r2, [r3, #12]
      break;
 8002e88:	e01d      	b.n	8002ec6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0204 	bic.w	r2, r2, #4
 8002e98:	60da      	str	r2, [r3, #12]
      break;
 8002e9a:	e014      	b.n	8002ec6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0208 	bic.w	r2, r2, #8
 8002eaa:	60da      	str	r2, [r3, #12]
      break;
 8002eac:	e00b      	b.n	8002ec6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0210 	bic.w	r2, r2, #16
 8002ebc:	60da      	str	r2, [r3, #12]
      break;
 8002ebe:	e002      	b.n	8002ec6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d157      	bne.n	8002f7c <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6839      	ldr	r1, [r7, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 f985 	bl	80031e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <HAL_TIM_PWM_Stop_IT+0x160>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d117      	bne.n	8002f14 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_TIM_PWM_Stop_IT+0xec>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	f240 4344 	movw	r3, #1092	; 0x444
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d107      	bne.n	8002f14 <HAL_TIM_PWM_Stop_IT+0xec>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6a1a      	ldr	r2, [r3, #32]
 8002f2a:	f240 4344 	movw	r3, #1092	; 0x444
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_TIM_PWM_Stop_IT+0x11c>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d104      	bne.n	8002f54 <HAL_TIM_PWM_Stop_IT+0x12c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f52:	e013      	b.n	8002f7c <HAL_TIM_PWM_Stop_IT+0x154>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d104      	bne.n	8002f64 <HAL_TIM_PWM_Stop_IT+0x13c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f62:	e00b      	b.n	8002f7c <HAL_TIM_PWM_Stop_IT+0x154>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d104      	bne.n	8002f74 <HAL_TIM_PWM_Stop_IT+0x14c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f72:	e003      	b.n	8002f7c <HAL_TIM_PWM_Stop_IT+0x154>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40012c00 	.word	0x40012c00

08002f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0202 	mvn.w	r2, #2
 8002fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8f6 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8e9 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7fd fb95 	bl	800070c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0204 	mvn.w	r2, #4
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2202      	movs	r2, #2
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8cc 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8bf 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fb6b 	bl	800070c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b08      	cmp	r3, #8
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b08      	cmp	r3, #8
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0208 	mvn.w	r2, #8
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2204      	movs	r2, #4
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8a2 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f895 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fd fb41 	bl	800070c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b10      	cmp	r3, #16
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0210 	mvn.w	r2, #16
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2208      	movs	r2, #8
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f878 	bl	80031c0 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f86b 	bl	80031ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd fb17 	bl	800070c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d10e      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0201 	mvn.w	r2, #1
 8003108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f846 	bl	800319c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f881 	bl	800323e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f835 	bl	80031d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b20      	cmp	r3, #32
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0220 	mvn.w	r2, #32
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f84c 	bl	800322c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2201      	movs	r2, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a1a      	ldr	r2, [r3, #32]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	43db      	mvns	r3, r3
 8003206:	401a      	ands	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	d16d      	bne.n	800334c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Transmit+0x2c>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e066      	b.n	800334e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2221      	movs	r2, #33	; 0x21
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328e:	f7fd fc05 	bl	8000a9c <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	88fa      	ldrh	r2, [r7, #6]
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d108      	bne.n	80032bc <HAL_UART_Transmit+0x6c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d104      	bne.n	80032bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e003      	b.n	80032c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c4:	e02a      	b.n	800331c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fb14 	bl	80038fe <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e036      	b.n	800334e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	3302      	adds	r3, #2
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	e007      	b.n	800330e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	781a      	ldrb	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3301      	adds	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1cf      	bne.n	80032c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2200      	movs	r2, #0
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fae4 	bl	80038fe <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e006      	b.n	800334e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b20      	cmp	r3, #32
 800336e:	d112      	bne.n	8003396 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_UART_Receive_IT+0x26>
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e00b      	b.n	8003398 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	461a      	mov	r2, r3
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fb24 	bl	80039da <UART_Start_Receive_IT>
 8003392:	4603      	mov	r3, r0
 8003394:	e000      	b.n	8003398 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0ba      	sub	sp, #232	; 0xe8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
 80033f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fc01 	bl	8003c06 <UART_Receive_IT>
      return;
 8003404:	e25b      	b.n	80038be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80de 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80d1 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
 800345a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
 800347e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f043 0208 	orr.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 81f2 	beq.w	80038b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fb8c 	bl	8003c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_UART_IRQHandler+0x17a>
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04f      	beq.n	80035ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa96 	bl	8003a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d041      	beq.n	80035b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1d9      	bne.n	800352e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	4a7e      	ldr	r2, [pc, #504]	; (8003780 <HAL_UART_IRQHandler+0x3e0>)
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fe84 	bl	800129c <HAL_DMA_Abort_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00e      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f993 	bl	80038d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e00a      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f98f 	bl	80038d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	e006      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f98b 	bl	80038d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035c6:	e175      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	bf00      	nop
    return;
 80035ca:	e173      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 814f 	bne.w	8003874 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8148 	beq.w	8003874 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8141 	beq.w	8003874 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80b6 	beq.w	8003784 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8145 	beq.w	80038b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003636:	429a      	cmp	r2, r3
 8003638:	f080 813e 	bcs.w	80038b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b20      	cmp	r3, #32
 800364c:	f000 8088 	beq.w	8003760 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003666:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800366a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800366e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	330c      	adds	r3, #12
 8003678:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800367c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003684:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003688:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1d9      	bne.n	8003650 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e1      	bne.n	800369c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3314      	adds	r3, #20
 80036de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e2:	e853 3f00 	ldrex	r3, [r3]
 80036e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800370a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e3      	bne.n	80036d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800372e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003730:	f023 0310 	bic.w	r3, r3, #16
 8003734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003742:	65ba      	str	r2, [r7, #88]	; 0x58
 8003744:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e3      	bne.n	800371e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fd63 	bl	8001226 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376e:	b29b      	uxth	r3, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8b6 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800377c:	e09c      	b.n	80038b8 <HAL_UART_IRQHandler+0x518>
 800377e:	bf00      	nop
 8003780:	08003b11 	.word	0x08003b11
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 808e 	beq.w	80038bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8089 	beq.w	80038bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ce:	647a      	str	r2, [r7, #68]	; 0x44
 80037d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e3      	bne.n	80037aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3314      	adds	r3, #20
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	623b      	str	r3, [r7, #32]
   return(result);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3314      	adds	r3, #20
 8003802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003806:	633a      	str	r2, [r7, #48]	; 0x30
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e3      	bne.n	80037e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	330c      	adds	r3, #12
 800382e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	60fb      	str	r3, [r7, #12]
   return(result);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0310 	bic.w	r3, r3, #16
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800384c:	61fa      	str	r2, [r7, #28]
 800384e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	69b9      	ldr	r1, [r7, #24]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	617b      	str	r3, [r7, #20]
   return(result);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e3      	bne.n	8003828 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f83b 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003872:	e023      	b.n	80038bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_UART_IRQHandler+0x4f4>
 8003880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f953 	bl	8003b38 <UART_Transmit_IT>
    return;
 8003892:	e014      	b.n	80038be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00e      	beq.n	80038be <HAL_UART_IRQHandler+0x51e>
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d008      	beq.n	80038be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f992 	bl	8003bd6 <UART_EndTransmit_IT>
    return;
 80038b2:	e004      	b.n	80038be <HAL_UART_IRQHandler+0x51e>
    return;
 80038b4:	bf00      	nop
 80038b6:	e002      	b.n	80038be <HAL_UART_IRQHandler+0x51e>
      return;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_UART_IRQHandler+0x51e>
      return;
 80038bc:	bf00      	nop
  }
}
 80038be:	37e8      	adds	r7, #232	; 0xe8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b090      	sub	sp, #64	; 0x40
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800390e:	e050      	b.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d04c      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <UART_WaitOnFlagUntilTimeout+0x30>
 800391e:	f7fd f8bd 	bl	8000a9c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392a:	429a      	cmp	r2, r3
 800392c:	d241      	bcs.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	330c      	adds	r3, #12
 800394c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800394e:	637a      	str	r2, [r7, #52]	; 0x34
 8003950:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003956:	e841 2300 	strex	r3, r2, [r1]
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1e5      	bne.n	800392e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	613b      	str	r3, [r7, #16]
   return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003982:	623a      	str	r2, [r7, #32]
 8003984:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	69f9      	ldr	r1, [r7, #28]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e5      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e00f      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d09f      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3740      	adds	r7, #64	; 0x40
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2222      	movs	r2, #34	; 0x22
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695a      	ldr	r2, [r3, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b095      	sub	sp, #84	; 0x54
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a74:	643a      	str	r2, [r7, #64]	; 0x40
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	647b      	str	r3, [r7, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	613b      	str	r3, [r7, #16]
   return(result);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b06:	bf00      	nop
 8003b08:	3754      	adds	r7, #84	; 0x54
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fed3 	bl	80038d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b21      	cmp	r3, #33	; 0x21
 8003b4a:	d13e      	bne.n	8003bca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d114      	bne.n	8003b80 <UART_Transmit_IT+0x48>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]
 8003b7e:	e008      	b.n	8003b92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6211      	str	r1, [r2, #32]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff fe64 	bl	80038c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b08c      	sub	sp, #48	; 0x30
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b22      	cmp	r3, #34	; 0x22
 8003c18:	f040 80ae 	bne.w	8003d78 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d117      	bne.n	8003c56 <UART_Receive_IT+0x50>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
 8003c54:	e026      	b.n	8003ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d007      	beq.n	8003c7a <UART_Receive_IT+0x74>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <UART_Receive_IT+0x82>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e008      	b.n	8003c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d15d      	bne.n	8003d74 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0220 	bic.w	r2, r2, #32
 8003cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d135      	bne.n	8003d6a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d24:	623a      	str	r2, [r7, #32]
 8003d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	69f9      	ldr	r1, [r7, #28]
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d10a      	bne.n	8003d5c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff fdc0 	bl	80038e8 <HAL_UARTEx_RxEventCallback>
 8003d68:	e002      	b.n	8003d70 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fcec 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e002      	b.n	8003d7a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3730      	adds	r7, #48	; 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8a:	b500      	push	{lr}
 8003d8c:	b09c      	sub	sp, #112	; 0x70
 8003d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d90:	9002      	str	r0, [sp, #8]
 8003d92:	9006      	str	r0, [sp, #24]
 8003d94:	9107      	str	r1, [sp, #28]
 8003d96:	9104      	str	r1, [sp, #16]
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <siprintf+0x38>)
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	a902      	add	r1, sp, #8
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	f000 f99c 	bl	80040e4 <_svfiprintf_r>
 8003dac:	2200      	movs	r2, #0
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	20000068 	.word	0x20000068
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <memset>:
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4402      	add	r2, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <__errno>:
 8003dd4:	4b01      	ldr	r3, [pc, #4]	; (8003ddc <__errno+0x8>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	20000068 	.word	0x20000068

08003de0 <__libc_init_array>:
 8003de0:	b570      	push	{r4, r5, r6, lr}
 8003de2:	2600      	movs	r6, #0
 8003de4:	4d0c      	ldr	r5, [pc, #48]	; (8003e18 <__libc_init_array+0x38>)
 8003de6:	4c0d      	ldr	r4, [pc, #52]	; (8003e1c <__libc_init_array+0x3c>)
 8003de8:	1b64      	subs	r4, r4, r5
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	42a6      	cmp	r6, r4
 8003dee:	d109      	bne.n	8003e04 <__libc_init_array+0x24>
 8003df0:	f000 fc7a 	bl	80046e8 <_init>
 8003df4:	2600      	movs	r6, #0
 8003df6:	4d0a      	ldr	r5, [pc, #40]	; (8003e20 <__libc_init_array+0x40>)
 8003df8:	4c0a      	ldr	r4, [pc, #40]	; (8003e24 <__libc_init_array+0x44>)
 8003dfa:	1b64      	subs	r4, r4, r5
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	42a6      	cmp	r6, r4
 8003e00:	d105      	bne.n	8003e0e <__libc_init_array+0x2e>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e08:	4798      	blx	r3
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7ee      	b.n	8003dec <__libc_init_array+0xc>
 8003e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e12:	4798      	blx	r3
 8003e14:	3601      	adds	r6, #1
 8003e16:	e7f2      	b.n	8003dfe <__libc_init_array+0x1e>
 8003e18:	080047ec 	.word	0x080047ec
 8003e1c:	080047ec 	.word	0x080047ec
 8003e20:	080047ec 	.word	0x080047ec
 8003e24:	080047f0 	.word	0x080047f0

08003e28 <__retarget_lock_acquire_recursive>:
 8003e28:	4770      	bx	lr

08003e2a <__retarget_lock_release_recursive>:
 8003e2a:	4770      	bx	lr

08003e2c <memcpy>:
 8003e2c:	440a      	add	r2, r1
 8003e2e:	4291      	cmp	r1, r2
 8003e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e34:	d100      	bne.n	8003e38 <memcpy+0xc>
 8003e36:	4770      	bx	lr
 8003e38:	b510      	push	{r4, lr}
 8003e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e3e:	4291      	cmp	r1, r2
 8003e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e44:	d1f9      	bne.n	8003e3a <memcpy+0xe>
 8003e46:	bd10      	pop	{r4, pc}

08003e48 <_free_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	d040      	beq.n	8003ed2 <_free_r+0x8a>
 8003e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e54:	1f0c      	subs	r4, r1, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bfb8      	it	lt
 8003e5a:	18e4      	addlt	r4, r4, r3
 8003e5c:	f000 f8dc 	bl	8004018 <__malloc_lock>
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <_free_r+0x8c>)
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	b933      	cbnz	r3, 8003e74 <_free_r+0x2c>
 8003e66:	6063      	str	r3, [r4, #4]
 8003e68:	6014      	str	r4, [r2, #0]
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e70:	f000 b8d8 	b.w	8004024 <__malloc_unlock>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d908      	bls.n	8003e8a <_free_r+0x42>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	1821      	adds	r1, r4, r0
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	bf01      	itttt	eq
 8003e80:	6819      	ldreq	r1, [r3, #0]
 8003e82:	685b      	ldreq	r3, [r3, #4]
 8003e84:	1809      	addeq	r1, r1, r0
 8003e86:	6021      	streq	r1, [r4, #0]
 8003e88:	e7ed      	b.n	8003e66 <_free_r+0x1e>
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	b10b      	cbz	r3, 8003e94 <_free_r+0x4c>
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d9fa      	bls.n	8003e8a <_free_r+0x42>
 8003e94:	6811      	ldr	r1, [r2, #0]
 8003e96:	1850      	adds	r0, r2, r1
 8003e98:	42a0      	cmp	r0, r4
 8003e9a:	d10b      	bne.n	8003eb4 <_free_r+0x6c>
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	4401      	add	r1, r0
 8003ea0:	1850      	adds	r0, r2, r1
 8003ea2:	4283      	cmp	r3, r0
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	d1e0      	bne.n	8003e6a <_free_r+0x22>
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	4408      	add	r0, r1
 8003eae:	6010      	str	r0, [r2, #0]
 8003eb0:	6053      	str	r3, [r2, #4]
 8003eb2:	e7da      	b.n	8003e6a <_free_r+0x22>
 8003eb4:	d902      	bls.n	8003ebc <_free_r+0x74>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	602b      	str	r3, [r5, #0]
 8003eba:	e7d6      	b.n	8003e6a <_free_r+0x22>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	1821      	adds	r1, r4, r0
 8003ec0:	428b      	cmp	r3, r1
 8003ec2:	bf01      	itttt	eq
 8003ec4:	6819      	ldreq	r1, [r3, #0]
 8003ec6:	685b      	ldreq	r3, [r3, #4]
 8003ec8:	1809      	addeq	r1, r1, r0
 8003eca:	6021      	streq	r1, [r4, #0]
 8003ecc:	6063      	str	r3, [r4, #4]
 8003ece:	6054      	str	r4, [r2, #4]
 8003ed0:	e7cb      	b.n	8003e6a <_free_r+0x22>
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000354 	.word	0x20000354

08003ed8 <sbrk_aligned>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	4e0e      	ldr	r6, [pc, #56]	; (8003f14 <sbrk_aligned+0x3c>)
 8003edc:	460c      	mov	r4, r1
 8003ede:	6831      	ldr	r1, [r6, #0]
 8003ee0:	4605      	mov	r5, r0
 8003ee2:	b911      	cbnz	r1, 8003eea <sbrk_aligned+0x12>
 8003ee4:	f000 fbaa 	bl	800463c <_sbrk_r>
 8003ee8:	6030      	str	r0, [r6, #0]
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f000 fba5 	bl	800463c <_sbrk_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	d00a      	beq.n	8003f0c <sbrk_aligned+0x34>
 8003ef6:	1cc4      	adds	r4, r0, #3
 8003ef8:	f024 0403 	bic.w	r4, r4, #3
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	d007      	beq.n	8003f10 <sbrk_aligned+0x38>
 8003f00:	1a21      	subs	r1, r4, r0
 8003f02:	4628      	mov	r0, r5
 8003f04:	f000 fb9a 	bl	800463c <_sbrk_r>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d101      	bne.n	8003f10 <sbrk_aligned+0x38>
 8003f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f10:	4620      	mov	r0, r4
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	20000358 	.word	0x20000358

08003f18 <_malloc_r>:
 8003f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f1c:	1ccd      	adds	r5, r1, #3
 8003f1e:	f025 0503 	bic.w	r5, r5, #3
 8003f22:	3508      	adds	r5, #8
 8003f24:	2d0c      	cmp	r5, #12
 8003f26:	bf38      	it	cc
 8003f28:	250c      	movcc	r5, #12
 8003f2a:	2d00      	cmp	r5, #0
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	db01      	blt.n	8003f34 <_malloc_r+0x1c>
 8003f30:	42a9      	cmp	r1, r5
 8003f32:	d905      	bls.n	8003f40 <_malloc_r+0x28>
 8003f34:	230c      	movs	r3, #12
 8003f36:	2600      	movs	r6, #0
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004014 <_malloc_r+0xfc>
 8003f44:	f000 f868 	bl	8004018 <__malloc_lock>
 8003f48:	f8d8 3000 	ldr.w	r3, [r8]
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	bb5c      	cbnz	r4, 8003fa8 <_malloc_r+0x90>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4638      	mov	r0, r7
 8003f54:	f7ff ffc0 	bl	8003ed8 <sbrk_aligned>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	d155      	bne.n	800400a <_malloc_r+0xf2>
 8003f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8003f62:	4626      	mov	r6, r4
 8003f64:	2e00      	cmp	r6, #0
 8003f66:	d145      	bne.n	8003ff4 <_malloc_r+0xdc>
 8003f68:	2c00      	cmp	r4, #0
 8003f6a:	d048      	beq.n	8003ffe <_malloc_r+0xe6>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4638      	mov	r0, r7
 8003f72:	eb04 0903 	add.w	r9, r4, r3
 8003f76:	f000 fb61 	bl	800463c <_sbrk_r>
 8003f7a:	4581      	cmp	r9, r0
 8003f7c:	d13f      	bne.n	8003ffe <_malloc_r+0xe6>
 8003f7e:	6821      	ldr	r1, [r4, #0]
 8003f80:	4638      	mov	r0, r7
 8003f82:	1a6d      	subs	r5, r5, r1
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7ff ffa7 	bl	8003ed8 <sbrk_aligned>
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d037      	beq.n	8003ffe <_malloc_r+0xe6>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	442b      	add	r3, r5
 8003f92:	6023      	str	r3, [r4, #0]
 8003f94:	f8d8 3000 	ldr.w	r3, [r8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d038      	beq.n	800400e <_malloc_r+0xf6>
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	42a2      	cmp	r2, r4
 8003fa0:	d12b      	bne.n	8003ffa <_malloc_r+0xe2>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	e00f      	b.n	8003fc8 <_malloc_r+0xb0>
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	1b52      	subs	r2, r2, r5
 8003fac:	d41f      	bmi.n	8003fee <_malloc_r+0xd6>
 8003fae:	2a0b      	cmp	r2, #11
 8003fb0:	d917      	bls.n	8003fe2 <_malloc_r+0xca>
 8003fb2:	1961      	adds	r1, r4, r5
 8003fb4:	42a3      	cmp	r3, r4
 8003fb6:	6025      	str	r5, [r4, #0]
 8003fb8:	bf18      	it	ne
 8003fba:	6059      	strne	r1, [r3, #4]
 8003fbc:	6863      	ldr	r3, [r4, #4]
 8003fbe:	bf08      	it	eq
 8003fc0:	f8c8 1000 	streq.w	r1, [r8]
 8003fc4:	5162      	str	r2, [r4, r5]
 8003fc6:	604b      	str	r3, [r1, #4]
 8003fc8:	4638      	mov	r0, r7
 8003fca:	f104 060b 	add.w	r6, r4, #11
 8003fce:	f000 f829 	bl	8004024 <__malloc_unlock>
 8003fd2:	f026 0607 	bic.w	r6, r6, #7
 8003fd6:	1d23      	adds	r3, r4, #4
 8003fd8:	1af2      	subs	r2, r6, r3
 8003fda:	d0ae      	beq.n	8003f3a <_malloc_r+0x22>
 8003fdc:	1b9b      	subs	r3, r3, r6
 8003fde:	50a3      	str	r3, [r4, r2]
 8003fe0:	e7ab      	b.n	8003f3a <_malloc_r+0x22>
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	d1dd      	bne.n	8003fa4 <_malloc_r+0x8c>
 8003fe8:	f8c8 2000 	str.w	r2, [r8]
 8003fec:	e7ec      	b.n	8003fc8 <_malloc_r+0xb0>
 8003fee:	4623      	mov	r3, r4
 8003ff0:	6864      	ldr	r4, [r4, #4]
 8003ff2:	e7ac      	b.n	8003f4e <_malloc_r+0x36>
 8003ff4:	4634      	mov	r4, r6
 8003ff6:	6876      	ldr	r6, [r6, #4]
 8003ff8:	e7b4      	b.n	8003f64 <_malloc_r+0x4c>
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	e7cc      	b.n	8003f98 <_malloc_r+0x80>
 8003ffe:	230c      	movs	r3, #12
 8004000:	4638      	mov	r0, r7
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	f000 f80e 	bl	8004024 <__malloc_unlock>
 8004008:	e797      	b.n	8003f3a <_malloc_r+0x22>
 800400a:	6025      	str	r5, [r4, #0]
 800400c:	e7dc      	b.n	8003fc8 <_malloc_r+0xb0>
 800400e:	605b      	str	r3, [r3, #4]
 8004010:	deff      	udf	#255	; 0xff
 8004012:	bf00      	nop
 8004014:	20000354 	.word	0x20000354

08004018 <__malloc_lock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_lock+0x8>)
 800401a:	f7ff bf05 	b.w	8003e28 <__retarget_lock_acquire_recursive>
 800401e:	bf00      	nop
 8004020:	20000350 	.word	0x20000350

08004024 <__malloc_unlock>:
 8004024:	4801      	ldr	r0, [pc, #4]	; (800402c <__malloc_unlock+0x8>)
 8004026:	f7ff bf00 	b.w	8003e2a <__retarget_lock_release_recursive>
 800402a:	bf00      	nop
 800402c:	20000350 	.word	0x20000350

08004030 <__ssputs_r>:
 8004030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	461f      	mov	r7, r3
 8004036:	688e      	ldr	r6, [r1, #8]
 8004038:	4682      	mov	sl, r0
 800403a:	42be      	cmp	r6, r7
 800403c:	460c      	mov	r4, r1
 800403e:	4690      	mov	r8, r2
 8004040:	680b      	ldr	r3, [r1, #0]
 8004042:	d82c      	bhi.n	800409e <__ssputs_r+0x6e>
 8004044:	898a      	ldrh	r2, [r1, #12]
 8004046:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800404a:	d026      	beq.n	800409a <__ssputs_r+0x6a>
 800404c:	6965      	ldr	r5, [r4, #20]
 800404e:	6909      	ldr	r1, [r1, #16]
 8004050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004054:	eba3 0901 	sub.w	r9, r3, r1
 8004058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800405c:	1c7b      	adds	r3, r7, #1
 800405e:	444b      	add	r3, r9
 8004060:	106d      	asrs	r5, r5, #1
 8004062:	429d      	cmp	r5, r3
 8004064:	bf38      	it	cc
 8004066:	461d      	movcc	r5, r3
 8004068:	0553      	lsls	r3, r2, #21
 800406a:	d527      	bpl.n	80040bc <__ssputs_r+0x8c>
 800406c:	4629      	mov	r1, r5
 800406e:	f7ff ff53 	bl	8003f18 <_malloc_r>
 8004072:	4606      	mov	r6, r0
 8004074:	b360      	cbz	r0, 80040d0 <__ssputs_r+0xa0>
 8004076:	464a      	mov	r2, r9
 8004078:	6921      	ldr	r1, [r4, #16]
 800407a:	f7ff fed7 	bl	8003e2c <memcpy>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004088:	81a3      	strh	r3, [r4, #12]
 800408a:	6126      	str	r6, [r4, #16]
 800408c:	444e      	add	r6, r9
 800408e:	6026      	str	r6, [r4, #0]
 8004090:	463e      	mov	r6, r7
 8004092:	6165      	str	r5, [r4, #20]
 8004094:	eba5 0509 	sub.w	r5, r5, r9
 8004098:	60a5      	str	r5, [r4, #8]
 800409a:	42be      	cmp	r6, r7
 800409c:	d900      	bls.n	80040a0 <__ssputs_r+0x70>
 800409e:	463e      	mov	r6, r7
 80040a0:	4632      	mov	r2, r6
 80040a2:	4641      	mov	r1, r8
 80040a4:	6820      	ldr	r0, [r4, #0]
 80040a6:	f000 faaf 	bl	8004608 <memmove>
 80040aa:	2000      	movs	r0, #0
 80040ac:	68a3      	ldr	r3, [r4, #8]
 80040ae:	1b9b      	subs	r3, r3, r6
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	6823      	ldr	r3, [r4, #0]
 80040b4:	4433      	add	r3, r6
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	462a      	mov	r2, r5
 80040be:	f000 fadb 	bl	8004678 <_realloc_r>
 80040c2:	4606      	mov	r6, r0
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d1e0      	bne.n	800408a <__ssputs_r+0x5a>
 80040c8:	4650      	mov	r0, sl
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	f7ff febc 	bl	8003e48 <_free_r>
 80040d0:	230c      	movs	r3, #12
 80040d2:	f8ca 3000 	str.w	r3, [sl]
 80040d6:	89a3      	ldrh	r3, [r4, #12]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	e7e9      	b.n	80040b8 <__ssputs_r+0x88>

080040e4 <_svfiprintf_r>:
 80040e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e8:	4698      	mov	r8, r3
 80040ea:	898b      	ldrh	r3, [r1, #12]
 80040ec:	4607      	mov	r7, r0
 80040ee:	061b      	lsls	r3, r3, #24
 80040f0:	460d      	mov	r5, r1
 80040f2:	4614      	mov	r4, r2
 80040f4:	b09d      	sub	sp, #116	; 0x74
 80040f6:	d50e      	bpl.n	8004116 <_svfiprintf_r+0x32>
 80040f8:	690b      	ldr	r3, [r1, #16]
 80040fa:	b963      	cbnz	r3, 8004116 <_svfiprintf_r+0x32>
 80040fc:	2140      	movs	r1, #64	; 0x40
 80040fe:	f7ff ff0b 	bl	8003f18 <_malloc_r>
 8004102:	6028      	str	r0, [r5, #0]
 8004104:	6128      	str	r0, [r5, #16]
 8004106:	b920      	cbnz	r0, 8004112 <_svfiprintf_r+0x2e>
 8004108:	230c      	movs	r3, #12
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e0d0      	b.n	80042b4 <_svfiprintf_r+0x1d0>
 8004112:	2340      	movs	r3, #64	; 0x40
 8004114:	616b      	str	r3, [r5, #20]
 8004116:	2300      	movs	r3, #0
 8004118:	9309      	str	r3, [sp, #36]	; 0x24
 800411a:	2320      	movs	r3, #32
 800411c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004120:	2330      	movs	r3, #48	; 0x30
 8004122:	f04f 0901 	mov.w	r9, #1
 8004126:	f8cd 800c 	str.w	r8, [sp, #12]
 800412a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80042cc <_svfiprintf_r+0x1e8>
 800412e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004132:	4623      	mov	r3, r4
 8004134:	469a      	mov	sl, r3
 8004136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413a:	b10a      	cbz	r2, 8004140 <_svfiprintf_r+0x5c>
 800413c:	2a25      	cmp	r2, #37	; 0x25
 800413e:	d1f9      	bne.n	8004134 <_svfiprintf_r+0x50>
 8004140:	ebba 0b04 	subs.w	fp, sl, r4
 8004144:	d00b      	beq.n	800415e <_svfiprintf_r+0x7a>
 8004146:	465b      	mov	r3, fp
 8004148:	4622      	mov	r2, r4
 800414a:	4629      	mov	r1, r5
 800414c:	4638      	mov	r0, r7
 800414e:	f7ff ff6f 	bl	8004030 <__ssputs_r>
 8004152:	3001      	adds	r0, #1
 8004154:	f000 80a9 	beq.w	80042aa <_svfiprintf_r+0x1c6>
 8004158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800415a:	445a      	add	r2, fp
 800415c:	9209      	str	r2, [sp, #36]	; 0x24
 800415e:	f89a 3000 	ldrb.w	r3, [sl]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80a1 	beq.w	80042aa <_svfiprintf_r+0x1c6>
 8004168:	2300      	movs	r3, #0
 800416a:	f04f 32ff 	mov.w	r2, #4294967295
 800416e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004172:	f10a 0a01 	add.w	sl, sl, #1
 8004176:	9304      	str	r3, [sp, #16]
 8004178:	9307      	str	r3, [sp, #28]
 800417a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800417e:	931a      	str	r3, [sp, #104]	; 0x68
 8004180:	4654      	mov	r4, sl
 8004182:	2205      	movs	r2, #5
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	4850      	ldr	r0, [pc, #320]	; (80042cc <_svfiprintf_r+0x1e8>)
 800418a:	f000 fa67 	bl	800465c <memchr>
 800418e:	9a04      	ldr	r2, [sp, #16]
 8004190:	b9d8      	cbnz	r0, 80041ca <_svfiprintf_r+0xe6>
 8004192:	06d0      	lsls	r0, r2, #27
 8004194:	bf44      	itt	mi
 8004196:	2320      	movmi	r3, #32
 8004198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800419c:	0711      	lsls	r1, r2, #28
 800419e:	bf44      	itt	mi
 80041a0:	232b      	movmi	r3, #43	; 0x2b
 80041a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041a6:	f89a 3000 	ldrb.w	r3, [sl]
 80041aa:	2b2a      	cmp	r3, #42	; 0x2a
 80041ac:	d015      	beq.n	80041da <_svfiprintf_r+0xf6>
 80041ae:	4654      	mov	r4, sl
 80041b0:	2000      	movs	r0, #0
 80041b2:	f04f 0c0a 	mov.w	ip, #10
 80041b6:	9a07      	ldr	r2, [sp, #28]
 80041b8:	4621      	mov	r1, r4
 80041ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041be:	3b30      	subs	r3, #48	; 0x30
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d94d      	bls.n	8004260 <_svfiprintf_r+0x17c>
 80041c4:	b1b0      	cbz	r0, 80041f4 <_svfiprintf_r+0x110>
 80041c6:	9207      	str	r2, [sp, #28]
 80041c8:	e014      	b.n	80041f4 <_svfiprintf_r+0x110>
 80041ca:	eba0 0308 	sub.w	r3, r0, r8
 80041ce:	fa09 f303 	lsl.w	r3, r9, r3
 80041d2:	4313      	orrs	r3, r2
 80041d4:	46a2      	mov	sl, r4
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	e7d2      	b.n	8004180 <_svfiprintf_r+0x9c>
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	1d19      	adds	r1, r3, #4
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9103      	str	r1, [sp, #12]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfbb      	ittet	lt
 80041e6:	425b      	neglt	r3, r3
 80041e8:	f042 0202 	orrlt.w	r2, r2, #2
 80041ec:	9307      	strge	r3, [sp, #28]
 80041ee:	9307      	strlt	r3, [sp, #28]
 80041f0:	bfb8      	it	lt
 80041f2:	9204      	strlt	r2, [sp, #16]
 80041f4:	7823      	ldrb	r3, [r4, #0]
 80041f6:	2b2e      	cmp	r3, #46	; 0x2e
 80041f8:	d10c      	bne.n	8004214 <_svfiprintf_r+0x130>
 80041fa:	7863      	ldrb	r3, [r4, #1]
 80041fc:	2b2a      	cmp	r3, #42	; 0x2a
 80041fe:	d134      	bne.n	800426a <_svfiprintf_r+0x186>
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	3402      	adds	r4, #2
 8004204:	1d1a      	adds	r2, r3, #4
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	9203      	str	r2, [sp, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	bfb8      	it	lt
 800420e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004212:	9305      	str	r3, [sp, #20]
 8004214:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80042d0 <_svfiprintf_r+0x1ec>
 8004218:	2203      	movs	r2, #3
 800421a:	4650      	mov	r0, sl
 800421c:	7821      	ldrb	r1, [r4, #0]
 800421e:	f000 fa1d 	bl	800465c <memchr>
 8004222:	b138      	cbz	r0, 8004234 <_svfiprintf_r+0x150>
 8004224:	2240      	movs	r2, #64	; 0x40
 8004226:	9b04      	ldr	r3, [sp, #16]
 8004228:	eba0 000a 	sub.w	r0, r0, sl
 800422c:	4082      	lsls	r2, r0
 800422e:	4313      	orrs	r3, r2
 8004230:	3401      	adds	r4, #1
 8004232:	9304      	str	r3, [sp, #16]
 8004234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004238:	2206      	movs	r2, #6
 800423a:	4826      	ldr	r0, [pc, #152]	; (80042d4 <_svfiprintf_r+0x1f0>)
 800423c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004240:	f000 fa0c 	bl	800465c <memchr>
 8004244:	2800      	cmp	r0, #0
 8004246:	d038      	beq.n	80042ba <_svfiprintf_r+0x1d6>
 8004248:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <_svfiprintf_r+0x1f4>)
 800424a:	bb1b      	cbnz	r3, 8004294 <_svfiprintf_r+0x1b0>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	3307      	adds	r3, #7
 8004250:	f023 0307 	bic.w	r3, r3, #7
 8004254:	3308      	adds	r3, #8
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425a:	4433      	add	r3, r6
 800425c:	9309      	str	r3, [sp, #36]	; 0x24
 800425e:	e768      	b.n	8004132 <_svfiprintf_r+0x4e>
 8004260:	460c      	mov	r4, r1
 8004262:	2001      	movs	r0, #1
 8004264:	fb0c 3202 	mla	r2, ip, r2, r3
 8004268:	e7a6      	b.n	80041b8 <_svfiprintf_r+0xd4>
 800426a:	2300      	movs	r3, #0
 800426c:	f04f 0c0a 	mov.w	ip, #10
 8004270:	4619      	mov	r1, r3
 8004272:	3401      	adds	r4, #1
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	4620      	mov	r0, r4
 8004278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800427c:	3a30      	subs	r2, #48	; 0x30
 800427e:	2a09      	cmp	r2, #9
 8004280:	d903      	bls.n	800428a <_svfiprintf_r+0x1a6>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0c6      	beq.n	8004214 <_svfiprintf_r+0x130>
 8004286:	9105      	str	r1, [sp, #20]
 8004288:	e7c4      	b.n	8004214 <_svfiprintf_r+0x130>
 800428a:	4604      	mov	r4, r0
 800428c:	2301      	movs	r3, #1
 800428e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004292:	e7f0      	b.n	8004276 <_svfiprintf_r+0x192>
 8004294:	ab03      	add	r3, sp, #12
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	462a      	mov	r2, r5
 800429a:	4638      	mov	r0, r7
 800429c:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <_svfiprintf_r+0x1f8>)
 800429e:	a904      	add	r1, sp, #16
 80042a0:	f3af 8000 	nop.w
 80042a4:	1c42      	adds	r2, r0, #1
 80042a6:	4606      	mov	r6, r0
 80042a8:	d1d6      	bne.n	8004258 <_svfiprintf_r+0x174>
 80042aa:	89ab      	ldrh	r3, [r5, #12]
 80042ac:	065b      	lsls	r3, r3, #25
 80042ae:	f53f af2d 	bmi.w	800410c <_svfiprintf_r+0x28>
 80042b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042b4:	b01d      	add	sp, #116	; 0x74
 80042b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ba:	ab03      	add	r3, sp, #12
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	462a      	mov	r2, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <_svfiprintf_r+0x1f8>)
 80042c4:	a904      	add	r1, sp, #16
 80042c6:	f000 f87d 	bl	80043c4 <_printf_i>
 80042ca:	e7eb      	b.n	80042a4 <_svfiprintf_r+0x1c0>
 80042cc:	080047b6 	.word	0x080047b6
 80042d0:	080047bc 	.word	0x080047bc
 80042d4:	080047c0 	.word	0x080047c0
 80042d8:	00000000 	.word	0x00000000
 80042dc:	08004031 	.word	0x08004031

080042e0 <_printf_common>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	4616      	mov	r6, r2
 80042e6:	4699      	mov	r9, r3
 80042e8:	688a      	ldr	r2, [r1, #8]
 80042ea:	690b      	ldr	r3, [r1, #16]
 80042ec:	4607      	mov	r7, r0
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bfb8      	it	lt
 80042f2:	4613      	movlt	r3, r2
 80042f4:	6033      	str	r3, [r6, #0]
 80042f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042fa:	460c      	mov	r4, r1
 80042fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004300:	b10a      	cbz	r2, 8004306 <_printf_common+0x26>
 8004302:	3301      	adds	r3, #1
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	0699      	lsls	r1, r3, #26
 800430a:	bf42      	ittt	mi
 800430c:	6833      	ldrmi	r3, [r6, #0]
 800430e:	3302      	addmi	r3, #2
 8004310:	6033      	strmi	r3, [r6, #0]
 8004312:	6825      	ldr	r5, [r4, #0]
 8004314:	f015 0506 	ands.w	r5, r5, #6
 8004318:	d106      	bne.n	8004328 <_printf_common+0x48>
 800431a:	f104 0a19 	add.w	sl, r4, #25
 800431e:	68e3      	ldr	r3, [r4, #12]
 8004320:	6832      	ldr	r2, [r6, #0]
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	42ab      	cmp	r3, r5
 8004326:	dc2b      	bgt.n	8004380 <_printf_common+0xa0>
 8004328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800432c:	1e13      	subs	r3, r2, #0
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	bf18      	it	ne
 8004332:	2301      	movne	r3, #1
 8004334:	0692      	lsls	r2, r2, #26
 8004336:	d430      	bmi.n	800439a <_printf_common+0xba>
 8004338:	4649      	mov	r1, r9
 800433a:	4638      	mov	r0, r7
 800433c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004340:	47c0      	blx	r8
 8004342:	3001      	adds	r0, #1
 8004344:	d023      	beq.n	800438e <_printf_common+0xae>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	6922      	ldr	r2, [r4, #16]
 800434a:	f003 0306 	and.w	r3, r3, #6
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf14      	ite	ne
 8004352:	2500      	movne	r5, #0
 8004354:	6833      	ldreq	r3, [r6, #0]
 8004356:	f04f 0600 	mov.w	r6, #0
 800435a:	bf08      	it	eq
 800435c:	68e5      	ldreq	r5, [r4, #12]
 800435e:	f104 041a 	add.w	r4, r4, #26
 8004362:	bf08      	it	eq
 8004364:	1aed      	subeq	r5, r5, r3
 8004366:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800436a:	bf08      	it	eq
 800436c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004370:	4293      	cmp	r3, r2
 8004372:	bfc4      	itt	gt
 8004374:	1a9b      	subgt	r3, r3, r2
 8004376:	18ed      	addgt	r5, r5, r3
 8004378:	42b5      	cmp	r5, r6
 800437a:	d11a      	bne.n	80043b2 <_printf_common+0xd2>
 800437c:	2000      	movs	r0, #0
 800437e:	e008      	b.n	8004392 <_printf_common+0xb2>
 8004380:	2301      	movs	r3, #1
 8004382:	4652      	mov	r2, sl
 8004384:	4649      	mov	r1, r9
 8004386:	4638      	mov	r0, r7
 8004388:	47c0      	blx	r8
 800438a:	3001      	adds	r0, #1
 800438c:	d103      	bne.n	8004396 <_printf_common+0xb6>
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004396:	3501      	adds	r5, #1
 8004398:	e7c1      	b.n	800431e <_printf_common+0x3e>
 800439a:	2030      	movs	r0, #48	; 0x30
 800439c:	18e1      	adds	r1, r4, r3
 800439e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043a8:	4422      	add	r2, r4
 80043aa:	3302      	adds	r3, #2
 80043ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043b0:	e7c2      	b.n	8004338 <_printf_common+0x58>
 80043b2:	2301      	movs	r3, #1
 80043b4:	4622      	mov	r2, r4
 80043b6:	4649      	mov	r1, r9
 80043b8:	4638      	mov	r0, r7
 80043ba:	47c0      	blx	r8
 80043bc:	3001      	adds	r0, #1
 80043be:	d0e6      	beq.n	800438e <_printf_common+0xae>
 80043c0:	3601      	adds	r6, #1
 80043c2:	e7d9      	b.n	8004378 <_printf_common+0x98>

080043c4 <_printf_i>:
 80043c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	7e0f      	ldrb	r7, [r1, #24]
 80043ca:	4691      	mov	r9, r2
 80043cc:	2f78      	cmp	r7, #120	; 0x78
 80043ce:	4680      	mov	r8, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	469a      	mov	sl, r3
 80043d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043da:	d807      	bhi.n	80043ec <_printf_i+0x28>
 80043dc:	2f62      	cmp	r7, #98	; 0x62
 80043de:	d80a      	bhi.n	80043f6 <_printf_i+0x32>
 80043e0:	2f00      	cmp	r7, #0
 80043e2:	f000 80d5 	beq.w	8004590 <_printf_i+0x1cc>
 80043e6:	2f58      	cmp	r7, #88	; 0x58
 80043e8:	f000 80c1 	beq.w	800456e <_printf_i+0x1aa>
 80043ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043f4:	e03a      	b.n	800446c <_printf_i+0xa8>
 80043f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043fa:	2b15      	cmp	r3, #21
 80043fc:	d8f6      	bhi.n	80043ec <_printf_i+0x28>
 80043fe:	a101      	add	r1, pc, #4	; (adr r1, 8004404 <_printf_i+0x40>)
 8004400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004404:	0800445d 	.word	0x0800445d
 8004408:	08004471 	.word	0x08004471
 800440c:	080043ed 	.word	0x080043ed
 8004410:	080043ed 	.word	0x080043ed
 8004414:	080043ed 	.word	0x080043ed
 8004418:	080043ed 	.word	0x080043ed
 800441c:	08004471 	.word	0x08004471
 8004420:	080043ed 	.word	0x080043ed
 8004424:	080043ed 	.word	0x080043ed
 8004428:	080043ed 	.word	0x080043ed
 800442c:	080043ed 	.word	0x080043ed
 8004430:	08004577 	.word	0x08004577
 8004434:	0800449d 	.word	0x0800449d
 8004438:	08004531 	.word	0x08004531
 800443c:	080043ed 	.word	0x080043ed
 8004440:	080043ed 	.word	0x080043ed
 8004444:	08004599 	.word	0x08004599
 8004448:	080043ed 	.word	0x080043ed
 800444c:	0800449d 	.word	0x0800449d
 8004450:	080043ed 	.word	0x080043ed
 8004454:	080043ed 	.word	0x080043ed
 8004458:	08004539 	.word	0x08004539
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	1d1a      	adds	r2, r3, #4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800446c:	2301      	movs	r3, #1
 800446e:	e0a0      	b.n	80045b2 <_printf_i+0x1ee>
 8004470:	6820      	ldr	r0, [r4, #0]
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	0607      	lsls	r7, r0, #24
 8004476:	f103 0104 	add.w	r1, r3, #4
 800447a:	6029      	str	r1, [r5, #0]
 800447c:	d501      	bpl.n	8004482 <_printf_i+0xbe>
 800447e:	681e      	ldr	r6, [r3, #0]
 8004480:	e003      	b.n	800448a <_printf_i+0xc6>
 8004482:	0646      	lsls	r6, r0, #25
 8004484:	d5fb      	bpl.n	800447e <_printf_i+0xba>
 8004486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800448a:	2e00      	cmp	r6, #0
 800448c:	da03      	bge.n	8004496 <_printf_i+0xd2>
 800448e:	232d      	movs	r3, #45	; 0x2d
 8004490:	4276      	negs	r6, r6
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004496:	230a      	movs	r3, #10
 8004498:	4859      	ldr	r0, [pc, #356]	; (8004600 <_printf_i+0x23c>)
 800449a:	e012      	b.n	80044c2 <_printf_i+0xfe>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	6820      	ldr	r0, [r4, #0]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	6029      	str	r1, [r5, #0]
 80044a4:	0605      	lsls	r5, r0, #24
 80044a6:	d501      	bpl.n	80044ac <_printf_i+0xe8>
 80044a8:	681e      	ldr	r6, [r3, #0]
 80044aa:	e002      	b.n	80044b2 <_printf_i+0xee>
 80044ac:	0641      	lsls	r1, r0, #25
 80044ae:	d5fb      	bpl.n	80044a8 <_printf_i+0xe4>
 80044b0:	881e      	ldrh	r6, [r3, #0]
 80044b2:	2f6f      	cmp	r7, #111	; 0x6f
 80044b4:	bf0c      	ite	eq
 80044b6:	2308      	moveq	r3, #8
 80044b8:	230a      	movne	r3, #10
 80044ba:	4851      	ldr	r0, [pc, #324]	; (8004600 <_printf_i+0x23c>)
 80044bc:	2100      	movs	r1, #0
 80044be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044c2:	6865      	ldr	r5, [r4, #4]
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	bfa8      	it	ge
 80044c8:	6821      	ldrge	r1, [r4, #0]
 80044ca:	60a5      	str	r5, [r4, #8]
 80044cc:	bfa4      	itt	ge
 80044ce:	f021 0104 	bicge.w	r1, r1, #4
 80044d2:	6021      	strge	r1, [r4, #0]
 80044d4:	b90e      	cbnz	r6, 80044da <_printf_i+0x116>
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	d04b      	beq.n	8004572 <_printf_i+0x1ae>
 80044da:	4615      	mov	r5, r2
 80044dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80044e0:	fb03 6711 	mls	r7, r3, r1, r6
 80044e4:	5dc7      	ldrb	r7, [r0, r7]
 80044e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ea:	4637      	mov	r7, r6
 80044ec:	42bb      	cmp	r3, r7
 80044ee:	460e      	mov	r6, r1
 80044f0:	d9f4      	bls.n	80044dc <_printf_i+0x118>
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d10b      	bne.n	800450e <_printf_i+0x14a>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	07de      	lsls	r6, r3, #31
 80044fa:	d508      	bpl.n	800450e <_printf_i+0x14a>
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	6861      	ldr	r1, [r4, #4]
 8004500:	4299      	cmp	r1, r3
 8004502:	bfde      	ittt	le
 8004504:	2330      	movle	r3, #48	; 0x30
 8004506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800450a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800450e:	1b52      	subs	r2, r2, r5
 8004510:	6122      	str	r2, [r4, #16]
 8004512:	464b      	mov	r3, r9
 8004514:	4621      	mov	r1, r4
 8004516:	4640      	mov	r0, r8
 8004518:	f8cd a000 	str.w	sl, [sp]
 800451c:	aa03      	add	r2, sp, #12
 800451e:	f7ff fedf 	bl	80042e0 <_printf_common>
 8004522:	3001      	adds	r0, #1
 8004524:	d14a      	bne.n	80045bc <_printf_i+0x1f8>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295
 800452a:	b004      	add	sp, #16
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	f043 0320 	orr.w	r3, r3, #32
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2778      	movs	r7, #120	; 0x78
 800453a:	4832      	ldr	r0, [pc, #200]	; (8004604 <_printf_i+0x240>)
 800453c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	6829      	ldr	r1, [r5, #0]
 8004544:	061f      	lsls	r7, r3, #24
 8004546:	f851 6b04 	ldr.w	r6, [r1], #4
 800454a:	d402      	bmi.n	8004552 <_printf_i+0x18e>
 800454c:	065f      	lsls	r7, r3, #25
 800454e:	bf48      	it	mi
 8004550:	b2b6      	uxthmi	r6, r6
 8004552:	07df      	lsls	r7, r3, #31
 8004554:	bf48      	it	mi
 8004556:	f043 0320 	orrmi.w	r3, r3, #32
 800455a:	6029      	str	r1, [r5, #0]
 800455c:	bf48      	it	mi
 800455e:	6023      	strmi	r3, [r4, #0]
 8004560:	b91e      	cbnz	r6, 800456a <_printf_i+0x1a6>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	f023 0320 	bic.w	r3, r3, #32
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	2310      	movs	r3, #16
 800456c:	e7a6      	b.n	80044bc <_printf_i+0xf8>
 800456e:	4824      	ldr	r0, [pc, #144]	; (8004600 <_printf_i+0x23c>)
 8004570:	e7e4      	b.n	800453c <_printf_i+0x178>
 8004572:	4615      	mov	r5, r2
 8004574:	e7bd      	b.n	80044f2 <_printf_i+0x12e>
 8004576:	682b      	ldr	r3, [r5, #0]
 8004578:	6826      	ldr	r6, [r4, #0]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	6961      	ldr	r1, [r4, #20]
 800457e:	6028      	str	r0, [r5, #0]
 8004580:	0635      	lsls	r5, r6, #24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	d501      	bpl.n	800458a <_printf_i+0x1c6>
 8004586:	6019      	str	r1, [r3, #0]
 8004588:	e002      	b.n	8004590 <_printf_i+0x1cc>
 800458a:	0670      	lsls	r0, r6, #25
 800458c:	d5fb      	bpl.n	8004586 <_printf_i+0x1c2>
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	4615      	mov	r5, r2
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	e7bc      	b.n	8004512 <_printf_i+0x14e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	2100      	movs	r1, #0
 800459c:	1d1a      	adds	r2, r3, #4
 800459e:	602a      	str	r2, [r5, #0]
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	4628      	mov	r0, r5
 80045a6:	f000 f859 	bl	800465c <memchr>
 80045aa:	b108      	cbz	r0, 80045b0 <_printf_i+0x1ec>
 80045ac:	1b40      	subs	r0, r0, r5
 80045ae:	6060      	str	r0, [r4, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ba:	e7aa      	b.n	8004512 <_printf_i+0x14e>
 80045bc:	462a      	mov	r2, r5
 80045be:	4649      	mov	r1, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	47d0      	blx	sl
 80045c6:	3001      	adds	r0, #1
 80045c8:	d0ad      	beq.n	8004526 <_printf_i+0x162>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d413      	bmi.n	80045f8 <_printf_i+0x234>
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	4298      	cmp	r0, r3
 80045d6:	bfb8      	it	lt
 80045d8:	4618      	movlt	r0, r3
 80045da:	e7a6      	b.n	800452a <_printf_i+0x166>
 80045dc:	2301      	movs	r3, #1
 80045de:	4632      	mov	r2, r6
 80045e0:	4649      	mov	r1, r9
 80045e2:	4640      	mov	r0, r8
 80045e4:	47d0      	blx	sl
 80045e6:	3001      	adds	r0, #1
 80045e8:	d09d      	beq.n	8004526 <_printf_i+0x162>
 80045ea:	3501      	adds	r5, #1
 80045ec:	68e3      	ldr	r3, [r4, #12]
 80045ee:	9903      	ldr	r1, [sp, #12]
 80045f0:	1a5b      	subs	r3, r3, r1
 80045f2:	42ab      	cmp	r3, r5
 80045f4:	dcf2      	bgt.n	80045dc <_printf_i+0x218>
 80045f6:	e7eb      	b.n	80045d0 <_printf_i+0x20c>
 80045f8:	2500      	movs	r5, #0
 80045fa:	f104 0619 	add.w	r6, r4, #25
 80045fe:	e7f5      	b.n	80045ec <_printf_i+0x228>
 8004600:	080047c7 	.word	0x080047c7
 8004604:	080047d8 	.word	0x080047d8

08004608 <memmove>:
 8004608:	4288      	cmp	r0, r1
 800460a:	b510      	push	{r4, lr}
 800460c:	eb01 0402 	add.w	r4, r1, r2
 8004610:	d902      	bls.n	8004618 <memmove+0x10>
 8004612:	4284      	cmp	r4, r0
 8004614:	4623      	mov	r3, r4
 8004616:	d807      	bhi.n	8004628 <memmove+0x20>
 8004618:	1e43      	subs	r3, r0, #1
 800461a:	42a1      	cmp	r1, r4
 800461c:	d008      	beq.n	8004630 <memmove+0x28>
 800461e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004626:	e7f8      	b.n	800461a <memmove+0x12>
 8004628:	4601      	mov	r1, r0
 800462a:	4402      	add	r2, r0
 800462c:	428a      	cmp	r2, r1
 800462e:	d100      	bne.n	8004632 <memmove+0x2a>
 8004630:	bd10      	pop	{r4, pc}
 8004632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800463a:	e7f7      	b.n	800462c <memmove+0x24>

0800463c <_sbrk_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	2300      	movs	r3, #0
 8004640:	4d05      	ldr	r5, [pc, #20]	; (8004658 <_sbrk_r+0x1c>)
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f7fc f96e 	bl	8000928 <_sbrk>
 800464c:	1c43      	adds	r3, r0, #1
 800464e:	d102      	bne.n	8004656 <_sbrk_r+0x1a>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	b103      	cbz	r3, 8004656 <_sbrk_r+0x1a>
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	2000034c 	.word	0x2000034c

0800465c <memchr>:
 800465c:	4603      	mov	r3, r0
 800465e:	b510      	push	{r4, lr}
 8004660:	b2c9      	uxtb	r1, r1
 8004662:	4402      	add	r2, r0
 8004664:	4293      	cmp	r3, r2
 8004666:	4618      	mov	r0, r3
 8004668:	d101      	bne.n	800466e <memchr+0x12>
 800466a:	2000      	movs	r0, #0
 800466c:	e003      	b.n	8004676 <memchr+0x1a>
 800466e:	7804      	ldrb	r4, [r0, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	428c      	cmp	r4, r1
 8004674:	d1f6      	bne.n	8004664 <memchr+0x8>
 8004676:	bd10      	pop	{r4, pc}

08004678 <_realloc_r>:
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	4680      	mov	r8, r0
 800467e:	4614      	mov	r4, r2
 8004680:	460e      	mov	r6, r1
 8004682:	b921      	cbnz	r1, 800468e <_realloc_r+0x16>
 8004684:	4611      	mov	r1, r2
 8004686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800468a:	f7ff bc45 	b.w	8003f18 <_malloc_r>
 800468e:	b92a      	cbnz	r2, 800469c <_realloc_r+0x24>
 8004690:	f7ff fbda 	bl	8003e48 <_free_r>
 8004694:	4625      	mov	r5, r4
 8004696:	4628      	mov	r0, r5
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800469c:	f000 f81b 	bl	80046d6 <_malloc_usable_size_r>
 80046a0:	4284      	cmp	r4, r0
 80046a2:	4607      	mov	r7, r0
 80046a4:	d802      	bhi.n	80046ac <_realloc_r+0x34>
 80046a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046aa:	d812      	bhi.n	80046d2 <_realloc_r+0x5a>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fc32 	bl	8003f18 <_malloc_r>
 80046b4:	4605      	mov	r5, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0ed      	beq.n	8004696 <_realloc_r+0x1e>
 80046ba:	42bc      	cmp	r4, r7
 80046bc:	4622      	mov	r2, r4
 80046be:	4631      	mov	r1, r6
 80046c0:	bf28      	it	cs
 80046c2:	463a      	movcs	r2, r7
 80046c4:	f7ff fbb2 	bl	8003e2c <memcpy>
 80046c8:	4631      	mov	r1, r6
 80046ca:	4640      	mov	r0, r8
 80046cc:	f7ff fbbc 	bl	8003e48 <_free_r>
 80046d0:	e7e1      	b.n	8004696 <_realloc_r+0x1e>
 80046d2:	4635      	mov	r5, r6
 80046d4:	e7df      	b.n	8004696 <_realloc_r+0x1e>

080046d6 <_malloc_usable_size_r>:
 80046d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046da:	1f18      	subs	r0, r3, #4
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfbc      	itt	lt
 80046e0:	580b      	ldrlt	r3, [r1, r0]
 80046e2:	18c0      	addlt	r0, r0, r3
 80046e4:	4770      	bx	lr
	...

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
